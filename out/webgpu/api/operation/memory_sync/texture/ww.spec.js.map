{"version":3,"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/ww.spec.ts"],"names":["description","makeTestGroup","GPUTest","kOperationBoundaries","kBoundaryInfo","kAllWriteOps","checkOpsValidForContext","g","test","desc","params","u","combine","expand","p","boundary","contexts","expandWithParams","_context","first","second","op","in","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,OAAT,QAAwB,yBAAxB;;AAEA;AACEC,oBADF;AAEEC,aAFF;AAGEC,YAHF;AAIEC,uBAJF;AAKO,wBALP;;AAOA,OAAO,MAAMC,CAAC,GAAGN,aAAa,CAACC,OAAD,CAAvB;;AAEPK,CAAC,CAACC,IAAF,CAAO,IAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,iFANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,UADX,EACuBT,oBADvB;AAEGU,MAFH,CAEU,UAFV,EAEsBC,CAAC,IAAIV,aAAa,CAACU,CAAC,CAACC,QAAH,CAAb,CAA0BC,QAFrD;AAGGC,gBAHH,CAGoB,WAAW,EAAEC,QAAF,EAAX,EAAyB;AACzC,OAAK,MAAMC,KAAX,IAAoBd,YAApB,EAAkC;AAChC,SAAK,MAAMe,MAAX,IAAqBf,YAArB,EAAmC;AACjC,UAAIC,uBAAuB,CAAC,CAACa,KAAD,EAAQC,MAAR,CAAD,EAAkBF,QAAlB,CAA3B,EAAwD;AACtD,cAAM;AACJC,UAAAA,KAAK,EAAE,EAAEE,EAAE,EAAEF,KAAN,EAAaG,EAAE,EAAEJ,QAAQ,CAAC,CAAD,CAAzB,EADH;AAEJE,UAAAA,MAAM,EAAE,EAAEC,EAAE,EAAED,MAAN,EAAcE,EAAE,EAAEJ,QAAQ,CAAC,CAAD,CAA1B,EAFJ,EAAN;;AAID;AACF;AACF;AACF,CAdH,CATJ;;AAyBGK,aAzBH","sourcesContent":["export const description = `\nMemory Synchronization Tests for Texture: write after write.\n\n- TODO: Test synchronization between multiple queues.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\n\nimport {\n  kOperationBoundaries,\n  kBoundaryInfo,\n  kAllWriteOps,\n  checkOpsValidForContext,\n} from './texture_sync_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('ww')\n  .desc(\n    `\n    Perform a 'first' write operation on a texture, followed by a 'second' write operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    If overlapping, the second write should overwrite the contents of the first.`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const first of kAllWriteOps) {\n          for (const second of kAllWriteOps) {\n            if (checkOpsValidForContext([first, second], _context)) {\n              yield {\n                first: { op: first, in: _context[0] },\n                second: { op: second, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .unimplemented();\n"],"file":"ww.spec.js"}