{"version":3,"sources":["../../../../../src/webgpu/api/operation/buffers/map_ArrayBuffer.spec.ts"],"names":["description","makeTestGroup","timeout","GPUTest","checkElementsEqual","g","test","desc","params","u","combine","fn","t","transfer","mapMode","kSize","initialData","Uint32Array","ArrayBuffer","i","length","buf","makeBufferWithContents","GPUBufferUsage","MAP_WRITE","MAP_READ","mapAsync","GPUMapMode","ab1","getMappedRange","expect","byteLength","mc","MessageChannel","ab2Promise","Promise","resolve","port2","onmessage","ev","fail","data","shouldThrow","port1","postMessage","ab2","ab2Data","expectOK","ab1Data","abs2NewData","slice","reverse","unmap"],"mappings":"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","sourcesContent":["export const description = `\nTests for the behavior of ArrayBuffers returned by getMappedRange.\n\nTODO: Add tests that transfer to another thread instead of just using MessageChannel.\nTODO: Add tests for any other Web APIs that can detach ArrayBuffers.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { timeout } from '../../../../common/util/timeout.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('postMessage')\n  .desc(\n    `Using postMessage to send a getMappedRange-returned ArrayBuffer throws a TypeError\n     if it was included in the transfer list. Otherwise, it makes a copy.\n    Test combinations of transfer={false, true}, mapMode={read,write}.`\n  )\n  .params(u =>\n    u //\n      .combine('transfer', [false, true])\n      .combine('mapMode', ['READ', 'WRITE'] as const)\n  )\n  .fn(async t => {\n    const { transfer, mapMode } = t.params;\n    const kSize = 1024;\n\n    // Populate initial data.\n    const initialData = new Uint32Array(new ArrayBuffer(kSize));\n    for (let i = 0; i < initialData.length; ++i) {\n      initialData[i] = i;\n    }\n\n    const buf = t.makeBufferWithContents(\n      initialData,\n      mapMode === 'WRITE' ? GPUBufferUsage.MAP_WRITE : GPUBufferUsage.MAP_READ\n    );\n\n    await buf.mapAsync(GPUMapMode[mapMode]);\n    const ab1 = buf.getMappedRange();\n    t.expect(ab1.byteLength === kSize, 'ab1 should have the size of the buffer');\n\n    const mc = new MessageChannel();\n    const ab2Promise = new Promise<ArrayBuffer>(resolve => {\n      mc.port2.onmessage = ev => {\n        if (transfer) {\n          t.fail(\n            `postMessage with ab1 in transfer list should not be received. Unexpected message: ${ev.data}`\n          );\n        } else {\n          resolve(ev.data);\n        }\n      };\n    });\n\n    if (transfer) {\n      t.shouldThrow('TypeError', () => mc.port1.postMessage(ab1, [ab1]));\n      // Wait to make sure the postMessage isn't received.\n      await new Promise(resolve => timeout(resolve, 100));\n    } else {\n      mc.port1.postMessage(ab1);\n    }\n    t.expect(ab1.byteLength === kSize, 'after postMessage, ab1 should not be detached');\n\n    if (!transfer) {\n      const ab2 = await ab2Promise;\n      t.expect(ab2.byteLength === kSize, 'ab2 should be the same size');\n      const ab2Data = new Uint32Array(ab2, 0, initialData.length);\n      // ab2 should have the same initial contents.\n      t.expectOK(checkElementsEqual(ab2Data, initialData));\n\n      // Mutations to ab2 should not be visible in ab1.\n      const ab1Data = new Uint32Array(ab1, 0, initialData.length);\n      const abs2NewData = initialData.slice().reverse();\n      for (let i = 0; i < ab2Data.length; ++i) {\n        ab2Data[i] = abs2NewData[i];\n      }\n      t.expectOK(checkElementsEqual(ab1Data, initialData));\n      t.expectOK(checkElementsEqual(ab2Data, abs2NewData));\n    }\n\n    buf.unmap();\n    t.expect(ab1.byteLength === 0, 'after unmap, ab1 should be detached');\n    // Still can't transfer after detaching\n    t.shouldThrow('TypeError', () => mc.port1.postMessage(ab1, [ab1]));\n  });\n"],"file":"map_ArrayBuffer.spec.js"}