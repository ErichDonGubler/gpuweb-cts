{"version":3,"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_ds_test.ts"],"names":["assert","kTextureFormatInfo","virtualMipSize","makeFullscreenVertexModule","device","createShaderModule","code","getDepthTestEqualPipeline","t","format","sampleCount","expected","createRenderPipeline","vertex","entryPoint","module","fragment","targets","depthStencil","depthCompare","primitive","topology","multisample","count","getStencilTestEqualPipeline","stencilFront","compare","stencilBack","checkContents","type","params","texture","state","subresourceRange","formatInfo","dimension","viewDescriptor","generateTextureViewDescriptorsForRendering","baseMipLevel","undefined","width","height","textureWidth","textureHeight","renderTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","resolveTexture","resolveTarget","createView","commandEncoder","createCommandEncoder","pushDebugGroup","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","depthStencilAttachment","depthStoreOp","depth","depthLoadOp","stencilStoreOp","stencil","stencilLoadOp","expectedDepth","stateToTexelComponents","Depth","setPipeline","expectedStencil","Stencil","setStencilReference","draw","end","popDebugGroup","queue","submit","finish","expectSingleColor","exp","R","checkContentsByDepthTest","args","checkContentsByStencilTest"],"mappings":"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","sourcesContent":["import { assert } from '../../../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../../../capability_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport { CheckContents } from '../texture_zero.spec.js';\n\nfunction makeFullscreenVertexModule(device: GPUDevice) {\n  return device.createShaderModule({\n    code: `\n    @stage(vertex)\n    fn main(@builtin(vertex_index) VertexIndex : u32)\n         -> @builtin(position) vec4<f32> {\n      var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n        vec2<f32>(-1.0, -3.0),\n        vec2<f32>( 3.0,  1.0),\n        vec2<f32>(-1.0,  1.0));\n      return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    }\n    `,\n  });\n}\n\nfunction getDepthTestEqualPipeline(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  sampleCount: number,\n  expected: number\n): GPURenderPipeline {\n  return t.device.createRenderPipeline({\n    vertex: {\n      entryPoint: 'main',\n      module: makeFullscreenVertexModule(t.device),\n    },\n    fragment: {\n      entryPoint: 'main',\n      module: t.device.createShaderModule({\n        code: `\n        struct Outputs {\n          @builtin(frag_depth) FragDepth : f32,\n          @location(0) outSuccess : f32,\n        };\n\n        @stage(fragment)\n        fn main() -> Outputs {\n          var output : Outputs;\n          output.FragDepth = f32(${expected});\n          output.outSuccess = 1.0;\n          return output;\n        }\n        `,\n      }),\n      targets: [{ format: 'r8unorm' }],\n    },\n    depthStencil: {\n      format,\n      depthCompare: 'equal',\n    },\n    primitive: { topology: 'triangle-list' },\n    multisample: { count: sampleCount },\n  });\n}\n\nfunction getStencilTestEqualPipeline(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  sampleCount: number\n): GPURenderPipeline {\n  return t.device.createRenderPipeline({\n    vertex: {\n      entryPoint: 'main',\n      module: makeFullscreenVertexModule(t.device),\n    },\n    fragment: {\n      entryPoint: 'main',\n      module: t.device.createShaderModule({\n        code: `\n        @stage(fragment)\n        fn main() -> @location(0) f32 {\n          return 1.0;\n        }\n        `,\n      }),\n      targets: [{ format: 'r8unorm' }],\n    },\n    depthStencil: {\n      format,\n      stencilFront: { compare: 'equal' },\n      stencilBack: { compare: 'equal' },\n    },\n    primitive: { topology: 'triangle-list' },\n    multisample: { count: sampleCount },\n  });\n}\n\nconst checkContents: (type: 'depth' | 'stencil', ...args: Parameters<CheckContents>) => void = (\n  type,\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  const formatInfo = kTextureFormatInfo[params.format];\n\n  assert(params.dimension === '2d');\n  for (const viewDescriptor of t.generateTextureViewDescriptorsForRendering(\n    'all',\n    subresourceRange\n  )) {\n    assert(viewDescriptor.baseMipLevel !== undefined);\n    const [width, height] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, 1],\n      viewDescriptor.baseMipLevel\n    );\n\n    const renderTexture = t.device.createTexture({\n      size: [width, height, 1],\n      format: 'r8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: params.sampleCount,\n    });\n\n    let resolveTexture = undefined;\n    let resolveTarget = undefined;\n    if (params.sampleCount > 1) {\n      resolveTexture = t.device.createTexture({\n        size: [width, height, 1],\n        format: 'r8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      });\n      resolveTarget = resolveTexture.createView();\n    }\n\n    const commandEncoder = t.device.createCommandEncoder();\n    commandEncoder.pushDebugGroup('checkContentsWithDepthStencil');\n\n    const pass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTexture.createView(),\n          resolveTarget,\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment: {\n        view: texture.createView(viewDescriptor),\n        depthStoreOp: formatInfo.depth ? 'store' : undefined,\n        depthLoadOp: formatInfo.depth ? 'load' : undefined,\n        stencilStoreOp: formatInfo.stencil ? 'store' : undefined,\n        stencilLoadOp: formatInfo.stencil ? 'load' : undefined,\n      },\n    });\n\n    switch (type) {\n      case 'depth': {\n        const expectedDepth = t.stateToTexelComponents[state].Depth;\n        assert(expectedDepth !== undefined);\n\n        pass.setPipeline(\n          getDepthTestEqualPipeline(t, params.format, params.sampleCount, expectedDepth)\n        );\n        break;\n      }\n\n      case 'stencil': {\n        const expectedStencil = t.stateToTexelComponents[state].Stencil;\n        assert(expectedStencil !== undefined);\n\n        pass.setPipeline(getStencilTestEqualPipeline(t, params.format, params.sampleCount));\n        pass.setStencilReference(expectedStencil);\n        break;\n      }\n    }\n\n    pass.draw(3);\n    pass.end();\n\n    commandEncoder.popDebugGroup();\n    t.queue.submit([commandEncoder.finish()]);\n\n    t.expectSingleColor(resolveTexture || renderTexture, 'r8unorm', {\n      size: [width, height, 1],\n      exp: { R: 1 },\n    });\n  }\n};\n\nexport const checkContentsByDepthTest = (...args: Parameters<CheckContents>) =>\n  checkContents('depth', ...args);\n\nexport const checkContentsByStencilTest = (...args: Parameters<CheckContents>) =>\n  checkContents('stencil', ...args);\n"],"file":"by_ds_test.js"}