{"version":3,"file":"depth_bias.spec.js","names":["description","makeTestGroup","unreachable","GPUTest","kValue","TexelView","textureContentIsOKByT2B","QuadAngle","kPointTwoFiveBiasForPointTwoFiveZOnFloat","DepthBiasTest","runDepthBiasTest","depthFormat","quadAngle","bias","biasSlopeScale","biasClamp","expectedDepth","renderTargetFormat","vertexShaderCode","Flat","TiltedX","renderTarget","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","depthCompare","testState","depthWriteEnabled","depthBias","depthBiasSlopeScale","depthBiasClamp","testPipeline","createRenderPipelineForTest","setPipeline","draw","end","queue","submit","finish","expColor","Depth","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForFloatFormat","eventualExpectOK","trackForCleanup","vertex","depthStencil","createRenderPipeline","layout","module","createShaderModule","code","entryPoint","fragment","targets","g","test","desc","params","u","combineWithParams","f32","infinity","positive","negative","fn","t"],"sources":["../../../../../src/webgpu/api/operation/rendering/depth_bias.spec.ts"],"sourcesContent":["export const description = `\nTests render results with different depth bias values like 'positive', 'negative', 'infinity',\n'slope', 'clamp', etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { DepthStencilFormat, EncodableTextureFormat } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kValue } from '../../../util/constants.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nenum QuadAngle {\n  Flat,\n  TiltedX,\n}\n\n// Floating point depth buffers use the following formula to calculate bias\n// bias = depthBias * 2 ** (exponent(max z of primitive) - number of bits in mantissa) +\n//        slopeScale * maxSlope\n// https://docs.microsoft.com/en-us/windows/win32/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias\n// https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/vkCmdSetDepthBias.html\n// https://developer.apple.com/documentation/metal/mtlrendercommandencoder/1516269-setdepthbias\n//\n// To get a final bias of 0.25 for primitives with z = 0.25, we can use\n// depthBias = 0.25 / (2 ** (-2 - 23)) = 8388608.\nconst kPointTwoFiveBiasForPointTwoFiveZOnFloat = 8388608;\n\nclass DepthBiasTest extends GPUTest {\n  runDepthBiasTest(\n    depthFormat: EncodableTextureFormat & DepthStencilFormat,\n    {\n      quadAngle,\n      bias,\n      biasSlopeScale,\n      biasClamp,\n      expectedDepth,\n    }: {\n      quadAngle: QuadAngle;\n      bias: number;\n      biasSlopeScale: number;\n      biasClamp: number;\n      expectedDepth: number;\n    }\n  ) {\n    const renderTargetFormat = 'rgba8unorm';\n    let vertexShaderCode: string;\n    switch (quadAngle) {\n      case QuadAngle.Flat:\n        // Draw a square at z = 0.25.\n        vertexShaderCode = `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n            vec2<f32>(-1.0, -1.0),\n            vec2<f32>( 1.0, -1.0),\n            vec2<f32>(-1.0,  1.0),\n            vec2<f32>(-1.0,  1.0),\n            vec2<f32>( 1.0, -1.0),\n            vec2<f32>( 1.0,  1.0));\n            return vec4<f32>(pos[VertexIndex], 0.25, 1.0);\n          }\n          `;\n        break;\n      case QuadAngle.TiltedX:\n        // Draw a square ranging from 0 to 0.5, bottom to top.\n        vertexShaderCode = `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec3<f32>, 6>(\n            vec3<f32>(-1.0, -1.0, 0.0),\n            vec3<f32>( 1.0, -1.0, 0.0),\n            vec3<f32>(-1.0,  1.0, 0.5),\n            vec3<f32>(-1.0,  1.0, 0.5),\n            vec3<f32>( 1.0, -1.0, 0.0),\n            vec3<f32>( 1.0,  1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }\n          `;\n        break;\n      default:\n        unreachable();\n    }\n\n    const renderTarget = this.device.createTexture({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthTexture = this.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    let depthCompare: GPUCompareFunction = 'always';\n    if (depthFormat !== 'depth32float') {\n      depthCompare = 'greater';\n    }\n\n    const testState = {\n      format: depthFormat,\n      depthCompare,\n      depthWriteEnabled: true,\n      depthBias: bias,\n      depthBiasSlopeScale: biasSlopeScale,\n      depthBiasClamp: biasClamp,\n    } as const;\n\n    // Draw a square with the given depth state and bias values.\n    const testPipeline = this.createRenderPipelineForTest(vertexShaderCode, testState);\n    pass.setPipeline(testPipeline);\n    pass.draw(6);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = { Depth: expectedDepth };\n    const expTexelView = TexelView.fromTexelsAsColors(depthFormat, coords => expColor);\n\n    const result = textureContentIsOKByT2B(\n      this,\n      { texture: depthTexture },\n      [1, 1],\n      { expTexelView },\n      { maxDiffULPsForFloatFormat: 1 }\n    );\n    this.eventualExpectOK(result);\n    this.trackForCleanup(renderTarget);\n  }\n\n  createRenderPipelineForTest(\n    vertex: string,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: vertex,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    });\n  }\n}\n\nexport const g = makeTestGroup(DepthBiasTest);\n\ng.test('depth_bias')\n  .desc(\n    `\n  Tests that a square with different depth bias values like 'positive', 'negative', 'infinity',\n  'slope', 'clamp', etc. is drawn as expected.\n\n  TODO: Need to test 'depth24plus-stencil8' format?\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0,\n          expectedDepth: 0.5,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0.125,\n          expectedDepth: 0.375,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: -kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: 0.125,\n          expectedDepth: 0,\n        },\n        {\n          quadAngle: QuadAngle.Flat,\n          bias: -kPointTwoFiveBiasForPointTwoFiveZOnFloat,\n          biasSlopeScale: 0,\n          biasClamp: -0.125,\n          expectedDepth: 0.125,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: 0,\n          biasClamp: 0,\n          expectedDepth: 0.25,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: 1,\n          biasClamp: 0,\n          expectedDepth: 0.75,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: -0.5,\n          biasClamp: 0,\n          expectedDepth: 0,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: kValue.f32.infinity.positive,\n          biasClamp: 0,\n          expectedDepth: 1,\n        },\n        {\n          quadAngle: QuadAngle.TiltedX,\n          bias: 0,\n          biasSlopeScale: kValue.f32.infinity.negative,\n          biasClamp: 0,\n          expectedDepth: 0,\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    t.runDepthBiasTest('depth32float', t.params);\n  });\n"],"mappings":"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"}