{"version":3,"file":"stencil.spec.js","names":["description","makeTestGroup","GPUTest","TexelView","textureContentIsOKByT2B","kBaseColor","Float32Array","kRedStencilColor","kGreenStencilColor","StencilTest","checkStencilOperation","testStencilState","initialStencil","referenceStencil","expectedStencil","depthStencilFormat","baseStencilState","compare","failOp","passOp","stencilState","baseState","format","depthWriteEnabled","depthCompare","stencilFront","stencilBack","testState","testState2","testStates","state","color","stencil","runStencilStateTest","checkStencilCompareFunction","compareFunction","stencilRefValue","expectedColor","isSingleEncoderMultiplePass","renderTargetFormat","renderTarget","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","COPY_DST","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","end","test","testPipeline","createRenderPipelineForTest","setPipeline","undefined","setStencilReference","setBindGroup","createBindGroupForTest","getBindGroupLayout","draw","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForNormFormat","eventualExpectOK","trackForCleanup","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","desc","params","u","combineWithParams","stencilCompare","_expectedColor","fn","t","kReferenceStencil","maskType","depthSpencilFormat","stencilReadMask","stencilWriteMask"],"sources":["../../../../../src/webgpu/api/operation/rendering/stencil.spec.ts"],"sourcesContent":["export const description = `\nTest related to stencil states, stencil op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kRedStencilColor = new Float32Array([1.0, 0.0, 0.0, 1.0]);\nconst kGreenStencilColor = new Float32Array([0.0, 1.0, 0.0, 1.0]);\n\ntype TestStates = {\n  state: GPUDepthStencilState;\n  color: Float32Array;\n  stencil: number | undefined;\n};\n\nclass StencilTest extends GPUTest {\n  checkStencilOperation(\n    testStencilState: GPUStencilFaceState,\n    initialStencil: number,\n    referenceStencil: number,\n    expectedStencil: number\n  ) {\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const stencilState = {\n      compare: 'equal',\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n    } as const;\n\n    const testState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: testStencilState,\n      stencilBack: testStencilState,\n    } as const;\n\n    const testState2 = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n    } as const;\n\n    const testStates = [\n      // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n      { state: baseState, color: kBaseColor, stencil: initialStencil },\n      { state: testState, color: kRedStencilColor, stencil: referenceStencil },\n      { state: testState2, color: kGreenStencilColor, stencil: expectedStencil },\n    ];\n    this.runStencilStateTest(testStates, kGreenStencilColor);\n  }\n\n  checkStencilCompareFunction(\n    compareFunction: GPUCompareFunction,\n    stencilRefValue: number,\n    expectedColor: Float32Array\n  ) {\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const stencilState = {\n      compare: compareFunction,\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n    } as const;\n\n    const testState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n    } as const;\n\n    const testStates = [\n      // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n      { state: baseState, color: kBaseColor, stencil: 1 },\n      { state: testState, color: kGreenStencilColor, stencil: stencilRefValue },\n    ];\n    this.runStencilStateTest(testStates, expectedColor);\n  }\n\n  runStencilStateTest(\n    testStates: TestStates[],\n    expectedColor: Float32Array,\n    isSingleEncoderMultiplePass: boolean = false\n  ) {\n    const renderTargetFormat = 'rgba8unorm';\n    const renderTarget = this.device.createTexture({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const depthTexture = this.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    let pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    if (isSingleEncoderMultiplePass) {\n      pass.end();\n    }\n\n    // Draw a triangle with the given stencil reference and the comparison function.\n    // The color will be kGreenStencilColor if the stencil test passes, and kBaseColor if not.\n    for (const test of testStates) {\n      if (isSingleEncoderMultiplePass) {\n        pass = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              storeOp: 'store',\n              loadOp: 'load',\n            },\n          ],\n          depthStencilAttachment,\n        });\n      }\n      const testPipeline = this.createRenderPipelineForTest(test.state);\n      pass.setPipeline(testPipeline);\n      if (test.stencil !== undefined) {\n        pass.setStencilReference(test.stencil);\n      }\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), test.color)\n      );\n      pass.draw(1);\n\n      if (isSingleEncoderMultiplePass) {\n        pass.end();\n      }\n    }\n\n    if (!isSingleEncoderMultiplePass) {\n      pass.end();\n    }\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, coords => expColor);\n\n    const result = textureContentIsOKByT2B(\n      this,\n      { texture: renderTarget },\n      [1, 1],\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 1 }\n    );\n    this.eventualExpectOK(result);\n    this.trackForCleanup(renderTarget);\n  }\n\n  createRenderPipelineForTest(depthStencil: GPUDepthStencilState): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil,\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(StencilTest);\n\ng.test('stencil_compare_func')\n  .desc(\n    `\n  Tests that stencil comparison functions with the stencil reference value works as expected.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { stencilCompare: 'always', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'less', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n      ] as const)\n  )\n  .fn(async t => {\n    const { stencilCompare, stencilRefValue, _expectedColor } = t.params;\n\n    t.checkStencilCompareFunction(stencilCompare, stencilRefValue, _expectedColor);\n  });\n\ng.test('stencil_passOp_operation')\n  .desc(\n    `\n  Test that the stencil operation is executed on stencil pass. A triangle is drawn with the 'always'\n  comparison function, so it should pass. Then, test that each pass stencil operation works with the\n  given stencil values correctly as expected. For example,\n    - If the pass operation is 'keep', it keeps the initial stencil value.\n    - If the pass operation is 'replace', it replaces the initial stencil value with the reference\n      stencil value.\n\n    TODO: Need to test depthFailOp as well.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { passOp: 'keep', initialStencil: 1, referenceStencil: 3, expectedStencil: 1 },\n        { passOp: 'zero', initialStencil: 1, referenceStencil: 3, expectedStencil: 0 },\n        { passOp: 'replace', initialStencil: 1, referenceStencil: 3, expectedStencil: 3 },\n        {\n          passOp: 'invert',\n          initialStencil: 0xf0,\n          referenceStencil: 3,\n          expectedStencil: 0x0f,\n        },\n        {\n          passOp: 'increment-clamp',\n          initialStencil: 1,\n          referenceStencil: 3,\n          expectedStencil: 2,\n        },\n        {\n          passOp: 'increment-clamp',\n          initialStencil: 0xff,\n          referenceStencil: 3,\n          expectedStencil: 0xff,\n        },\n        {\n          passOp: 'increment-wrap',\n          initialStencil: 1,\n          referenceStencil: 3,\n          expectedStencil: 2,\n        },\n        {\n          passOp: 'increment-wrap',\n          initialStencil: 0xff,\n          referenceStencil: 3,\n          expectedStencil: 0,\n        },\n        {\n          passOp: 'decrement-clamp',\n          initialStencil: 1,\n          referenceStencil: 3,\n          expectedStencil: 0,\n        },\n        {\n          passOp: 'decrement-clamp',\n          initialStencil: 0,\n          referenceStencil: 3,\n          expectedStencil: 0,\n        },\n        {\n          passOp: 'decrement-wrap',\n          initialStencil: 1,\n          referenceStencil: 3,\n          expectedStencil: 0,\n        },\n        {\n          passOp: 'decrement-wrap',\n          initialStencil: 0,\n          referenceStencil: 3,\n          expectedStencil: 0xff,\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    const { passOp, initialStencil, referenceStencil, expectedStencil } = t.params;\n\n    const stencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp,\n    } as const;\n\n    t.checkStencilOperation(stencilState, initialStencil, referenceStencil, expectedStencil);\n  });\n\ng.test('stencil_failOp_operation')\n  .desc(\n    `\n  Test that the stencil operation is executed on stencil fail. A triangle is drawn with the 'never'\n  comparison function, so it should fail. Then, test that each fail stencil operation works with the\n  given stencil values correctly as expected. For example,\n    - If the fail operation is 'keep', it keeps the initial stencil value.\n    - If the fail operation is 'replace', it replaces the initial stencil value with the reference\n      stencil value.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { failOp: 'keep', initialStencil: 1, expectedStencil: 1 },\n        { failOp: 'zero', initialStencil: 1, expectedStencil: 0 },\n        { failOp: 'replace', initialStencil: 1, expectedStencil: 3 },\n        { failOp: 'invert', initialStencil: 0xf0, expectedStencil: 0x0f },\n        { failOp: 'increment-clamp', initialStencil: 1, expectedStencil: 2 },\n        { failOp: 'increment-clamp', initialStencil: 0xff, expectedStencil: 0xff },\n        { failOp: 'increment-wrap', initialStencil: 1, expectedStencil: 2 },\n        { failOp: 'increment-wrap', initialStencil: 0xff, expectedStencil: 0 },\n        { failOp: 'decrement-clamp', initialStencil: 1, expectedStencil: 0 },\n        { failOp: 'decrement-clamp', initialStencil: 0, expectedStencil: 0 },\n        { failOp: 'decrement-wrap', initialStencil: 2, expectedStencil: 1 },\n        { failOp: 'decrement-wrap', initialStencil: 1, expectedStencil: 0 },\n        { failOp: 'decrement-wrap', initialStencil: 0, expectedStencil: 0xff },\n      ] as const)\n  )\n  .fn(async t => {\n    const { failOp, initialStencil, expectedStencil } = t.params;\n\n    const kReferenceStencil = 3;\n\n    const stencilState = {\n      compare: 'never',\n      failOp,\n      passOp: 'keep',\n    } as const;\n\n    // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n    // Always fails because the comparison never passes. Therefore red is never drawn, and the\n    // stencil contents may be updated according to `operation`.\n    t.checkStencilOperation(stencilState, initialStencil, kReferenceStencil, expectedStencil);\n  });\n\ng.test('stencil_read_write_mask')\n  .desc(\n    `\n  Tests that setting a stencil read/write masks work. Basically, The base triangle sets 3 to the\n  stencil, and then try to draw a triangle with different stencil values.\n    - In case that 'write' mask is 1,\n      * If the stencil of the triangle is 1, it draws because\n        'base stencil(3) & write mask(1) == triangle stencil(1)'.\n      * If the stencil of the triangle is 2, it does not draw because\n        'base stencil(3) & write mask(1) != triangle stencil(2)'.\n\n    - In case that 'read' mask is 2,\n      * If the stencil of the triangle is 1, it does not draw because\n        'base stencil(3) & read mask(2) != triangle stencil(1)'.\n      * If the stencil of the triangle is 2, it draws because\n        'base stencil(3) & read mask(2) == triangle stencil(2)'.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { maskType: 'write', stencilRefValue: 1, _expectedColor: kRedStencilColor },\n        { maskType: 'write', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { maskType: 'read', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { maskType: 'read', stencilRefValue: 2, _expectedColor: kRedStencilColor },\n      ])\n  )\n  .fn(async t => {\n    const { maskType, stencilRefValue, _expectedColor } = t.params;\n\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const stencilState = {\n      compare: 'equal',\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: maskType === 'write' ? 0x1 : 0xff,\n    } as const;\n\n    const testState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: maskType === 'read' ? 0x2 : 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      // Draw the base triangle with stencil reference 3. This clears the stencil buffer to 3.\n      { state: baseState, color: kBaseColor, stencil: 3 },\n      { state: testState, color: kRedStencilColor, stencil: stencilRefValue },\n    ];\n\n    t.runStencilStateTest(testStates, _expectedColor);\n  });\n\ng.test('stencil_reference_initialized')\n  .desc('Test that stencil reference is initialized as zero for new render pass.')\n  .fn(async t => {\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      passOp: 'replace',\n    } as const;\n\n    const testStencilState = {\n      compare: 'equal',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthSpencilFormat,\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n    } as const;\n\n    const testState = {\n      format: depthSpencilFormat,\n      stencilFront: testStencilState,\n      stencilBack: testStencilState,\n    } as const;\n\n    // First pass sets the stencil to 0x1, the second pass sets the stencil to its default\n    // value, and the third pass tests if the stencil is zero.\n    const testStates = [\n      { state: baseState, color: kBaseColor, stencil: 0x1 },\n      { state: baseState, color: kRedStencilColor, stencil: undefined },\n      { state: testState, color: kGreenStencilColor, stencil: 0x0 },\n    ];\n\n    // The third draw should pass the stencil test since the second pass set it to default zero.\n    t.runStencilStateTest(testStates, kGreenStencilColor, true);\n  });\n"],"mappings":"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"}