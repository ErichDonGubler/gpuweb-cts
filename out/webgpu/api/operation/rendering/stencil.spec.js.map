{"version":3,"file":"stencil.spec.js","names":["description","makeTestGroup","GPUTest","TexelView","textureContentIsOKByT2B","kBaseColor","Float32Array","kRedStencilColor","kGreenStencilColor","StencilTest","checkStencilCompareFunction","compareFunction","stencilRefValue","expectedColor","depthStencilFormat","baseStencilState","compare","failOp","passOp","stencilState","baseState","format","depthWriteEnabled","depthCompare","stencilFront","stencilBack","state","testParams","color","runStencilStateTest","testStates","renderTargetFormat","renderTarget","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","COPY_DST","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","testPipeline","createRenderPipelineForTest","setPipeline","setStencilReference","setBindGroup","createBindGroupForTest","getBindGroupLayout","draw","test","end","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForNormFormat","eventualExpectOK","trackForCleanup","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","desc","params","u","combineWithParams","stencilCompare","_expectedColor","fn","t","operation","depthSpencilFormat","failedStencilState","stencilReadMask","stencilWriteMask","failState","passState"],"sources":["../../../../../src/webgpu/api/operation/rendering/stencil.spec.ts"],"sourcesContent":["export const description = `\nTest related to stencil states, stencil op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kRedStencilColor = new Float32Array([1.0, 0.0, 0.0, 1.0]);\nconst kGreenStencilColor = new Float32Array([0.0, 1.0, 0.0, 1.0]);\n\ntype TestStates = {\n  state: GPUDepthStencilState;\n  color: Float32Array;\n};\n\nclass StencilTest extends GPUTest {\n  checkStencilCompareFunction(\n    compareFunction: GPUCompareFunction,\n    stencilRefValue: number,\n    expectedColor: Float32Array\n  ) {\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const stencilState = {\n      compare: compareFunction,\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n    } as const;\n\n    const state = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n    } as const;\n\n    const testParams = [{ state, color: kGreenStencilColor }];\n    this.runStencilStateTest(baseState, testParams, stencilRefValue, expectedColor);\n  }\n\n  runStencilStateTest(\n    baseState: GPUDepthStencilState,\n    testStates: TestStates[],\n    stencilRefValue: number,\n    expectedColor: Float32Array\n  ) {\n    const renderTargetFormat = 'rgba8unorm';\n    const renderTarget = this.device.createTexture({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const depthTexture = this.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw the base triangle with stencil reference 1.\n    // This clears the stencil buffer to 1.\n    {\n      const testPipeline = this.createRenderPipelineForTest(baseState);\n      pass.setPipeline(testPipeline);\n      pass.setStencilReference(1);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kBaseColor)\n      );\n      pass.draw(1);\n    }\n\n    // Draw a triangle with the given stencil reference and the comparison function.\n    // The color will be kGreenStencilColor if the stencil test passes, and kBaseColor if not.\n    for (const test of testStates) {\n      const testPipeline = this.createRenderPipelineForTest(test.state);\n      pass.setPipeline(testPipeline);\n      pass.setStencilReference(stencilRefValue);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), test.color)\n      );\n      pass.draw(1);\n    }\n\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, coords => expColor);\n\n    const result = textureContentIsOKByT2B(\n      this,\n      { texture: renderTarget },\n      [1, 1],\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 1 }\n    );\n    this.eventualExpectOK(result);\n    this.trackForCleanup(renderTarget);\n  }\n\n  createRenderPipelineForTest(depthStencil: GPUDepthStencilState): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil,\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(StencilTest);\n\ng.test('stencil_compare_func')\n  .desc(\n    `\n  Tests that stencil comparison functions with the stencil reference value works as expected.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { stencilCompare: 'always', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'less', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n      ] as const)\n  )\n  .fn(async t => {\n    const { stencilCompare, stencilRefValue, _expectedColor } = t.params;\n    t.checkStencilCompareFunction(stencilCompare, stencilRefValue, _expectedColor);\n  });\n\ng.test('stencil_fail_operation')\n  .desc(\n    `\n  Test that the stencil operation is executed on stencil fail. Triangle with stencil reference 2\n  fails the 'less' comparison function because the base stencil reference is 1.\n    - If the fail operation is 'keep', it keeps the base color.\n    - If the fail operation is 'replace', it replaces the base color with the last stencil color.\n\n  TODO: Need to test the other stencil operations?\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { operation: 'keep', _expectedColor: kBaseColor },\n        { operation: 'replace', _expectedColor: kGreenStencilColor },\n      ] as const)\n  )\n  .fn(async t => {\n    const { operation, _expectedColor } = t.params;\n\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const failedStencilState = {\n      compare: 'less',\n      failOp: operation,\n      passOp: 'keep',\n    } as const;\n\n    const stencilState = {\n      compare: 'equal',\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const failState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: failedStencilState,\n      stencilBack: failedStencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const passState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      // Always fails because the ref (2) is less than the initial stencil contents (1).\n      // Therefore red is never drawn, and the stencil contents may be updated according to\n      // `operation`.\n      { state: failState, color: kRedStencilColor },\n      // Passes iff the ref (2) equals the current stencil contents (1 or 2).\n      { state: passState, color: kGreenStencilColor },\n    ];\n    t.runStencilStateTest(baseState, testStates, 2, _expectedColor);\n  });\n"],"mappings":"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"}