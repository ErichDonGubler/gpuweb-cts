{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/stencil.spec.ts"],"names":["description","makeTestGroup","GPUTest","TexelView","textureContentIsOKByT2B","kBaseColor","Float32Array","kStencilColor","StencilTest","checkStencilCompareFunction","compareFunction","stencilRefValue","expectedColor","depthStencilFormat","baseStencilState","compare","failOp","passOp","stencilState","baseState","format","depthWriteEnabled","depthCompare","stencilFront","stencilBack","state","runStencilStateTest","renderTargetFormat","renderTarget","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","COPY_DST","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","testPipeline","createRenderPipelineForTest","setPipeline","setStencilReference","setBindGroup","createBindGroupForTest","getBindGroupLayout","draw","end","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForNormFormat","eventualExpectOK","trackForCleanup","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","test","desc","params","u","combineWithParams","stencilCompare","_expectedColor","fn","t"],"mappings":"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","sourcesContent":["export const description = `\nTest related to stencil states, stencil op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kStencilColor = new Float32Array([0.0, 0.0, 0.0, 1.0]);\n\nclass StencilTest extends GPUTest {\n  checkStencilCompareFunction(\n    compareFunction: GPUCompareFunction,\n    stencilRefValue: number,\n    expectedColor: Float32Array\n  ) {\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace',\n    } as const;\n\n    const stencilState = {\n      compare: compareFunction,\n      failOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState,\n    } as const;\n\n    const state = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n    } as const;\n\n    this.runStencilStateTest(baseState, state, stencilRefValue, expectedColor);\n  }\n\n  runStencilStateTest(\n    baseState: GPUDepthStencilState,\n    state: GPUDepthStencilState,\n    stencilRefValue: number,\n    expectedColor: Float32Array\n  ) {\n    const renderTargetFormat = 'rgba8unorm';\n    const renderTarget = this.device.createTexture({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const depthTexture = this.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw the base triangle with stencil reference 1.\n    // This clears the stencil buffer to 1.\n    {\n      const testPipeline = this.createRenderPipelineForTest(baseState);\n      pass.setPipeline(testPipeline);\n      pass.setStencilReference(1);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kBaseColor)\n      );\n      pass.draw(1);\n    }\n\n    // Draw a triangle with the given stencil reference and the comparison function.\n    // The color will be kStencilColor if the stencil test passes, and kBaseColor if not.\n    {\n      const testPipeline = this.createRenderPipelineForTest(state);\n      pass.setPipeline(testPipeline);\n      pass.setStencilReference(stencilRefValue);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kStencilColor)\n      );\n      pass.draw(1);\n    }\n\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, coords => expColor);\n\n    const result = textureContentIsOKByT2B(\n      this,\n      { texture: renderTarget },\n      [1, 1],\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 1 }\n    );\n    this.eventualExpectOK(result);\n    this.trackForCleanup(renderTarget);\n  }\n\n  createRenderPipelineForTest(depthStencil: GPUDepthStencilState): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil,\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(StencilTest);\n\ng.test('stencil_compare_func')\n  .desc(\n    `\n  Tests that stencil comparison functions with the stencil reference value works as expected.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { stencilCompare: 'always', stencilRefValue: 0, _expectedColor: kStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 1, _expectedColor: kStencilColor },\n        { stencilCompare: 'always', stencilRefValue: 2, _expectedColor: kStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'equal', stencilRefValue: 1, _expectedColor: kStencilColor },\n        { stencilCompare: 'equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater', stencilRefValue: 2, _expectedColor: kStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 1, _expectedColor: kStencilColor },\n        { stencilCompare: 'greater-equal', stencilRefValue: 2, _expectedColor: kStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 0, _expectedColor: kStencilColor },\n        { stencilCompare: 'less', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'less', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 0, _expectedColor: kStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 1, _expectedColor: kStencilColor },\n        { stencilCompare: 'less-equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 0, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'never', stencilRefValue: 2, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 0, _expectedColor: kStencilColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 1, _expectedColor: kBaseColor },\n        { stencilCompare: 'not-equal', stencilRefValue: 2, _expectedColor: kStencilColor },\n      ] as const)\n  )\n  .fn(async t => {\n    const { stencilCompare, stencilRefValue, _expectedColor } = t.params;\n    t.checkStencilCompareFunction(stencilCompare, stencilRefValue, _expectedColor);\n  });\n"],"file":"stencil.spec.js"}