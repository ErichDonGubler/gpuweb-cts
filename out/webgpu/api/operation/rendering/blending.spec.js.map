{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/blending.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","kBlendFactors","kBlendOperations","kEncodableTextureFormats","kTextureFormatInfo","GPUTest","float32ToFloat16Bits","TexelView","textureContentIsOKByT2B","BlendingTest","createRenderPipelineForTest","colorTargetState","blendComponent","device","createRenderPipeline","layout","fragment","targets","format","blend","color","alpha","module","createShaderModule","code","entryPoint","vertex","createBindGroupForTest","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","mapColor","col","f","r","b","a","computeBlendFactor","src","dst","blendColor","factor","v","Math","min","undefined","computeBlendOperation","srcFactor","dstFactor","operation","_","k","max","test","desc","params","u","combine","filter","t","beginSubcases","expand","p","needsBlendConstant","fn","textureFormat","srcColor","dstColor","blendConstant","expectedColor","component","pipeline","primitive","topology","renderTarget","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","size","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setBlendConstant","setBindGroup","getBindGroupLayout","Float32Array","draw","end","queue","submit","finish","tolerance","expectedLow","expectedHigh","expectSinglePixelBetweenTwoValuesFloat16In2DTexture","x","y","exp","Uint16Array","map","kBlendableFormats","info","renderable","sampleType","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","expectOK","kSize","kWhiteColorData","kBlackColorData","basePipeline","testPipeline","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nTest blending results.\n\nTODO:\n- Test result for all combinations of args (make sure each case is distinguishable from others\n- Test underflow/overflow has consistent behavior\n- ?\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, TypedArrayBufferView, unreachable } from '../../../../common/util/util.js';\nimport {\n  kBlendFactors,\n  kBlendOperations,\n  kEncodableTextureFormats,\n  kTextureFormatInfo,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { float32ToFloat16Bits } from '../../../util/conversion.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nclass BlendingTest extends GPUTest {\n  createRenderPipelineForTest(\n    colorTargetState: GPUColorTargetState,\n    blendComponent: GPUBlendComponent | undefined\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format: colorTargetState.format,\n            blend: {\n              color: blendComponent ?? {},\n              alpha: blendComponent ?? {},\n            },\n          },\n        ],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return params.color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32\n              ) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0, -1.0),\n                  vec2<f32>(3.0, -1.0),\n                  vec2<f32>(-1.0, 3.0));\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(BlendingTest);\n\nfunction mapColor(\n  col: GPUColorDict,\n  f: (v: number, k: keyof GPUColorDict) => number\n): GPUColorDict {\n  return {\n    r: f(col.r, 'r'),\n    g: f(col.g, 'g'),\n    b: f(col.b, 'b'),\n    a: f(col.a, 'a'),\n  };\n}\n\nfunction computeBlendFactor(\n  src: GPUColorDict,\n  dst: GPUColorDict,\n  blendColor: GPUColorDict | undefined,\n  factor: GPUBlendFactor\n): GPUColorDict {\n  switch (factor) {\n    case 'zero':\n      return { r: 0, g: 0, b: 0, a: 0 };\n    case 'one':\n      return { r: 1, g: 1, b: 1, a: 1 };\n    case 'src':\n      return { ...src };\n    case 'one-minus-src':\n      return mapColor(src, v => 1 - v);\n    case 'src-alpha':\n      return mapColor(src, () => src.a);\n    case 'one-minus-src-alpha':\n      return mapColor(src, () => 1 - src.a);\n    case 'dst':\n      return { ...dst };\n    case 'one-minus-dst':\n      return mapColor(dst, v => 1 - v);\n    case 'dst-alpha':\n      return mapColor(dst, () => dst.a);\n    case 'one-minus-dst-alpha':\n      return mapColor(dst, () => 1 - dst.a);\n    case 'src-alpha-saturated': {\n      const f = Math.min(src.a, 1 - dst.a);\n      return { r: f, g: f, b: f, a: 1 };\n    }\n    case 'constant':\n      assert(blendColor !== undefined);\n      return { ...blendColor };\n    case 'one-minus-constant':\n      assert(blendColor !== undefined);\n      return mapColor(blendColor, v => 1 - v);\n    default:\n      unreachable();\n  }\n}\n\nfunction computeBlendOperation(\n  src: GPUColorDict,\n  srcFactor: GPUColorDict,\n  dst: GPUColorDict,\n  dstFactor: GPUColorDict,\n  operation: GPUBlendOperation\n) {\n  switch (operation) {\n    case 'add':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] + dstFactor[k] * dst[k]);\n    case 'max':\n      return mapColor(src, (_, k) => Math.max(src[k], dst[k]));\n    case 'min':\n      return mapColor(src, (_, k) => Math.min(src[k], dst[k]));\n    case 'reverse-subtract':\n      return mapColor(src, (_, k) => dstFactor[k] * dst[k] - srcFactor[k] * src[k]);\n    case 'subtract':\n      return mapColor(src, (_, k) => srcFactor[k] * src[k] - dstFactor[k] * dst[k]);\n  }\n}\n\ng.test('GPUBlendComponent')\n  .desc(\n    `Test all combinations of parameters for GPUBlendComponent.\n\n  Tests that parameters are correctly passed to the backend API and blend computations\n  are done correctly by blending a single pixel. The test uses rgba16float as the format\n  to avoid checking clamping behavior (tested in api,operation,rendering,blending:clamp,*).\n\n  Params:\n    - component= {color, alpha} - whether to test blending the color or the alpha component.\n    - srcFactor= {...all GPUBlendFactors}\n    - dstFactor= {...all GPUBlendFactors}\n    - operation= {...all GPUBlendOperations}`\n  )\n  .params(u =>\n    u //\n      .combine('component', ['color', 'alpha'] as const)\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n      .filter(t => {\n        if (t.operation === 'min' || t.operation === 'max') {\n          return t.srcFactor === 'one' && t.dstFactor === 'one';\n        }\n        return true;\n      })\n      .beginSubcases()\n      .combine('srcColor', [{ r: 0.11, g: 0.61, b: 0.81, a: 0.44 }])\n      .combine('dstColor', [\n        { r: 0.51, g: 0.22, b: 0.71, a: 0.33 },\n        { r: 0.09, g: 0.73, b: 0.93, a: 0.81 },\n      ])\n      .expand('blendConstant', p => {\n        const needsBlendConstant =\n          p.srcFactor === 'one-minus-constant' ||\n          p.srcFactor === 'constant' ||\n          p.dstFactor === 'one-minus-constant' ||\n          p.dstFactor === 'constant';\n        return needsBlendConstant ? [{ r: 0.91, g: 0.82, b: 0.73, a: 0.64 }] : [undefined];\n      })\n  )\n  .fn(t => {\n    const textureFormat: GPUTextureFormat = 'rgba16float';\n    const srcColor = t.params.srcColor;\n    const dstColor = t.params.dstColor;\n    const blendConstant = t.params.blendConstant;\n\n    const srcFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.srcFactor);\n    const dstFactor = computeBlendFactor(srcColor, dstColor, blendConstant, t.params.dstFactor);\n\n    const expectedColor = computeBlendOperation(\n      srcColor,\n      srcFactor,\n      dstColor,\n      dstFactor,\n      t.params.operation\n    );\n\n    switch (t.params.component) {\n      case 'color':\n        expectedColor.a = srcColor.a;\n        break;\n      case 'alpha':\n        expectedColor.r = srcColor.r;\n        expectedColor.g = srcColor.g;\n        expectedColor.b = srcColor.b;\n        break;\n    }\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format: textureFormat,\n            blend: {\n              // Set both color/alpha to defaults...\n              color: {},\n              alpha: {},\n              // ... but then override the component we're testing.\n              [t.params.component]: {\n                srcFactor: t.params.srcFactor,\n                dstFactor: t.params.dstFactor,\n                operation: t.params.operation,\n              },\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\nstruct Uniform {\n  color: vec4<f32>\n};\n@group(0) @binding(0) var<uniform> u : Uniform;\n\n@fragment fn main() -> @location(0) vec4<f32> {\n  return u.color;\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format: textureFormat,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: dstColor,\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    if (blendConstant) {\n      renderPass.setBlendConstant(blendConstant);\n    }\n    renderPass.setBindGroup(\n      0,\n      t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: t.makeBufferWithContents(\n                new Float32Array([srcColor.r, srcColor.g, srcColor.b, srcColor.a]),\n                GPUBufferUsage.UNIFORM\n              ),\n            },\n          },\n        ],\n      })\n    );\n    renderPass.draw(1);\n    renderPass.end();\n\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const tolerance = 0.003;\n    const expectedLow = mapColor(expectedColor, v => v - tolerance);\n    const expectedHigh = mapColor(expectedColor, v => v + tolerance);\n\n    t.expectSinglePixelBetweenTwoValuesFloat16In2DTexture(\n      renderTarget,\n      textureFormat,\n      { x: 0, y: 0 },\n      {\n        exp: [\n          // Use Uint16Array to store Float16 value bits\n          new Uint16Array(\n            [expectedLow.r, expectedLow.g, expectedLow.b, expectedLow.a].map(float32ToFloat16Bits)\n          ),\n          new Uint16Array(\n            [expectedHigh.r, expectedHigh.g, expectedHigh.b, expectedHigh.a].map(\n              float32ToFloat16Bits\n            )\n          ),\n        ],\n      }\n    );\n  });\n\nconst kBlendableFormats = kEncodableTextureFormats.filter(f => {\n  const info = kTextureFormatInfo[f];\n  return info.renderable && info.sampleType === 'float';\n});\n\ng.test('formats')\n  .desc(\n    `Test blending results works for all formats that support it, and that blending is not applied\n  for formats that do not. Blending should be done in linear space for srgb formats.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kBlendableFormats)\n  )\n  .fn(async t => {\n    const { format } = t.params;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      fragment: {\n        targets: [\n          {\n            format,\n            blend: {\n              color: { srcFactor: 'one', dstFactor: 'one', operation: 'add' },\n              alpha: { srcFactor: 'one', dstFactor: 'one', operation: 'add' },\n            },\n          },\n        ],\n        module: t.device.createShaderModule({\n          code: `\n@fragment fn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(0.4, 0.4, 0.4, 0.4);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n    return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: {\n        topology: 'point-list',\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [1, 1, 1],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: 0.2, g: 0.2, b: 0.2, a: 0.2 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    renderPass.draw(1);\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    const expColor = { R: 0.6, G: 0.6, B: 0.6, A: 0.6 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, coords => expColor);\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture: renderTarget },\n      [1, 1, 1],\n      { expTexelView },\n      {\n        maxDiffULPsForNormFormat: 1,\n        maxDiffULPsForFloatFormat: 1,\n      }\n    );\n    t.expectOK(result);\n  });\n\ng.test('default_blend_constant,initial_blend_constant')\n  .desc(`Test that the blend constant is set to [0,0,0,0] at the beginning of a pass.`)\n  .fn(async t => {\n    const format = 'rgba8unorm';\n    const kSize = 1;\n    const kWhiteColorData = new Float32Array([255, 255, 255, 255]);\n    const kBlackColorData = new Float32Array([0, 0, 0, 0]);\n\n    const basePipeline = t.createRenderPipelineForTest({ format }, undefined);\n    const testPipeline = t.createRenderPipelineForTest(\n      { format },\n      {\n        srcFactor: 'constant',\n        dstFactor: 'one',\n        operation: 'add',\n      }\n    );\n\n    const renderTarget = t.device.createTexture({\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      size: [kSize, kSize],\n      format,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(basePipeline);\n    renderPass.setBindGroup(\n      0,\n      t.createBindGroupForTest(basePipeline.getBindGroupLayout(0), kBlackColorData)\n    );\n    renderPass.setPipeline(testPipeline);\n    renderPass.setBindGroup(\n      0,\n      t.createBindGroupForTest(testPipeline.getBindGroupLayout(0), kWhiteColorData)\n    );\n    renderPass.draw(3);\n    // Draw [1,1,1,1] with `src * constant + dst * 1`.\n    // The blend constant defaults to [0,0,0,0], so the result is\n    // `[1,1,1,1] * [0,0,0,0] + [0,0,0,0] * 1` = [0,0,0,0].\n    renderPass.end();\n    t.device.queue.submit([commandEncoder.finish()]);\n\n    // Check that the initial blend color is black(0,0,0,0) after setting testPipeline which has\n    // a white color buffer data.\n    const expColor = { R: 0, G: 0, B: 0, A: 0 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, coords => expColor);\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture: renderTarget },\n      [kSize, kSize],\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 1 }\n    );\n    t.expectOK(result);\n  });\n\ng.test('clamp,blend_factor')\n  .desc('For fixed-point formats, test that the blend factor is clamped in the blend equation.')\n  .unimplemented();\n\ng.test('clamp,blend_color')\n  .desc('For fixed-point formats, test that the blend color is clamped in the blend equation.')\n  .unimplemented();\n\ng.test('clamp,blend_result')\n  .desc('For fixed-point formats, test that the blend result is clamped in the blend equation.')\n  .unimplemented();\n"],"file":"blending.spec.js"}