{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","depthStencilFormatAspectSize","kBufferSizeAlignment","kDepthStencilFormats","kMinDynamicBufferOffsetAlignment","GPUTest","makeBufferWithContents","align","physicalMipSize","kBytesPerRowAlignment","dataBytesForCopyOrFail","F","GetInitialData","byteSize","initialData","Uint8Array","i","length","GetInitialDataPerMipLevel","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","depthOrArrayLayers","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","kMipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","mipLevelCount","srcTexture","device","createTexture","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","ArrayBuffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","bytesInRow","src","start","dst","expectGPUBufferValuesEqual","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","GetRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","GetBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","type","minBindingSize","hasDynamicOffset","GetBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","uniformBuffer","UNIFORM","createBindGroup","resource","InitializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","setBindGroup","setPipeline","draw","endPass","VerifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","loadValue","r","g","b","a","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","baseFormat","dstBaseFormat","undefined","beginSubcases","fn","t","textureSizeInBlocks","selectDeviceOrSkipTestCase","feature","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","copyBoxOffset","selectDeviceForTextureFormatOrSkipTestCase","stencil","depth","kColorFormat","kSampleCount","TEXTURE_BINDING","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","kDepthFormat","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget"],"mappings":"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","sourcesContent":["export const description = `copyTexturetoTexture operation tests\n\nTODO: remove fragment stage in InitializeDepthAspect() when browsers support null fragment stage.\nTODO: 1d/3d texture tests [1]\nTODO: 1d texture tests\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n  kCompressedTextureFormats,\n  depthStencilFormatAspectSize,\n  DepthStencilFormat,\n  kBufferSizeAlignment,\n  kDepthStencilFormats,\n  kMinDynamicBufferOffsetAlignment,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { makeBufferWithContents } from '../../../util/buffer.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\n\nclass F extends GPUTest {\n  GetInitialData(byteSize: number): Uint8Array {\n    const initialData = new Uint8Array(byteSize);\n    for (let i = 0; i < initialData.length; ++i) {\n      initialData[i] = (i ** 3 + i) % 251;\n    }\n    return initialData;\n  }\n\n  GetInitialDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    // [1]: Does not presently support 1d/3d textures.\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    srcFormat: SizedTextureFormat,\n    dstFormat: SizedTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    const kMipLevelCount = 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(srcTextureSize, srcFormat, srcCopyLevel);\n    const srcTextureSizeAtLevel = physicalMipSize(srcTextureSize, srcFormat, '2d', srcCopyLevel);\n    const bytesPerBlock = kTextureFormatInfo[srcFormat].bytesPerBlock;\n    const blockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const blockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(dstTextureSize, dstFormat, '2d', dstCopyLevel);\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: copyBoxOffsets.srcOffset.z,\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: copyBoxOffsets.dstOffset.z,\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth =\n      srcTextureSize.depthOrArrayLayers +\n      copyBoxOffsets.copyExtent.depthOrArrayLayers -\n      Math.max(appliedSrcOffset.z, appliedDstOffset.z);\n    assert(appliedCopyDepth >= 0);\n\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depthOrArrayLayers: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstBlockRowsPerImage,\n      },\n      dstTextureSizeAtLevel\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    // Verify the content of the whole subresouce of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectGPUBufferValuesEqual(dstBuffer, expectedUint8DataWithPadding);\n  }\n\n  InitializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.device.createBuffer({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  GetRenderPipelineForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    hasColorAttachment: boolean,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    const renderPipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32;\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @stage(vertex)\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(fragment)\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  GetBindGroupLayoutForT2TCopyWithDepthTests(): GPUBindGroupLayout {\n    return this.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {\n            type: 'uniform',\n            minBindingSize: 4,\n            hasDynamicOffset: true,\n          },\n        },\n      ],\n    });\n  }\n\n  GetBindGroupForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    totalCopyArrayLayers: number\n  ): GPUBindGroup {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[(kMinDynamicBufferOffsetAlignment / 4) * i] = i;\n    }\n    const uniformBuffer = makeBufferWithContents(\n      this.device,\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            size: 4,\n          },\n        },\n      ],\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  InitializeDepthAspect(\n    sourceTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const encoder = this.device.createCommandEncoder();\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadValue: 0.0,\n          depthStoreOp: 'store',\n          stencilLoadValue: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.endPass();\n    }\n    this.queue.submit([encoder.finish()]);\n  }\n\n  VerifyDepthAspect(\n    destinationTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: copySize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n    const encoder = this.device.createCommandEncoder();\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: outputColorTexture.createView({\n              baseArrayLayer: dstCopyLayer,\n              arrayLayerCount: 1,\n            }),\n            loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadValue: 'load',\n          depthStoreOp: 'store',\n          stencilLoadValue: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.endPass();\n    }\n    this.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n        },\n        {\n          srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n        },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const {\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n        { src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n        { src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const {\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const {\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const {\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const { copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcFormat = 'rgba8unorm';\n    const dstFormat = 'rgba8unorm';\n    const textureSize = { width: 64, height: 32, depthOrArrayLayers: 5 };\n\n    t.DoCopyTextureToTextureTest(\n      textureSize,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_depth_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparation function 'equal'\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .fn(async t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.device.createTexture({\n      format,\n      size: srcTextureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: srcCopyLevel + 1,\n    });\n    const destinationTexture = t.device.createTexture({\n      format,\n      size: [\n        copySize[0] << dstCopyLevel,\n        copySize[1] << dstCopyLevel,\n        srcTextureSize.depthOrArrayLayers,\n      ] as const,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: dstCopyLevel + 1,\n    });\n\n    let initialStencilData: undefined | Uint8Array = undefined;\n    if (kTextureFormatInfo[format].stencil) {\n      initialStencilData = t.GetInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n      t.InitializeStencilAspect(\n        sourceTexture,\n        initialStencilData,\n        srcCopyLevel,\n        srcCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.InitializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    if (kTextureFormatInfo[format].stencil) {\n      assert(initialStencilData !== undefined);\n      t.VerifyStencilAspect(\n        destinationTexture,\n        initialStencilData,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.VerifyDepthAspect(\n        destinationTexture,\n        format,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n  });\n\ng.test('copy_multisampled_color')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kColorFormat = 'rgba8unorm';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount: kSampleCount,\n    });\n\n    // Initialize sourceTexture with a draw call.\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(vertex)\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(fragment)\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const initEncoder = t.device.createCommandEncoder();\n    const renderPassForInit = initEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: sourceTexture.createView(),\n          loadValue: [1.0, 0.0, 0.0, 1.0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(3);\n    renderPassForInit.endPass();\n    t.queue.submit([initEncoder.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify if all the sub-pixel values at the same location of sourceTexture and\n    // destinationTexture are equal.\n    const renderPipelineForValidation = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          @stage(vertex)\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @stage(fragment)\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: renderPipelineForValidation.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: sourceTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: destinationTexture.createView(),\n        },\n      ],\n    });\n    const expectedOutputTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const validationEncoder = t.device.createCommandEncoder();\n    const renderPassForValidation = validationEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: expectedOutputTexture.createView(),\n          loadValue: [1.0, 0.0, 0.0, 1.0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForValidation.setPipeline(renderPipelineForValidation);\n    renderPassForValidation.setBindGroup(0, bindGroup);\n    renderPassForValidation.draw(6);\n    renderPassForValidation.endPass();\n    t.queue.submit([validationEncoder.finish()]);\n\n    t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_depth')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparation function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kDepthFormat = 'depth24plus';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n\n    const vertexState: GPUVertexState = {\n      module: t.device.createShaderModule({\n        code: `\n          @stage(vertex)\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`,\n      }),\n      entryPoint: 'main',\n    };\n\n    // Initialize the depth aspect of source texture with a draw call\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      vertex: vertexState,\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'always',\n        depthWriteEnabled: true,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n\n    const encoderForInit = t.device.createCommandEncoder();\n    const renderPassForInit = encoderForInit.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: sourceTexture.createView(),\n        depthLoadValue: 0.0,\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(6);\n    renderPassForInit.endPass();\n    t.queue.submit([encoderForInit.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify the depth values in destinationTexture are what we expected with\n    // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n    const kColorFormat = 'rgba8unorm';\n    const renderPipelineForVerify = t.device.createRenderPipeline({\n      vertex: vertexState,\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @stage(fragment)\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'equal',\n        depthWriteEnabled: false,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const multisampledColorTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const colorTextureAsResolveTarget = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoderForVerify = t.device.createCommandEncoder();\n    const renderPassForVerify = encoderForVerify.beginRenderPass({\n      colorAttachments: [\n        {\n          view: multisampledColorTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'discard',\n          resolveTarget: colorTextureAsResolveTarget.createView(),\n        },\n      ],\n      depthStencilAttachment: {\n        view: destinationTexture.createView(),\n        depthLoadValue: 'load',\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPassForVerify.setPipeline(renderPipelineForVerify);\n    renderPassForVerify.draw(6);\n    renderPassForVerify.endPass();\n    t.queue.submit([encoderForVerify.finish()]);\n\n    t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n"],"file":"copyTextureToTexture.spec.js"}