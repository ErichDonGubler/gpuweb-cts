{"version":3,"file":"read_only.spec.js","names":["description","makeTestGroup","unreachable","assert","Float16Array","kColorTextureFormats","kTextureFormatInfo","GPUTest","ComponentCount","format","F","InitTextureAndGetExpectedOutputBufferData","storageTexture","bytesPerBlock","undefined","width","height","depthOrArrayLayers","texelData","ArrayBuffer","texelTypedDataView","GetTypedArrayBufferViewForTexelData","componentCount","outputBufferData","outputBufferTypedData","GetTypedArrayBufferForOutputBufferData","SetData","texelValue","outputValue","texelDataIndex","component","outputComponent","texelComponentIndex","outputTexelComponentIndex","z","y","x","Math","max","f16Array","queue","writeTexture","texture","bytesPerRow","rowsPerImage","arrayBuffer","color","type","Uint32Array","Int32Array","Float32Array","Uint8Array","Uint16Array","Int8Array","Int16Array","GetOutputBufferWGSLType","DoTransform","shaderStage","outputBuffer","declaration","textureDeclaration","bindingResourceDeclaration","bindGroupEntries","binding","resource","createView","buffer","commandEncoder","device","createCommandEncoder","textureLoadCoord","computeShader","computePipeline","createComputePipeline","compute","module","createShaderModule","code","layout","bindGroup","createBindGroup","getBindGroupLayout","entries","computePassEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","fragmentShader","vertexShader","renderPipeline","createRenderPipeline","vertex","fragment","targets","primitive","topology","placeholderColorTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","trackForCleanup","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","clearValue","r","g","b","a","storeOp","draw","submit","finish","test","desc","params","u","combine","filter","p","storage","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","kWidth","textureSize","COPY_SRC","COPY_DST","STORAGE_BINDING","expectedData","createBuffer","GPUBufferUsage","STORAGE","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/storage_texture/read_only.spec.ts"],"sourcesContent":["export const description = `\nTests for the behavior of read-only storage textures.\n\nTODO:\n- Test the use of read-only storage textures in vertex shader\n- Test 1D and 3D textures\n- Test mipmap level > 0\n- Test resource usage transitions with read-only storage textures\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable, assert } from '../../../../common/util/util.js';\nimport { Float16Array } from '../../../../external/petamoriken/float16/float16.js';\nimport {\n  ColorTextureFormat,\n  kColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TValidShaderStage } from '../../../util/shader.js';\n\nfunction ComponentCount(format: ColorTextureFormat): number {\n  switch (format) {\n    case 'r32float':\n    case 'r32sint':\n    case 'r32uint':\n      return 1;\n    case 'rg32float':\n    case 'rg32sint':\n    case 'rg32uint':\n      return 2;\n    case 'rgba32float':\n    case 'rgba32sint':\n    case 'rgba32uint':\n    case 'rgba8sint':\n    case 'rgba8uint':\n    case 'rgba8snorm':\n    case 'rgba8unorm':\n    case 'rgba16float':\n    case 'rgba16sint':\n    case 'rgba16uint':\n    case 'bgra8unorm':\n      return 4;\n    default:\n      unreachable();\n      return 0;\n  }\n}\n\nclass F extends GPUTest {\n  InitTextureAndGetExpectedOutputBufferData(\n    storageTexture: GPUTexture,\n    format: ColorTextureFormat\n  ): ArrayBuffer {\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    assert(bytesPerBlock !== undefined);\n\n    const width = storageTexture.width;\n    const height = storageTexture.height;\n    const depthOrArrayLayers = storageTexture.depthOrArrayLayers;\n\n    const texelData = new ArrayBuffer(bytesPerBlock * width * height * depthOrArrayLayers);\n    const texelTypedDataView = this.GetTypedArrayBufferViewForTexelData(texelData, format);\n    const componentCount = ComponentCount(format);\n    const outputBufferData = new ArrayBuffer(4 * 4 * width * height * depthOrArrayLayers);\n    const outputBufferTypedData = this.GetTypedArrayBufferForOutputBufferData(\n      outputBufferData,\n      format\n    );\n\n    const SetData = (\n      texelValue: number,\n      outputValue: number,\n      texelDataIndex: number,\n      component: number,\n      outputComponent: number = component\n    ) => {\n      const texelComponentIndex = texelDataIndex * componentCount + component;\n      texelTypedDataView[texelComponentIndex] = texelValue;\n      const outputTexelComponentIndex = texelDataIndex * 4 + outputComponent;\n      outputBufferTypedData[outputTexelComponentIndex] = outputValue;\n    };\n    for (let z = 0; z < depthOrArrayLayers; ++z) {\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const texelDataIndex = z * width * height + y * width + x;\n          outputBufferTypedData[4 * texelDataIndex] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 1] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 2] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 3] = 1;\n          for (let component = 0; component < componentCount; ++component) {\n            switch (format) {\n              case 'r32uint':\n              case 'rg32uint':\n              case 'rgba16uint':\n              case 'rgba32uint': {\n                const texelValue = 4 * texelDataIndex + component + 1;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8uint': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8unorm': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                const outputValue = texelValue / 255.0;\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'bgra8unorm': {\n                const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                const outputValue = texelValue / 255.0;\n                // BGRA -> RGBA\n                assert(component < 4);\n                const outputComponent = [2, 1, 0, 3][component];\n                SetData(texelValue, outputValue, texelDataIndex, component, outputComponent);\n                break;\n              }\n              case 'r32sint':\n              case 'rg32sint':\n              case 'rgba16sint':\n              case 'rgba32sint': {\n                const texelValue =\n                  (texelDataIndex & 1 ? 1 : -1) * (4 * texelDataIndex + component + 1);\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8sint': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba8snorm': {\n                const texelValue = ((4 * texelDataIndex + component + 1) % 256) - 128;\n                const outputValue = Math.max(texelValue / 127.0, -1.0);\n                SetData(texelValue, outputValue, texelDataIndex, component);\n                break;\n              }\n              case 'r32float':\n              case 'rg32float':\n              case 'rgba32float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                SetData(texelValue, texelValue, texelDataIndex, component);\n                break;\n              }\n              case 'rgba16float': {\n                const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                const f16Array = new Float16Array(1);\n                f16Array[0] = texelValue;\n                SetData(texelValue, f16Array[0], texelDataIndex, component);\n                break;\n              }\n              default:\n                unreachable();\n                break;\n            }\n          }\n        }\n      }\n    }\n    this.queue.writeTexture(\n      {\n        texture: storageTexture,\n      },\n      texelData,\n      {\n        bytesPerRow: bytesPerBlock * width,\n        rowsPerImage: height,\n      },\n      [width, height, depthOrArrayLayers]\n    );\n\n    return outputBufferData;\n  }\n\n  GetTypedArrayBufferForOutputBufferData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return new Uint32Array(arrayBuffer);\n      case 'sint':\n        return new Int32Array(arrayBuffer);\n      case 'float':\n      case 'unfilterable-float':\n        return new Float32Array(arrayBuffer);\n    }\n  }\n\n  GetTypedArrayBufferViewForTexelData(arrayBuffer: ArrayBuffer, format: ColorTextureFormat) {\n    switch (format) {\n      case 'r32uint':\n      case 'rg32uint':\n      case 'rgba32uint':\n        return new Uint32Array(arrayBuffer);\n      case 'rgba8uint':\n      case 'rgba8unorm':\n      case 'bgra8unorm':\n        return new Uint8Array(arrayBuffer);\n      case 'rgba16uint':\n        return new Uint16Array(arrayBuffer);\n      case 'r32sint':\n      case 'rg32sint':\n      case 'rgba32sint':\n        return new Int32Array(arrayBuffer);\n      case 'rgba8sint':\n      case 'rgba8snorm':\n        return new Int8Array(arrayBuffer);\n      case 'rgba16sint':\n        return new Int16Array(arrayBuffer);\n      case 'r32float':\n      case 'rg32float':\n      case 'rgba32float':\n        return new Float32Array(arrayBuffer);\n      case 'rgba16float':\n        return new Float16Array(arrayBuffer);\n      default:\n        unreachable();\n        return new Uint8Array(arrayBuffer);\n    }\n  }\n\n  GetOutputBufferWGSLType(format: ColorTextureFormat) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return 'vec4u';\n      case 'sint':\n        return 'vec4i';\n      case 'float':\n      case 'unfilterable-float':\n        return 'vec4f';\n      default:\n        unreachable();\n        return '';\n    }\n  }\n\n  DoTransform(\n    storageTexture: GPUTexture,\n    shaderStage: TValidShaderStage,\n    format: ColorTextureFormat,\n    outputBuffer: GPUBuffer\n  ) {\n    const declaration =\n      storageTexture.depthOrArrayLayers > 1 ? 'texture_storage_2d_array' : 'texture_storage_2d';\n    const textureDeclaration = `\n    @group(0) @binding(0) var readOnlyTexture: ${declaration}<${format}, read>;\n    `;\n    const bindingResourceDeclaration = `\n    ${textureDeclaration}\n    @group(0) @binding(1)\n    var<storage,read_write> outputBuffer : array<${this.GetOutputBufferWGSLType(format)}>;\n    `;\n\n    const bindGroupEntries = [\n      {\n        binding: 0,\n        resource: storageTexture.createView(),\n      },\n      {\n        binding: 1,\n        resource: {\n          buffer: outputBuffer,\n        },\n      },\n    ];\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    switch (shaderStage) {\n      case 'compute': {\n        const textureLoadCoord =\n          storageTexture.depthOrArrayLayers > 1\n            ? `vec2u(invocationID.x, invocationID.y), invocationID.z`\n            : `vec2u(invocationID.x, invocationID.y)`;\n\n        const computeShader = `\n      ${bindingResourceDeclaration}\n      @compute\n      @workgroup_size(${storageTexture.width}, ${storageTexture.height}, ${storageTexture.depthOrArrayLayers})\n      fn main(\n        @builtin(local_invocation_id) invocationID: vec3u,\n        @builtin(local_invocation_index) invocationIndex: u32) {\n        let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n        outputBuffer[invocationIndex] = initialValue;\n      }`;\n        const computePipeline = this.device.createComputePipeline({\n          compute: {\n            module: this.device.createShaderModule({\n              code: computeShader,\n            }),\n          },\n          layout: 'auto',\n        });\n        const bindGroup = this.device.createBindGroup({\n          layout: computePipeline.getBindGroupLayout(0),\n          entries: bindGroupEntries,\n        });\n\n        const computePassEncoder = commandEncoder.beginComputePass();\n        computePassEncoder.setPipeline(computePipeline);\n        computePassEncoder.setBindGroup(0, bindGroup);\n        computePassEncoder.dispatchWorkgroups(1);\n        computePassEncoder.end();\n        break;\n      }\n      case 'fragment': {\n        const textureLoadCoord =\n          storageTexture.depthOrArrayLayers > 1 ? 'textureCoord, z' : 'textureCoord';\n\n        const fragmentShader = `\n        ${bindingResourceDeclaration}\n        @fragment\n        fn main(@builtin(position) fragCoord: vec4f) -> @location(0) vec4f {\n          let textureCoord = vec2u(fragCoord.xy);\n          let storageTextureTexelCountPerImage = ${storageTexture.width * storageTexture.height}u;\n          for (var z = 0u; z < ${storageTexture.depthOrArrayLayers}; z++) {\n            let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n            let outputIndex =\n              storageTextureTexelCountPerImage * z + textureCoord.y * ${storageTexture.width} +\n              textureCoord.x;\n            outputBuffer[outputIndex] = initialValue;\n          }\n          return vec4f(0.0, 1.0, 0.0, 1.0);\n        }`;\n        const vertexShader = `\n            @vertex\n            fn main(@builtin(vertex_index) vertexIndex : u32) -> @builtin(position) vec4f {\n                var pos = array(\n                  vec2f(-1.0, -1.0),\n                  vec2f(-1.0,  1.0),\n                  vec2f( 1.0, -1.0),\n                  vec2f(-1.0,  1.0),\n                  vec2f( 1.0, -1.0),\n                  vec2f( 1.0,  1.0));\n                return vec4f(pos[vertexIndex], 0.0, 1.0);\n            }\n          `;\n        const renderPipeline = this.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: this.device.createShaderModule({\n              code: vertexShader,\n            }),\n          },\n          fragment: {\n            module: this.device.createShaderModule({\n              code: fragmentShader,\n            }),\n            targets: [\n              {\n                format: 'rgba8unorm',\n              },\n            ],\n          },\n          primitive: {\n            topology: 'triangle-list',\n          },\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: renderPipeline.getBindGroupLayout(0),\n          entries: bindGroupEntries,\n        });\n\n        const placeholderColorTexture = this.device.createTexture({\n          size: [storageTexture.width, storageTexture.height, 1],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          format: 'rgba8unorm',\n        });\n        this.trackForCleanup(placeholderColorTexture);\n\n        const renderPassEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: placeholderColorTexture.createView(),\n              loadOp: 'clear',\n              clearValue: { r: 0, g: 0, b: 0, a: 0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n        renderPassEncoder.setPipeline(renderPipeline);\n        renderPassEncoder.setBindGroup(0, bindGroup);\n        renderPassEncoder.draw(6);\n        renderPassEncoder.end();\n        break;\n      }\n      case 'vertex':\n        // Not implemented yet.\n        unreachable();\n        break;\n    }\n\n    this.queue.submit([commandEncoder.finish()]);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic')\n  .desc(\n    `The basic functionality tests for read-only storage textures. In the test we read data from\n    the read-only storage texture, write the data into an output storage buffer, and check if the\n    data in the output storage buffer is exactly what we expect.`\n  )\n  .params(u =>\n    u\n      .combine('format', kColorTextureFormats)\n      .filter(\n        p => p.format === 'bgra8unorm' || kTextureFormatInfo[p.format].color?.storage === true\n      )\n      .combine('shaderStage', ['fragment', 'compute'] as const)\n      .combine('depthOrArrayLayers', [1, 2] as const)\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.format === 'bgra8unorm') {\n      t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n    }\n  })\n  .fn(t => {\n    const { format, shaderStage, depthOrArrayLayers } = t.params;\n\n    const kWidth = 8;\n    const height = 8;\n    const textureSize = [kWidth, height, depthOrArrayLayers] as const;\n    const storageTexture = t.device.createTexture({\n      format,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING,\n    });\n    t.trackForCleanup(storageTexture);\n\n    const expectedData = t.InitTextureAndGetExpectedOutputBufferData(storageTexture, format);\n\n    const outputBuffer = t.device.createBuffer({\n      size: 4 * 4 * kWidth * height * depthOrArrayLayers,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n    });\n    t.trackForCleanup(outputBuffer);\n\n    t.DoTransform(storageTexture, shaderStage, format, outputBuffer);\n\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expectedData));\n        break;\n      case 'sint':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Int32Array(expectedData));\n        break;\n      case 'float':\n      case 'unfilterable-float':\n        t.expectGPUBufferValuesEqual(outputBuffer, new Float32Array(expectedData));\n        break;\n      default:\n        unreachable();\n        break;\n    }\n  });\n"],"mappings":"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"}