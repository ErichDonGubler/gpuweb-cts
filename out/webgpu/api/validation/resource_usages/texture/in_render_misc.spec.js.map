{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_misc.spec.ts"],"names":["description","makeTestGroup","unreachable","ValidationTest","F","createBindGroupForTest","textureView","textureUsage","sampleType","bindGroupLayoutEntry","binding","visibility","GPUShaderStage","FRAGMENT","texture","viewDimension","storageTexture","access","format","layout","device","createBindGroupLayout","entries","createBindGroup","resource","g","kTextureSize","kTextureLayers","test","desc","params","u","combineWithParams","useDifferentTextureAsTexture2","baseLayer2","view2Binding","combine","fn","t","hasConflict","texture0","createTexture","usage","GPUTextureUsage","TEXTURE_BINDING","STORAGE_BINDING","size","textureView0","createView","dimension","baseArrayLayer","arrayLayerCount","bindGroup0","view1Binding","bindGroup1","texture2","textureView2","validBindGroup2","colorTexture","RENDER_ATTACHMENT","encoder","createCommandEncoder","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","storeOp","setBindGroup","end","expectValidationError","finish","bindAspect","depthStencilReadOnly","depthStencilTexture","conflictedToNonReadOnlyAttachmentBindGroup","aspect","validBindGroup","depthStencilAttachment","depthReadOnly","stencilReadOnly"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- 2 views: upon the same subresource, or different subresources of the same texture\n    - texture usages in copies and in render pass\n    - unused bind groups\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: 'texture' | 'storage',\n    sampleType: 'float' | 'depth' | 'uint'\n  ) {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: GPUShaderStage.FRAGMENT,\n    };\n    switch (textureUsage) {\n      case 'texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'storage':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'rgba8unorm',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    const layout = this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n    return this.device.createBindGroup({\n      layout,\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLayers = 3;\n\ng.test('subresources,set_bind_group_on_same_index_color_texture')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, whether the\n  conflicted bind groups are reset by another compatible ones or not, its list of internal usages\n  within one usage scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        { useDifferentTextureAsTexture2: true, baseLayer2: 0, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 0, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 1, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 0, view2Binding: 'storage' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 1, view2Binding: 'storage' },\n      ] as const)\n      .combine('hasConflict', [true, false])\n  )\n  .fn(async t => {\n    const { useDifferentTextureAsTexture2, baseLayer2, view2Binding, hasConflict } = t.params;\n\n    const texture0 = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const bindGroup0 = t.createBindGroupForTest(textureView0, view2Binding, 'float');\n\n    // In one renderPassEncoder it is an error to set both bindGroup0 and bindGroup1.\n    const view1Binding = hasConflict\n      ? view2Binding === 'texture'\n        ? 'storage'\n        : 'texture'\n      : view2Binding;\n    const bindGroup1 = t.createBindGroupForTest(textureView0, view1Binding, 'float');\n\n    const texture2 = useDifferentTextureAsTexture2\n      ? t.device.createTexture({\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n          size: [kTextureSize, kTextureSize, kTextureLayers],\n        })\n      : texture0;\n    const textureView2 = texture2.createView({\n      dimension: '2d-array',\n      baseArrayLayer: baseLayer2,\n      arrayLayerCount: kTextureLayers - baseLayer2,\n    });\n    // There should be no conflict between bindGroup0 and validBindGroup2.\n    const validBindGroup2 = t.createBindGroupForTest(textureView2, view2Binding, 'float');\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassEncoder.setBindGroup(0, bindGroup0);\n    renderPassEncoder.setBindGroup(1, bindGroup1);\n    renderPassEncoder.setBindGroup(1, validBindGroup2);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, hasConflict);\n  });\n\ng.test('subresources,set_bind_group_on_same_index_depth_stencil_texture')\n  .desc(\n    `\n  Test that when one depth stencil texture subresource is bound to different bind groups, whether\n  the conflicted bind groups are reset by another compatible ones or not, its list of internal\n  usages within one usage scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('bindAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('depthStencilReadOnly', [true, false])\n  )\n  .fn(async t => {\n    const { bindAspect, depthStencilReadOnly } = t.params;\n    const depthStencilTexture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n\n    const conflictedToNonReadOnlyAttachmentBindGroup = t.createBindGroupForTest(\n      depthStencilTexture.createView({\n        dimension: '2d-array',\n        aspect: bindAspect,\n      }),\n      'texture',\n      bindAspect === 'depth-only' ? 'depth' : 'uint'\n    );\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const validBindGroup = t.createBindGroupForTest(\n      colorTexture.createView({\n        dimension: '2d-array',\n      }),\n      'texture',\n      'float'\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthReadOnly: depthStencilReadOnly,\n        stencilReadOnly: depthStencilReadOnly,\n      },\n    });\n    renderPassEncoder.setBindGroup(0, conflictedToNonReadOnlyAttachmentBindGroup);\n    renderPassEncoder.setBindGroup(0, validBindGroup);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !depthStencilReadOnly);\n  });\n"],"file":"in_render_misc.spec.js"}