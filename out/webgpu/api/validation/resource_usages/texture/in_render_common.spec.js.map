{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_common.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","ValidationTest","F","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","createBindGroupForTest","textureView","textureUsage","sampleType","bindGroupLayoutEntry","binding","visibility","GPUShaderStage","FRAGMENT","viewDimension","storageTexture","access","format","layout","device","createBindGroupLayout","entries","createBindGroup","resource","isRangeNotOverlapped","start0","end0","start1","end1","kTextureSize","kTextureLevels","kTextureLayers","test","desc","params","u","combine","unless","t","inSamePass","baseLevel0","baseLevel1","fn","baseLayer0","baseLayer1","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","size","mipLevelCount","colorAttachment1","baseArrayLayer","arrayLayerCount","baseMipLevel","colorAttachment2","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","end","renderPass1","renderPass2","success","expectValidationError","finish","combineWithParams","bindGroupViewBaseLevel","bindGroupViewLevelCount","bindGroupViewBaseLayer","bindGroupViewLayerCount","bindGroupUsage","colorAttachmentLevel","colorAttachmentLayer","TEXTURE_BINDING","STORAGE_BINDING","bindGroupView","dimension","bindGroup","colorAttachment","setBindGroup","texture2","isMipLevelNotOverlapped","isArrayLayerNotOverlapped","isNotOverlapped","depthStencilAttachmentLevel","depthStencilAttachmentLayer","depthStencilReadOnly","bindGroupAspect","aspect","attachmentView","depthStencilAttachment","depthReadOnly","depthLoadOp","depthStoreOp","stencilReadOnly","stencilLoadOp","stencilStoreOp","bindGroupView0BaseLevel","bindGroupView0LevelCount","bindGroupView0BaseLayer","bindGroupView0LayerCount","bindGroupView1BaseLevel","bindGroupView1LevelCount","bindGroupView1BaseLayer","bindGroupView1LayerCount","bindGroupUsage0","bindGroupUsage1","bindGroupView0","bindGroupView1","bindGroup0","bindGroup1","colorTexture"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- 2 views:\n    - x= {upon the same subresource, or different subresources {mip level, array layer, aspect} of\n         the same texture}\n    - x= possible resource usages on each view:\n         - both in bind group {texture_binding, storage_binding}\n    - x= different shader stages: {0, ..., 7}\n        - maybe first view vis = {1, 2, 4}, second view vis = {0, ..., 7}\n    - x= bindings are in {\n        - same draw call\n        - same pass, different draw call\n        - different pass\n        - }\n(It's probably not necessary to test EVERY possible combination of options in this whole\nblock, so we could break it down into a few smaller ones (one for different types of\nsubresources, one for same draw/same pass/different pass, one for visibilities).)\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: 'texture' | 'storage',\n    sampleType: 'float' | 'depth' | 'uint'\n  ) {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: GPUShaderStage.FRAGMENT,\n    };\n    switch (textureUsage) {\n      case 'texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'storage':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'rgba8unorm',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    const layout = this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n    return this.device.createBindGroup({\n      layout,\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n\n  isRangeNotOverlapped(start0: number, end0: number, start1: number, end1: number): boolean {\n    assert(start0 <= end0 && start1 <= end1);\n    // There are only two possibilities for two non-overlapped ranges:\n    // [start0, end0] [start1, end1] or\n    // [start1, end1] [start0, end0]\n    return end0 < start1 || end1 < start0;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLevels = 3;\nconst kTextureLayers = 3;\n\ng.test('subresources_from_same_texture_as_color_attachments')\n  .desc(\n    `\n  Test that the different subresource of the same texture are allowed to be used as color\n  attachments in same / different render pass encoder, while the same subresource is only allowed\n  to be used as different color attachments in different render pass encoders.`\n  )\n  .params(u =>\n    u\n      .combine('baseLayer0', [0, 1])\n      .combine('baseLevel0', [0, 1])\n      .combine('baseLayer1', [0, 1])\n      .combine('baseLevel1', [0, 1])\n      .combine('inSamePass', [true, false])\n      .unless(t => t.inSamePass && t.baseLevel0 !== t.baseLevel1)\n  )\n  .fn(async t => {\n    const { baseLayer0, baseLevel0, baseLayer1, baseLevel1, inSamePass } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n\n    const colorAttachment1 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer0,\n      arrayLayerCount: 1,\n      baseMipLevel: baseLevel0,\n      mipLevelCount: 1,\n    });\n    const colorAttachment2 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: 1,\n    });\n    const encoder = t.device.createCommandEncoder();\n    if (inSamePass) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1, colorAttachment2],\n      });\n      renderPass.end();\n    } else {\n      const renderPass1 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1],\n      });\n      renderPass1.end();\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.end();\n    }\n\n    const success = inSamePass ? baseLayer0 !== baseLayer1 : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_from_same_texture_as_color_attachment_and_in_bind_group')\n  .desc(\n    `\n  Test that when one subresource of a texture is used as a color attachment, it cannot be used in a\n  bind group simultaneously in the same render pass encoder. It is allowed when the bind group is\n  used in another render pass encoder instead of the same one.`\n  )\n  .params(u =>\n    u\n      .combine('colorAttachmentLevel', [0, 1])\n      .combine('colorAttachmentLayer', [0, 1])\n      .combineWithParams([\n        { bindGroupViewBaseLevel: 0, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupViewBaseLayer: 0, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 2 },\n      ])\n      .combine('bindGroupUsage', ['texture', 'storage'] as const)\n      .unless(t => t.bindGroupUsage === 'storage' && t.bindGroupViewLevelCount > 1)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      colorAttachmentLevel,\n      colorAttachmentLayer,\n      bindGroupViewBaseLevel,\n      bindGroupViewLevelCount,\n      bindGroupViewBaseLayer,\n      bindGroupViewLayerCount,\n      bindGroupUsage,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bindGroupViewBaseLayer,\n      arrayLayerCount: bindGroupViewLayerCount,\n      baseMipLevel: bindGroupViewBaseLevel,\n      mipLevelCount: bindGroupViewLevelCount,\n    });\n    const bindGroup = t.createBindGroupForTest(bindGroupView, bindGroupUsage, 'float');\n\n    const colorAttachment = t.getColorAttachment(texture, {\n      baseArrayLayer: colorAttachmentLayer,\n      arrayLayerCount: 1,\n      baseMipLevel: colorAttachmentLevel,\n      mipLevelCount: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup);\n      renderPass.end();\n    } else {\n      renderPass.end();\n\n      const texture2 = t.device.createTexture({\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        size: [kTextureSize, kTextureSize, 1],\n        mipLevelCount: 1,\n      });\n      const colorAttachment2 = t.getColorAttachment(texture2);\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.setBindGroup(0, bindGroup);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      colorAttachmentLevel,\n      colorAttachmentLevel,\n      bindGroupViewBaseLevel,\n      bindGroupViewBaseLevel + bindGroupViewLevelCount - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      colorAttachmentLayer,\n      colorAttachmentLayer,\n      bindGroupViewBaseLayer,\n      bindGroupViewBaseLayer + bindGroupViewLayerCount - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = inSamePass ? isNotOverlapped : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_from_same_texture_as_depth_stencil_attachment_and_in_bind_group')\n  .desc(\n    `\n  Test that when one subresource of a texture is used as a depth stencil attachment, it cannot be\n  used in a bind group simultaneously in the same render pass encoder. It is allowed when the bind\n  group is used in another render pass encoder instead of the same one, or the subresource is used\n  as a read-only depth stencil attachment.`\n  )\n  .params(u =>\n    u\n      .combine('depthStencilAttachmentLevel', [0, 1])\n      .combine('depthStencilAttachmentLayer', [0, 1])\n      .combineWithParams([\n        { bindGroupViewBaseLevel: 0, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupViewBaseLayer: 0, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 2 },\n      ])\n      .combine('depthStencilReadOnly', [true, false])\n      .combine('bindGroupAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      depthStencilAttachmentLevel,\n      depthStencilAttachmentLayer,\n      bindGroupViewBaseLevel,\n      bindGroupViewLevelCount,\n      bindGroupViewBaseLayer,\n      bindGroupViewLayerCount,\n      depthStencilReadOnly,\n      bindGroupAspect,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bindGroupViewBaseLayer,\n      arrayLayerCount: bindGroupViewLayerCount,\n      baseMipLevel: bindGroupViewBaseLevel,\n      mipLevelCount: bindGroupViewLevelCount,\n      aspect: bindGroupAspect,\n    });\n    const sampleType = bindGroupAspect === 'depth-only' ? 'depth' : 'uint';\n    const bindGroup = t.createBindGroupForTest(bindGroupView, 'texture', sampleType);\n\n    const attachmentView = texture.createView({\n      baseArrayLayer: depthStencilAttachmentLayer,\n      arrayLayerCount: 1,\n      baseMipLevel: depthStencilAttachmentLevel,\n      mipLevelCount: 1,\n    });\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: attachmentView,\n      depthReadOnly: depthStencilReadOnly,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilReadOnly: depthStencilReadOnly,\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment,\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup);\n      renderPass.end();\n    } else {\n      renderPass.end();\n\n      const texture2 = t.device.createTexture({\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        size: [kTextureSize, kTextureSize, 1],\n        mipLevelCount: 1,\n      });\n      const colorAttachment2 = t.getColorAttachment(texture2);\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.setBindGroup(0, bindGroup);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      depthStencilAttachmentLevel,\n      depthStencilAttachmentLevel,\n      bindGroupViewBaseLevel,\n      bindGroupViewBaseLevel + bindGroupViewLevelCount - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      depthStencilAttachmentLayer,\n      depthStencilAttachmentLayer,\n      bindGroupViewBaseLayer,\n      bindGroupViewBaseLayer + bindGroupViewLayerCount - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = !inSamePass || isNotOverlapped || depthStencilReadOnly;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_from_same_color_texture_in_bind_groups')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, its list of\n  internal usages within one usage scope can only be a compatible usage list. For texture\n  subresources in bind groups, the compatible usage lists are {TEXTURE_BINDING} and\n  {STORAGE_BINDING}, which means it can only be bound as both TEXTURE_BINDING and STORAGE_BINDING in\n  different render pass encoders, otherwise a validation error will occur.`\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        { bindGroupView0BaseLevel: 0, bindGroupView0LevelCount: 1 },\n        { bindGroupView0BaseLevel: 1, bindGroupView0LevelCount: 1 },\n        { bindGroupView0BaseLevel: 1, bindGroupView0LevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupView0BaseLayer: 0, bindGroupView0LayerCount: 1 },\n        { bindGroupView0BaseLayer: 1, bindGroupView0LayerCount: 1 },\n        { bindGroupView0BaseLayer: 1, bindGroupView0LayerCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupView1BaseLevel: 0, bindGroupView1LevelCount: 1 },\n        { bindGroupView1BaseLevel: 1, bindGroupView1LevelCount: 1 },\n        { bindGroupView1BaseLevel: 1, bindGroupView1LevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupView1BaseLayer: 0, bindGroupView1LayerCount: 1 },\n        { bindGroupView1BaseLayer: 1, bindGroupView1LayerCount: 1 },\n        { bindGroupView1BaseLayer: 1, bindGroupView1LayerCount: 2 },\n      ])\n      .combine('bindGroupUsage0', ['texture', 'storage'] as const)\n      .combine('bindGroupUsage1', ['texture', 'storage'] as const)\n      .unless(\n        t =>\n          (t.bindGroupUsage0 === 'storage' && t.bindGroupView0LevelCount > 1) ||\n          (t.bindGroupUsage1 === 'storage' && t.bindGroupView1LevelCount > 1)\n      )\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      bindGroupView0BaseLevel,\n      bindGroupView0LevelCount,\n      bindGroupView0BaseLayer,\n      bindGroupView0LayerCount,\n      bindGroupView1BaseLevel,\n      bindGroupView1LevelCount,\n      bindGroupView1BaseLayer,\n      bindGroupView1LayerCount,\n      bindGroupUsage0,\n      bindGroupUsage1,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView0 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bindGroupView0BaseLayer,\n      arrayLayerCount: bindGroupView0LayerCount,\n      baseMipLevel: bindGroupView0BaseLevel,\n      mipLevelCount: bindGroupView0LevelCount,\n    });\n    const bindGroupView1 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bindGroupView1BaseLayer,\n      arrayLayerCount: bindGroupView1LayerCount,\n      baseMipLevel: bindGroupView1BaseLevel,\n      mipLevelCount: bindGroupView1LevelCount,\n    });\n    const bindGroup0 = t.createBindGroupForTest(bindGroupView0, bindGroupUsage0, 'float');\n    const bindGroup1 = t.createBindGroupForTest(bindGroupView1, bindGroupUsage1, 'float');\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      mipLevelCount: 1,\n    });\n    const colorAttachment = t.getColorAttachment(colorTexture);\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.setBindGroup(1, bindGroup1);\n      renderPass.end();\n    } else {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.end();\n\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment],\n      });\n      renderPass2.setBindGroup(1, bindGroup1);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      bindGroupView0BaseLevel,\n      bindGroupView0BaseLevel + bindGroupView0LevelCount - 1,\n      bindGroupView1BaseLevel,\n      bindGroupView1BaseLevel + bindGroupView1LevelCount - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      bindGroupView0BaseLayer,\n      bindGroupView0BaseLayer + bindGroupView0LayerCount - 1,\n      bindGroupView1BaseLayer,\n      bindGroupView1BaseLayer + bindGroupView1LayerCount - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = !inSamePass || isNotOverlapped || bindGroupUsage0 === bindGroupUsage1;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n"],"file":"in_render_common.spec.js"}