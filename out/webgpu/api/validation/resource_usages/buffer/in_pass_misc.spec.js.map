{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/buffer/in_pass_misc.spec.ts"],"names":["description","makeTestGroup","BufferResourceUsageTest","kAllBufferUsages","g","kBufferSize","test","desc","params","u","combine","fn","t","usage0","usage1","kUsages","GPUBufferUsage","UNIFORM","STORAGE","INDIRECT","buffer","createBufferWithState","size","usage","anotherBuffer","bindGroupLayouts","createBindGroupLayoutForTest","push","pipelineLayout","device","createPipelineLayout","computePipeline","createNoOpComputePipeline","encoder","createCommandEncoder","computePassEncoder","beginComputePass","setPipeline","bindGroup0","createBindGroupForTest","setBindGroup","anotherBindGroup","bindGroup1","dispatchWorkgroups","dispatchWorkgroupsIndirect","end","expectValidationError","finish","unless","VERTEX","INDEX","renderPassEncoder","beginSimpleRenderPass","vertexBufferCount","length","setVertexBuffer","setIndexBuffer","renderPipeline","createRenderPipelineForTest","indexBuffer","drawIndexedIndirect","drawIndirect","drawIndexed","draw","fail"],"mappings":"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","sourcesContent":["export const description = `\nTest other buffer usage validation rules that are not tests in ./in_pass_encoder.spec.js.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\n\nimport { BufferResourceUsageTest, kAllBufferUsages } from './in_pass_encoder.spec.js';\n\nexport const g = makeTestGroup(BufferResourceUsageTest);\n\nconst kBufferSize = 256;\n\ng.test('subresources,reset_buffer_usage_before_dispatch')\n  .desc(\n    `\nTest that the buffer usages which are reset by another state-setting commands before a dispatch call\ndo not contribute directly to any usage scope in a compute pass.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', ['uniform', 'storage', 'read-only-storage'] as const)\n      .combine('usage1', ['uniform', 'storage', 'read-only-storage', 'indirect'] as const)\n  )\n  .fn(async t => {\n    const { usage0, usage1 } = t.params;\n\n    const kUsages = GPUBufferUsage.UNIFORM | GPUBufferUsage.STORAGE | GPUBufferUsage.INDIRECT;\n    const buffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n    const anotherBuffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n\n    const bindGroupLayouts: GPUBindGroupLayout[] = [\n      t.createBindGroupLayoutForTest(usage0, 'compute'),\n    ];\n    if (usage1 !== 'indirect') {\n      bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage1, 'compute'));\n    }\n    const pipelineLayout = t.device.createPipelineLayout({ bindGroupLayouts });\n    const computePipeline = t.createNoOpComputePipeline(pipelineLayout);\n\n    const encoder = t.device.createCommandEncoder();\n    const computePassEncoder = encoder.beginComputePass();\n    computePassEncoder.setPipeline(computePipeline);\n\n    // Set usage0 for buffer at bind group index 0\n    const bindGroup0 = t.createBindGroupForTest(buffer, 0, usage0, 'compute');\n    computePassEncoder.setBindGroup(0, bindGroup0);\n\n    // Reset bind group index 0 with another bind group that uses anotherBuffer\n    const anotherBindGroup = t.createBindGroupForTest(anotherBuffer, 0, usage0, 'compute');\n    computePassEncoder.setBindGroup(0, anotherBindGroup);\n\n    // Set usage1 for buffer\n    switch (usage1) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup1 = t.createBindGroupForTest(buffer, 0, usage1, 'compute');\n        computePassEncoder.setBindGroup(1, bindGroup1);\n        computePassEncoder.dispatchWorkgroups(1);\n        break;\n      }\n      case 'indirect': {\n        computePassEncoder.dispatchWorkgroupsIndirect(buffer, 0);\n        break;\n      }\n    }\n    computePassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n\ng.test('subresources,reset_buffer_usage_before_draw')\n  .desc(\n    `\nTest that the buffer usages which are reset by another state-setting commands before a draw call\nstill contribute directly to the usage scope of the draw call.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', ['uniform', 'storage', 'read-only-storage', 'vertex', 'index'] as const)\n      .combine('usage1', kAllBufferUsages)\n      .unless(t => {\n        return t.usage0 === 'index' && t.usage1 === 'indirect';\n      })\n  )\n  .fn(async t => {\n    const { usage0, usage1 } = t.params;\n\n    const kUsages =\n      GPUBufferUsage.UNIFORM |\n      GPUBufferUsage.STORAGE |\n      GPUBufferUsage.INDIRECT |\n      GPUBufferUsage.VERTEX |\n      GPUBufferUsage.INDEX;\n    const buffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n    const anotherBuffer = t.createBufferWithState('valid', {\n      size: kBufferSize,\n      usage: kUsages,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = t.beginSimpleRenderPass(encoder);\n\n    const bindGroupLayouts: GPUBindGroupLayout[] = [];\n    let vertexBufferCount = 0;\n\n    // Set buffer as usage0 and reset buffer with anotherBuffer as usage0\n    switch (usage0) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup0 = t.createBindGroupForTest(buffer, 0, usage0, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, bindGroup0);\n\n        const anotherBindGroup = t.createBindGroupForTest(anotherBuffer, 0, usage0, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, anotherBindGroup);\n\n        bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage0, 'fragment'));\n        break;\n      }\n      case 'vertex': {\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, buffer);\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, anotherBuffer);\n\n        ++vertexBufferCount;\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.setIndexBuffer(buffer, 'uint16');\n        renderPassEncoder.setIndexBuffer(anotherBuffer, 'uint16');\n        break;\n      }\n    }\n\n    // Set buffer as usage1\n    switch (usage1) {\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        const bindGroup1 = t.createBindGroupForTest(buffer, 0, usage1, 'fragment');\n        renderPassEncoder.setBindGroup(bindGroupLayouts.length, bindGroup1);\n\n        bindGroupLayouts.push(t.createBindGroupLayoutForTest(usage1, 'fragment'));\n        break;\n      }\n      case 'vertex': {\n        renderPassEncoder.setVertexBuffer(vertexBufferCount, buffer);\n        ++vertexBufferCount;\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.setIndexBuffer(buffer, 'uint16');\n        break;\n      }\n      case 'indirect':\n      case 'indexedIndirect':\n        break;\n    }\n\n    // Add draw call\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts,\n    });\n    const renderPipeline = t.createRenderPipelineForTest(pipelineLayout, vertexBufferCount);\n    renderPassEncoder.setPipeline(renderPipeline);\n    switch (usage1) {\n      case 'indexedIndirect': {\n        if (usage0 !== 'index') {\n          const indexBuffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.INDEX,\n          });\n          renderPassEncoder.setIndexBuffer(indexBuffer, 'uint16');\n        }\n        renderPassEncoder.drawIndexedIndirect(buffer, 0);\n        break;\n      }\n      case 'indirect': {\n        renderPassEncoder.drawIndirect(buffer, 0);\n        break;\n      }\n      case 'index': {\n        renderPassEncoder.drawIndexed(1);\n        break;\n      }\n      case 'vertex':\n      case 'uniform':\n      case 'storage':\n      case 'read-only-storage': {\n        if (usage0 === 'index') {\n          renderPassEncoder.drawIndexed(1);\n        } else {\n          renderPassEncoder.draw(1);\n        }\n        break;\n      }\n    }\n\n    renderPassEncoder.end();\n\n    const fail = (usage0 === 'storage') !== (usage1 === 'storage');\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, fail);\n  });\n"],"file":"in_pass_misc.spec.js"}