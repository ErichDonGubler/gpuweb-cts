{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/beginComputePass.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","locationA","locationB","querySet","device","createQuerySet","type","count","timestampWriteA","queryIndex","location","timestampWriteB","isValid","descriptor","timestampWrites","encoder","createCommandEncoder","computePass","beginComputePass","end","expectValidationError","finish"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,+BAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,MANH,CAMU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,WADX,EACwB,CAAC,WAAD,EAAc,KAAd,CADxB;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAAC,WAAD,EAAc,KAAd,CAFxB,CAPJ;;AAWGC,iBAXH,CAWqB,CAAAC,CAAC,KAAI;AACtBA,EAAAA,CAAC,CAACC,0BAAF,CAA6B,CAAC,iBAAD,CAA7B;AACD,CAbH;AAcGC,EAdH,CAcM,OAAMF,CAAN,KAAW;AACb,QAAM,EAAEG,SAAF,EAAaC,SAAb,KAA2BJ,CAAC,CAACJ,MAAnC;;AAEA,QAAMS,QAAQ,GAAGL,CAAC,CAACM,MAAF,CAASC,cAAT,CAAwB;AACvCC,IAAAA,IAAI,EAAE,WADiC;AAEvCC,IAAAA,KAAK,EAAE,CAFgC,EAAxB,CAAjB;;;AAKA,QAAMC,eAAe,GAAG;AACtBL,IAAAA,QADsB;AAEtBM,IAAAA,UAAU,EAAE,CAFU;AAGtBC,IAAAA,QAAQ,EAAET,SAHY,EAAxB;;;AAMA,QAAMU,eAAe,GAAG;AACtBR,IAAAA,QADsB;AAEtBM,IAAAA,UAAU,EAAE,CAFU;AAGtBC,IAAAA,QAAQ,EAAER,SAHY,EAAxB;;;AAMA,QAAMU,OAAO,GAAGX,SAAS,KAAKC,SAA9B;;AAEA,QAAMW,UAAU,GAAG;AACjBC,IAAAA,eAAe,EAAE,CAACN,eAAD,EAAkBG,eAAlB,CADA,EAAnB;;;AAIA,QAAMI,OAAO,GAAGjB,CAAC,CAACM,MAAF,CAASY,oBAAT,EAAhB;AACA,QAAMC,WAAW,GAAGF,OAAO,CAACG,gBAAR,CAAyBL,UAAzB,CAApB;AACAI,EAAAA,WAAW,CAACE,GAAZ;;AAEArB,EAAAA,CAAC,CAACsB,qBAAF,CAAwB,MAAM;AAC5BL,IAAAA,OAAO,CAACM,MAAR;AACD,GAFD,EAEG,CAACT,OAFJ;AAGD,CA/CH","sourcesContent":["export const description = `\nTests for validation in beginComputePass and GPUComputePassDescriptor as its optional descriptor.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('timestampWrites,same_location')\n  .desc(\n    `\n  Test that entries in timestampWrites do not have the same location in GPUComputePassDescriptor.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('locationA', ['beginning', 'end'] as const)\n      .combine('locationB', ['beginning', 'end'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { locationA, locationB } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const timestampWriteA = {\n      querySet,\n      queryIndex: 0,\n      location: locationA,\n    };\n\n    const timestampWriteB = {\n      querySet,\n      queryIndex: 1,\n      location: locationB,\n    };\n\n    const isValid = locationA !== locationB;\n\n    const descriptor = {\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass(descriptor);\n    computePass.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !isValid);\n  });\n"],"file":"beginComputePass.spec.js"}