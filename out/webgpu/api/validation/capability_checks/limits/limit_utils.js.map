{"version":3,"file":"limit_utils.js","names":["kUnitCaseParamsBuilder","makeTestGroup","keysOf","getGPU","assert","kLimitInfo","GPUTestBase","CreatePipelineTypes","createRenderPipeline","createComputePipeline","kCreatePipelineTypes","CreatePipelineAsyncTypes","createRenderPipelineAsync","createComputePipelineAsync","kCreatePipelineAsyncTypes","RenderEncoderTypes","render","renderBundle","kRenderEncoderTypes","EncoderTypes","compute","kEncoderTypes","TestValues","atLimit","overLimit","kTestValueKeys","getTestValue","limit","testValue","LimitValueTests","atDefault","underDefault","betweenDefaultAndMaximum","atMaximum","overMaximum","kLimitValueTestKeys","getLimitValue","defaultLimit","maximumLimit","limitValueTest","kLimitBaseParams","combine","beginSubcases","LimitTestsImpl","_device","undefined","device","requestDeviceWithLimits","adapter","requiredLimits","shouldReject","requestDevice","getAdapterAndLimits","gpu","requestAdapter","default","limits","Number","isNaN","_getDeviceWithSpecificLimit","requestedLimit","actualLimit","expect","_getDeviceWithRequestedLimit","_testThenDestroyDevice","deviceAndLimits","fn","shouldError","pushErrorScope","validationError","popErrorScope","outOfMemoryError","internalError","message","destroy","testDeviceWithSpecificLimits","deviceLimitValue","testDeviceWithRequestedLimits","limitTest","testValueName","inputs","expectGPUErrorAsync","filter","msg","returnValue","Promise","error","shouldRejectConditionally","expectedName","p","shouldResolve","e","expectValidationError","expectNoValidationError","testForValidationErrorWithPossibleOutOfMemoryError","result","getGroupIndexWGSLForPipelineType","pipelineType","groupIndex","getBindingIndexWGSLForPipelineType","bindingIndex","createPipeline","createPipelineType","module","layout","vertex","entryPoint","createPipelineAsync","createPipelineAsyncType","_getGPURenderCommandsMixin","encoderType","buffer","createBuffer","size","usage","GPUBufferUsage","UNIFORM","texture","createTexture","format","GPUTextureUsage","RENDER_ATTACHMENT","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","bindGroup","createBindGroup","resource","encoder","createCommandEncoder","mixin","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","prep","end","test","finish","cleanup","createRenderBundleEncoder","colorFormats","testGPURenderCommandsMixin","_getGPUBindingCommandsMixin","COMPUTE","beginComputePass","testGPUBindingCommandsMixin","makeLimitTestFixture","LimitTests","makeLimitTestGroup","description","g"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/limit_utils.ts"],"sourcesContent":["import { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { getGPU } from '../../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kLimitInfo } from '../../../../capability_info.js';\nimport { GPUTestBase } from '../../../../gpu_test.js';\n\ntype GPUSupportedLimit = keyof GPUSupportedLimits;\n\nconst CreatePipelineTypes = {\n  createRenderPipeline: true,\n  createComputePipeline: true,\n};\nexport type CreatePipelineType = keyof typeof CreatePipelineTypes;\n\nexport const kCreatePipelineTypes = [\n  'createRenderPipeline',\n  'createComputePipeline',\n] as CreatePipelineType[];\n\nconst CreatePipelineAsyncTypes = {\n  createRenderPipelineAsync: true,\n  createComputePipelineAsync: true,\n};\nexport type CreatePipelineAsyncType = keyof typeof CreatePipelineAsyncTypes;\n\nexport const kCreatePipelineAsyncTypes = [\n  'createRenderPipelineAsync',\n  'createComputePipelineAsync',\n] as CreatePipelineAsyncType[];\n\nconst RenderEncoderTypes = {\n  render: true,\n  renderBundle: true,\n};\nexport type RenderEncoderType = keyof typeof RenderEncoderTypes;\nexport const kRenderEncoderTypes = keysOf(RenderEncoderTypes);\n\nconst EncoderTypes = {\n  compute: true,\n  render: true,\n  renderBundle: true,\n};\nexport type EncoderType = keyof typeof EncoderTypes;\nexport const kEncoderTypes = keysOf(EncoderTypes);\n\nexport const TestValues = {\n  atLimit: true,\n  overLimit: true,\n};\nexport type TestValue = keyof typeof TestValues;\nexport const kTestValueKeys = keysOf(TestValues);\n\nexport function getTestValue(limit: number, testValue: TestValue) {\n  switch (testValue) {\n    case 'atLimit':\n      return limit;\n    case 'overLimit':\n      return limit + 1;\n  }\n}\n\nexport const LimitValueTests = {\n  atDefault: true,\n  underDefault: true,\n  betweenDefaultAndMaximum: true,\n  atMaximum: true,\n  overMaximum: true,\n};\nexport type LimitValueTest = keyof typeof LimitValueTests;\nexport const kLimitValueTestKeys = keysOf(LimitValueTests);\n\nfunction getLimitValue(defaultLimit: number, maximumLimit: number, limitValueTest: LimitValueTest) {\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'underDefault':\n      return defaultLimit - 1;\n    case 'betweenDefaultAndMaximum':\n      return ((defaultLimit + maximumLimit) / 2) | 0;\n    case 'atMaximum':\n      return maximumLimit;\n    case 'overMaximum':\n      return maximumLimit + 1;\n  }\n}\n\nexport type DeviceAndLimits = {\n  device: GPUDevice;\n  defaultLimit: number;\n  maximumLimit: number;\n  requestedLimit: number;\n  actualLimit: number;\n};\n\nexport type SpecificLimitTestInputs = DeviceAndLimits & {\n  testValue: number;\n  shouldError: boolean;\n};\n\nexport type LimitTestInputs = SpecificLimitTestInputs & {\n  testValueName: TestValue;\n};\n\n/**\n * Adds the default parameters to a limit test\n */\nexport const kLimitBaseParams = kUnitCaseParamsBuilder\n  .combine('limitTest', kLimitValueTestKeys)\n  .beginSubcases()\n  .combine('testValueName', kTestValueKeys);\n\nexport class LimitTestsImpl extends GPUTestBase {\n  _device: GPUDevice | undefined = undefined;\n  limit: GPUSupportedLimit = '' as GPUSupportedLimit;\n\n  get device(): GPUDevice {\n    assert(this._device !== undefined, 'device is only valid in _testThenDestroyDevice callback');\n    return this._device;\n  }\n\n  async requestDeviceWithLimits(\n    adapter: GPUAdapter,\n    requiredLimits: Record<string, number>,\n    shouldReject: boolean\n  ) {\n    if (shouldReject) {\n      this.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n      return undefined;\n    } else {\n      return await adapter.requestDevice({ requiredLimits });\n    }\n  }\n\n  async getAdapterAndLimits() {\n    const limit = this.limit;\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(!!adapter);\n\n    const defaultLimit = (kLimitInfo as Record<string, { default: number }>)[limit].default;\n    const maximumLimit = adapter.limits[limit] as number;\n    assert(!Number.isNaN(defaultLimit));\n    assert(!Number.isNaN(maximumLimit));\n\n    return { adapter, defaultLimit, maximumLimit };\n  }\n\n  /**\n   * Gets a device with the adapter a requested limit and checks that that limit\n   * is correct or that the device failed to create if the requested limit is\n   * beyond the maximum supported by the device.\n   */\n  async _getDeviceWithSpecificLimit(\n    adapter: GPUAdapter,\n    requestedLimit: number\n  ): Promise<DeviceAndLimits | undefined> {\n    const limit = this.limit;\n\n    const defaultLimit = (kLimitInfo as Record<string, { default: number }>)[limit].default;\n    const maximumLimit = adapter.limits[limit] as number;\n    assert(!Number.isNaN(defaultLimit));\n    assert(!Number.isNaN(maximumLimit));\n\n    const requiredLimits: Record<string, number> = {};\n    requiredLimits[limit] = requestedLimit;\n    const shouldReject = requestedLimit > maximumLimit;\n\n    const device = await this.requestDeviceWithLimits(adapter, requiredLimits, shouldReject);\n    const actualLimit = (device ? device.limits[limit] : 0) as number;\n\n    if (shouldReject) {\n      this.expect(!device);\n    } else {\n      if (requestedLimit <= defaultLimit) {\n        this.expect(actualLimit === defaultLimit);\n      } else {\n        this.expect(actualLimit === maximumLimit);\n      }\n    }\n\n    return device ? { device, defaultLimit, maximumLimit, requestedLimit, actualLimit } : undefined;\n  }\n\n  /**\n   * Gets a device with the adapter a requested limit and checks that that limit\n   * is correct or that the device failed to create if the requested limit is\n   * beyond the maximum supported by the device.\n   */\n  async _getDeviceWithRequestedLimit(\n    limitValueTest: LimitValueTest\n  ): Promise<DeviceAndLimits | undefined> {\n    const { adapter, defaultLimit, maximumLimit } = await this.getAdapterAndLimits();\n\n    const requestedLimit = getLimitValue(defaultLimit, maximumLimit, limitValueTest);\n    return this._getDeviceWithSpecificLimit(adapter, requestedLimit);\n  }\n\n  /**\n   * Call the given function and check no WebGPU errors are leaked\n   */\n  async _testThenDestroyDevice(\n    deviceAndLimits: DeviceAndLimits,\n    testValue: number,\n    fn: (inputs: SpecificLimitTestInputs) => void | Promise<void>\n  ) {\n    assert(!this._device);\n\n    const { device, actualLimit } = deviceAndLimits;\n    this._device = device;\n    const shouldError = testValue > actualLimit;\n\n    device.pushErrorScope('internal');\n    device.pushErrorScope('out-of-memory');\n    device.pushErrorScope('validation');\n\n    await fn({ ...deviceAndLimits, testValue, shouldError });\n\n    const validationError = await device.popErrorScope();\n    const outOfMemoryError = await device.popErrorScope();\n    const internalError = await device.popErrorScope();\n\n    this.expect(!validationError, validationError?.message || '');\n    this.expect(!outOfMemoryError, outOfMemoryError?.message || '');\n    this.expect(!internalError, internalError?.message || '');\n\n    device.destroy();\n    this._device = undefined;\n  }\n\n  /**\n   * Creates a device with a specific limit.\n   * If the limit of over the maximum we expect an exception\n   * If the device is created then we call a test function, checking\n   * that the function does not leak any GPU errors.\n   */\n  async testDeviceWithSpecificLimits(\n    adapter: GPUAdapter,\n    deviceLimitValue: number,\n    testValue: number,\n    fn: (inputs: SpecificLimitTestInputs) => void | Promise<void>\n  ) {\n    assert(!this._device);\n\n    const deviceAndLimits = await this._getDeviceWithSpecificLimit(adapter, deviceLimitValue);\n    // If we request over the limit requestDevice will throw\n    if (!deviceAndLimits) {\n      return;\n    }\n\n    await this._testThenDestroyDevice(deviceAndLimits, testValue, fn);\n  }\n\n  /**\n   * Creates a device with the limit defined by LimitValueTest.\n   * If the limit of over the maximum we expect an exception\n   * If the device is created then we call a test function, checking\n   * that the function does not leak any GPU errors.\n   */\n  async testDeviceWithRequestedLimits(\n    limitTest: LimitValueTest,\n    testValueName: TestValue,\n    fn: (inputs: LimitTestInputs) => void | Promise<void>\n  ) {\n    assert(!this._device);\n\n    const deviceAndLimits = await this._getDeviceWithRequestedLimit(limitTest);\n    // If we request over the limit requestDevice will throw\n    if (!deviceAndLimits) {\n      return;\n    }\n\n    const { actualLimit } = deviceAndLimits;\n    const testValue = getTestValue(actualLimit, testValueName);\n\n    await this._testThenDestroyDevice(\n      deviceAndLimits,\n      testValue,\n      async (inputs: SpecificLimitTestInputs) => {\n        await fn({ ...inputs, testValueName });\n      }\n    );\n  }\n\n  /**\n   * Calls a function that expects a GPU error if shouldError is true\n   */\n  // MAINTENANCE_TODO: Remove this duplicated code with GPUTest if possible\n  async expectGPUErrorAsync<R>(\n    filter: GPUErrorFilter,\n    fn: () => R,\n    shouldError: boolean = true,\n    msg = ''\n  ): Promise<R> {\n    const { device } = this;\n\n    device.pushErrorScope(filter);\n    const returnValue = fn();\n    if (returnValue instanceof Promise) {\n      await returnValue;\n    }\n\n    const error = await device.popErrorScope();\n    this.expect(\n      !!error === shouldError,\n      `${error?.message || 'no error when one was expected'}: ${msg}`\n    );\n\n    return returnValue;\n  }\n\n  /** Expect that the provided promise rejects, with the provided exception name. */\n  async shouldRejectConditionally(\n    expectedName: string,\n    p: Promise<unknown>,\n    shouldReject: boolean,\n    msg?: string\n  ): Promise<void> {\n    if (shouldReject) {\n      this.shouldReject(expectedName, p, msg);\n    } else {\n      this.shouldResolve(p, msg);\n    }\n\n    // We need to explicitly wait for the promise because the device may be\n    // destroyed immediately after returning from this function.\n    try {\n      await p;\n    } catch (e) {\n      //\n    }\n  }\n\n  /**\n   * Calls a function that expects a validation error if shouldError is true\n   */\n  async expectValidationError<R>(fn: () => R, shouldError: boolean = true, msg = ''): Promise<R> {\n    return this.expectGPUErrorAsync('validation', fn, shouldError, msg);\n  }\n\n  /**\n   * Calls a function that expects to not generate a validation error\n   */\n  async expectNoValidationError<R>(fn: () => R, msg = ''): Promise<R> {\n    return this.expectGPUErrorAsync('validation', fn, false, msg);\n  }\n\n  /**\n   * Calls a function that might expect a validation error.\n   * if shouldError is true then expect a validation error,\n   * if shouldError is false then ignore out-of-memory errors.\n   */\n  async testForValidationErrorWithPossibleOutOfMemoryError<R>(\n    fn: () => R,\n    shouldError: boolean = true,\n    msg = ''\n  ): Promise<R> {\n    const { device } = this;\n\n    if (!shouldError) {\n      device.pushErrorScope('out-of-memory');\n      const result = fn();\n      await device.popErrorScope();\n      return result;\n    }\n\n    // Validation should fail before out-of-memory so there is no need to check\n    // for out-of-memory here.\n    device.pushErrorScope('validation');\n    const returnValue = fn();\n    const validationError = await device.popErrorScope();\n\n    this.expect(\n      !!validationError,\n      `${validationError?.message || 'no error when one was expected'}: ${msg}`\n    );\n\n    return returnValue;\n  }\n\n  getGroupIndexWGSLForPipelineType(\n    pipelineType: CreatePipelineType | CreatePipelineAsyncType,\n    groupIndex: number\n  ) {\n    switch (pipelineType) {\n      case 'createRenderPipeline':\n      case 'createRenderPipelineAsync':\n        return `\n          @group(${groupIndex}) @binding(0) var<uniform> v: f32;\n          @vertex fn main() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n        `;\n      case 'createComputePipeline':\n      case 'createComputePipelineAsync':\n        return `\n          @group(0) @binding(0) var<storage, read_write> d: f32;\n          @group(${groupIndex}) @binding(0) var<uniform> v: f32;\n          @compute @workgroup_size(1) fn main() {\n            d = v;\n          }\n        `;\n        break;\n    }\n  }\n\n  getBindingIndexWGSLForPipelineType(\n    pipelineType: CreatePipelineType | CreatePipelineAsyncType,\n    bindingIndex: number\n  ) {\n    switch (pipelineType) {\n      case 'createRenderPipeline':\n      case 'createRenderPipelineAsync':\n        return `\n          @group(0) @binding(${bindingIndex}) var<uniform> v: f32;\n          @vertex fn main() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n        `;\n      case 'createComputePipeline':\n      case 'createComputePipelineAsync':\n        return `\n          @group(0) @binding(0) var<storage, read_write> d: f32;\n          @group(0) @binding(${bindingIndex}) var<uniform> v: f32;\n          @compute @workgroup_size(1) fn main() {\n            d = v;\n          }\n        `;\n        break;\n    }\n  }\n\n  createPipeline(createPipelineType: CreatePipelineType, module: GPUShaderModule) {\n    const { device } = this;\n\n    switch (createPipelineType) {\n      case 'createRenderPipeline':\n        return device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n        break;\n      case 'createComputePipeline':\n        return device.createComputePipeline({\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n        break;\n    }\n  }\n\n  createPipelineAsync(createPipelineAsyncType: CreatePipelineAsyncType, module: GPUShaderModule) {\n    const { device } = this;\n\n    switch (createPipelineAsyncType) {\n      case 'createRenderPipelineAsync':\n        return device.createRenderPipelineAsync({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n      case 'createComputePipelineAsync':\n        return device.createComputePipelineAsync({\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n    }\n  }\n\n  /**\n   * Creates an GPURenderCommandsMixin setup with some initial state.\n   */\n  _getGPURenderCommandsMixin(encoderType: RenderEncoderType) {\n    const { device } = this;\n\n    switch (encoderType) {\n      case 'render': {\n        const buffer = device.createBuffer({\n          size: 16,\n          usage: GPUBufferUsage.UNIFORM,\n        });\n\n        const texture = device.createTexture({\n          size: [1, 1],\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        });\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const encoder = device.createCommandEncoder();\n        const mixin = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: texture.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n\n        return {\n          mixin,\n          bindGroup,\n          prep() {\n            mixin.end();\n          },\n          test() {\n            encoder.finish();\n          },\n          cleanup() {\n            buffer.destroy();\n            texture.destroy();\n          },\n        };\n        break;\n      }\n\n      case 'renderBundle': {\n        const buffer = device.createBuffer({\n          size: 16,\n          usage: GPUBufferUsage.UNIFORM,\n        });\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const mixin = device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n\n        return {\n          mixin,\n          bindGroup,\n          prep() {},\n          test() {\n            mixin.finish();\n          },\n          cleanup() {\n            buffer.destroy();\n          },\n        };\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests a method on GPURenderCommandsMixin\n   * The function will be called with the mixin.\n   */\n  async testGPURenderCommandsMixin(\n    encoderType: RenderEncoderType,\n    fn: ({ mixin }: { mixin: GPURenderCommandsMixin }) => void,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    const { mixin, prep, test, cleanup } = this._getGPURenderCommandsMixin(encoderType);\n    fn({ mixin });\n    prep();\n\n    await this.expectValidationError(test, shouldError, msg);\n\n    cleanup();\n  }\n\n  /**\n   * Creates GPUBindingCommandsMixin setup with some initial state.\n   */\n  _getGPUBindingCommandsMixin(encoderType: EncoderType) {\n    const { device } = this;\n\n    switch (encoderType) {\n      case 'compute': {\n        const buffer = device.createBuffer({\n          size: 16,\n          usage: GPUBufferUsage.UNIFORM,\n        });\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.COMPUTE,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const encoder = device.createCommandEncoder();\n        const mixin = encoder.beginComputePass();\n        return {\n          mixin,\n          bindGroup,\n          prep() {\n            mixin.end();\n          },\n          test() {\n            encoder.finish();\n          },\n          cleanup() {\n            buffer.destroy();\n          },\n        };\n        break;\n      }\n      case 'render':\n        return this._getGPURenderCommandsMixin('render');\n      case 'renderBundle':\n        return this._getGPURenderCommandsMixin('renderBundle');\n    }\n  }\n\n  /**\n   * Tests a method on GPUBindingCommandsMixin\n   * The function pass will be called with the mixin and a bindGroup\n   */\n  async testGPUBindingCommandsMixin(\n    encoderType: EncoderType,\n    fn: ({ bindGroup }: { mixin: GPUBindingCommandsMixin; bindGroup: GPUBindGroup }) => void,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    const { mixin, bindGroup, prep, test, cleanup } = this._getGPUBindingCommandsMixin(encoderType);\n    fn({ mixin, bindGroup });\n    prep();\n\n    await this.expectValidationError(test, shouldError, msg);\n\n    cleanup();\n  }\n}\n\n/**\n * Makes a new LimitTest class so that the tests have access to `limit`\n */\nfunction makeLimitTestFixture(limit: GPUSupportedLimit): typeof LimitTestsImpl {\n  class LimitTests extends LimitTestsImpl {\n    limit = limit;\n  }\n\n  return LimitTests;\n}\n\n/**\n * This is to avoid repeating yourself (D.R.Y.) as I ran into that issue multiple times\n * writing these tests where I'd copy a test, need to rename a limit in 3-4 places,\n * forget one place, and then spend 20-30 minutes wondering why the test was failing.\n */\nexport function makeLimitTestGroup(limit: GPUSupportedLimit) {\n  const description = `API Validation Tests for ${limit}.`;\n  const g = makeTestGroup(makeLimitTestFixture(limit));\n  return { g, description, limit };\n}\n"],"mappings":"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"}