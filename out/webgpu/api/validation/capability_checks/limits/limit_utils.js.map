{"version":3,"file":"limit_utils.js","names":["kUnitCaseParamsBuilder","makeTestGroup","keysOf","getGPU","assert","range","reorder","kLimitInfo","kTextureFormatInfo","GPUTestBase","align","CreatePipelineTypes","createRenderPipeline","createRenderPipelineWithFragmentStage","createComputePipeline","kCreatePipelineTypes","RenderEncoderTypes","render","renderBundle","kRenderEncoderTypes","EncoderTypes","compute","kEncoderTypes","BindGroupTests","sameGroup","differentGroups","kBindGroupTests","BindingCombinations","vertex","fragment","vertexAndFragmentWithPossibleVertexStageOverflow","vertexAndFragmentWithPossibleFragmentStageOverflow","kBindingCombinations","getPipelineTypeForBindingCombination","bindingCombination","getBindGroupIndex","bindGroupTest","i","getWGSLBindings","order","storageDefinitionWGSLSnippetFn","numBindings","id","join","computeBytesPerSample","targets","bytesPerSample","format","renderTargetPixelByteCost","renderTargetComponentAlignment","alignedBytesPerSample","getPerStageWGSLForBindingCombinationImpl","bodyFn","extraWGSL","getPerStageWGSLForBindingCombination","usageWGSLSnippetFn","set","getPerStageWGSLForBindingCombinationStorageTextures","LimitModes","defaultLimit","adapterLimit","kLimitModes","MaximumTestValues","atLimit","overLimit","kMaximumTestValueKeys","getMaximumTestValue","limit","testValue","MinimumTestValues","underLimit","kMinimumTestValueKeys","MaximumLimitValueTests","atDefault","underDefault","betweenDefaultAndMaximum","atMaximum","overMaximum","kMaximumLimitValueTestKeys","getLimitValue","maximumLimit","limitValueTest","MinimumLimitValueTests","overDefault","betweenDefaultAndMinimum","atMinimum","underMinimum","kMinimumLimitValueTestKeys","getDefaultLimit","default","kMinimumLimits","Set","kMaximumLimitBaseParams","combine","beginSubcases","kMinimumLimitBaseParams","LimitTestsImpl","_adapter","_device","undefined","init","gpu","requestAdapter","adapter","limits","Number","isNaN","device","requestDeviceWithLimits","requiredLimits","shouldReject","requiredFeatures","requestDevice","getDefaultOrAdapterLimit","limitMode","_getDeviceWithSpecificLimit","requestedLimit","extraLimits","features","extraLimitStr","Object","entries","extraLimit","has","actualLimit","expect","_getDeviceWithRequestedMaximumLimit","_testThenDestroyDevice","deviceAndLimits","fn","shouldError","pushErrorScope","validationError","popErrorScope","outOfMemoryError","internalError","message","destroy","testDeviceWithSpecificLimits","deviceLimitValue","testDeviceWithRequestedMaximumLimits","limitTest","testValueName","inputs","expectGPUErrorAsync","filter","msg","returnValue","Promise","error","shouldRejectConditionally","expectedName","p","shouldResolve","e","expectValidationError","expectNoValidationError","testForValidationErrorWithPossibleOutOfMemoryError","result","getGroupIndexWGSLForPipelineType","pipelineType","groupIndex","getBindingIndexWGSLForPipelineType","bindingIndex","createPipeline","createPipelineType","module","layout","entryPoint","writeMask","createPipelineAsync","createRenderPipelineAsync","createComputePipelineAsync","testCreatePipeline","async","testCreateRenderPipeline","pipelineDescriptor","testMaxComputeWorkgroupSize","axis","kExtraLimits","maxComputeInvocationsPerWorkgroup","size","codePointAt","code","getModuleForWorkgroupSize","_getGPURenderCommandsMixin","encoderType","buffer","trackForCleanup","createBuffer","usage","GPUBufferUsage","UNIFORM","texture","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","createBindGroupLayout","binding","visibility","GPUShaderStage","VERTEX","bindGroup","createBindGroup","resource","encoder","createCommandEncoder","mixin","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","prep","end","test","finish","createRenderBundleEncoder","colorFormats","testGPURenderCommandsMixin","_getGPUBindingCommandsMixin","COMPUTE","beginComputePass","testGPUBindingCommandsMixin","createShaderModule","makeLimitTestFixture","LimitTests","makeLimitTestGroup","description","g"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/limit_utils.ts"],"sourcesContent":["import { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { getGPU } from '../../../../../common/util/navigator_gpu.js';\nimport { assert, range, reorder, ReorderOrder } from '../../../../../common/util/util.js';\nimport { kLimitInfo, kTextureFormatInfo } from '../../../../capability_info.js';\nimport { GPUTestBase } from '../../../../gpu_test.js';\nimport { align } from '../../../../util/math.js';\n\ntype GPUSupportedLimit = keyof GPUSupportedLimits;\n\nconst CreatePipelineTypes = {\n  createRenderPipeline: true,\n  createRenderPipelineWithFragmentStage: true,\n  createComputePipeline: true,\n};\nexport type CreatePipelineType = keyof typeof CreatePipelineTypes;\nexport const kCreatePipelineTypes = keysOf(CreatePipelineTypes);\n\nconst RenderEncoderTypes = {\n  render: true,\n  renderBundle: true,\n};\nexport type RenderEncoderType = keyof typeof RenderEncoderTypes;\nexport const kRenderEncoderTypes = keysOf(RenderEncoderTypes);\n\nconst EncoderTypes = {\n  compute: true,\n  render: true,\n  renderBundle: true,\n};\nexport type EncoderType = keyof typeof EncoderTypes;\nexport const kEncoderTypes = keysOf(EncoderTypes);\n\nconst BindGroupTests = {\n  sameGroup: true,\n  differentGroups: true,\n};\nexport type BindGroupTest = keyof typeof BindGroupTests;\nexport const kBindGroupTests = keysOf(BindGroupTests);\n\nconst BindingCombinations = {\n  vertex: true,\n  fragment: true,\n  vertexAndFragmentWithPossibleVertexStageOverflow: true,\n  vertexAndFragmentWithPossibleFragmentStageOverflow: true,\n  compute: true,\n};\nexport type BindingCombination = keyof typeof BindingCombinations;\nexport const kBindingCombinations = keysOf(BindingCombinations);\n\nexport function getPipelineTypeForBindingCombination(bindingCombination: BindingCombination) {\n  switch (bindingCombination) {\n    case 'vertex':\n      return 'createRenderPipeline';\n    case 'fragment':\n    case 'vertexAndFragmentWithPossibleVertexStageOverflow':\n    case 'vertexAndFragmentWithPossibleFragmentStageOverflow':\n      return 'createRenderPipelineWithFragmentStage';\n    case 'compute':\n      return 'createComputePipeline';\n  }\n}\n\nfunction getBindGroupIndex(bindGroupTest: BindGroupTest, i: number) {\n  switch (bindGroupTest) {\n    case 'sameGroup':\n      return 0;\n    case 'differentGroups':\n      return i % 3;\n  }\n}\n\nfunction getWGSLBindings(\n  order: ReorderOrder,\n  bindGroupTest: BindGroupTest,\n  storageDefinitionWGSLSnippetFn: (i: number, j: number) => string,\n  numBindings: number,\n  id: number\n) {\n  return reorder(\n    order,\n    range(\n      numBindings,\n      i =>\n        `@group(${getBindGroupIndex(\n          bindGroupTest,\n          i\n        )}) @binding(${i}) ${storageDefinitionWGSLSnippetFn(i, id)};`\n    )\n  ).join('\\n        ');\n}\n\n/**\n * Given an array of GPUColorTargetState return the number of bytes per sample\n */\nexport function computeBytesPerSample(targets: GPUColorTargetState[]) {\n  let bytesPerSample = 0;\n  for (const { format } of targets) {\n    const { renderTargetPixelByteCost, renderTargetComponentAlignment } = kTextureFormatInfo[\n      format\n    ];\n    const alignedBytesPerSample = align(bytesPerSample, renderTargetComponentAlignment!);\n    bytesPerSample = alignedBytesPerSample + renderTargetPixelByteCost!;\n  }\n  return bytesPerSample;\n}\n\nexport function getPerStageWGSLForBindingCombinationImpl(\n  bindingCombination: BindingCombination,\n  order: ReorderOrder,\n  bindGroupTest: BindGroupTest,\n  storageDefinitionWGSLSnippetFn: (i: number, j: number) => string,\n  bodyFn: (numBindings: number, set: number) => string,\n  numBindings: number,\n  extraWGSL = ''\n) {\n  switch (bindingCombination) {\n    case 'vertex':\n      return `\n        ${extraWGSL}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings, 0)}\n\n        @vertex fn mainVS() -> @builtin(position) vec4f {\n          ${bodyFn(numBindings, 0)}\n          return vec4f(0);\n        }\n      `;\n    case 'fragment':\n      return `\n        ${extraWGSL}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings, 0)}\n\n        @vertex fn mainVS() -> @builtin(position) vec4f {\n          return vec4f(0);\n        }\n\n        @fragment fn mainFS() {\n          ${bodyFn(numBindings, 0)}\n        }\n      `;\n    case 'vertexAndFragmentWithPossibleVertexStageOverflow': {\n      return `\n        ${extraWGSL}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings, 0)}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings - 1, 1)}\n\n        @vertex fn mainVS() -> @builtin(position) vec4f {\n          ${bodyFn(numBindings, 0)}\n          return vec4f(0);\n        }\n\n        @fragment fn mainFS() {\n          ${bodyFn(numBindings - 1, 1)}\n        }\n      `;\n    }\n    case 'vertexAndFragmentWithPossibleFragmentStageOverflow': {\n      return `\n        ${extraWGSL}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings - 1, 0)}\n\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings, 1)}\n\n        @vertex fn mainVS() -> @builtin(position) vec4f {\n          ${bodyFn(numBindings - 1, 0)}\n          return vec4f(0);\n        }\n\n        @fragment fn mainFS() {\n          ${bodyFn(numBindings, 1)}\n        }\n      `;\n    }\n    case 'compute':\n      return `\n        ${extraWGSL}\n        ${getWGSLBindings(order, bindGroupTest, storageDefinitionWGSLSnippetFn, numBindings, 0)}\n        @group(3) @binding(0) var<storage, read_write> d: f32;\n        @compute @workgroup_size(1) fn main() {\n          ${bodyFn(numBindings, 0)}\n        }\n      `;\n      break;\n  }\n}\n\nexport function getPerStageWGSLForBindingCombination(\n  bindingCombination: BindingCombination,\n  order: ReorderOrder,\n  bindGroupTest: BindGroupTest,\n  storageDefinitionWGSLSnippetFn: (i: number, j: number) => string,\n  usageWGSLSnippetFn: (i: number, j: number) => string,\n  numBindings: number,\n  extraWGSL = ''\n) {\n  return getPerStageWGSLForBindingCombinationImpl(\n    bindingCombination,\n    order,\n    bindGroupTest,\n    storageDefinitionWGSLSnippetFn,\n    (numBindings: number, set: number) =>\n      `${range(numBindings, i => usageWGSLSnippetFn(i, set)).join('\\n          ')}`,\n    numBindings,\n    extraWGSL\n  );\n}\n\nexport function getPerStageWGSLForBindingCombinationStorageTextures(\n  bindingCombination: BindingCombination,\n  order: ReorderOrder,\n  bindGroupTest: BindGroupTest,\n  storageDefinitionWGSLSnippetFn: (i: number, j: number) => string,\n  usageWGSLSnippetFn: (i: number, j: number) => string,\n  numBindings: number,\n  extraWGSL = ''\n) {\n  return getPerStageWGSLForBindingCombinationImpl(\n    bindingCombination,\n    order,\n    bindGroupTest,\n    storageDefinitionWGSLSnippetFn,\n    (numBindings: number, set: number) =>\n      `${range(numBindings, i => usageWGSLSnippetFn(i, set)).join('\\n          ')};`,\n    numBindings,\n    extraWGSL\n  );\n}\n\nconst LimitModes = {\n  defaultLimit: true,\n  adapterLimit: true,\n};\nexport type LimitMode = keyof typeof LimitModes;\nexport const kLimitModes = keysOf(LimitModes);\nexport type LimitsRequest = Record<string, LimitMode>;\n\nexport const MaximumTestValues = {\n  atLimit: true,\n  overLimit: true,\n};\nexport type MaximumTestValue = keyof typeof MaximumTestValues;\nexport const kMaximumTestValueKeys = keysOf(MaximumTestValues);\n\nexport function getMaximumTestValue(limit: number, testValue: MaximumTestValue) {\n  switch (testValue) {\n    case 'atLimit':\n      return limit;\n    case 'overLimit':\n      return limit + 1;\n  }\n}\n\nexport const MinimumTestValues = {\n  atLimit: true,\n  underLimit: true,\n};\nexport type MinimumTestValue = keyof typeof MinimumTestValues;\nexport const kMinimumTestValueKeys = keysOf(MinimumTestValues);\n\nexport const MaximumLimitValueTests = {\n  atDefault: true,\n  underDefault: true,\n  betweenDefaultAndMaximum: true,\n  atMaximum: true,\n  overMaximum: true,\n};\nexport type MaximumLimitValueTest = keyof typeof MaximumLimitValueTests;\nexport const kMaximumLimitValueTestKeys = keysOf(MaximumLimitValueTests);\n\nexport function getLimitValue(\n  defaultLimit: number,\n  maximumLimit: number,\n  limitValueTest: MaximumLimitValueTest\n) {\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'underDefault':\n      return defaultLimit - 1;\n    case 'betweenDefaultAndMaximum':\n      return ((defaultLimit + maximumLimit) / 2) | 0;\n    case 'atMaximum':\n      return maximumLimit;\n    case 'overMaximum':\n      return maximumLimit + 1;\n  }\n}\n\nexport const MinimumLimitValueTests = {\n  atDefault: true,\n  overDefault: true,\n  betweenDefaultAndMinimum: true,\n  atMinimum: true,\n  underMinimum: true,\n};\nexport type MinimumLimitValueTest = keyof typeof MinimumLimitValueTests;\nexport const kMinimumLimitValueTestKeys = keysOf(MinimumLimitValueTests);\n\nexport function getDefaultLimit(limit: GPUSupportedLimit): number {\n  return (kLimitInfo as Record<string, { default: number }>)[limit].default;\n}\n\nexport type DeviceAndLimits = {\n  device: GPUDevice;\n  defaultLimit: number;\n  adapterLimit: number;\n  requestedLimit: number;\n  actualLimit: number;\n};\n\nexport type SpecificLimitTestInputs = DeviceAndLimits & {\n  testValue: number;\n  shouldError: boolean;\n};\n\nexport type MaximumLimitTestInputs = SpecificLimitTestInputs & {\n  testValueName: MaximumTestValue;\n};\n\nconst kMinimumLimits = new Set<GPUSupportedLimit>([\n  'minUniformBufferOffsetAlignment',\n  'minStorageBufferOffsetAlignment',\n]);\n\n/**\n * Adds the default parameters to a limit test\n */\nexport const kMaximumLimitBaseParams = kUnitCaseParamsBuilder\n  .combine('limitTest', kMaximumLimitValueTestKeys)\n  .beginSubcases()\n  .combine('testValueName', kMaximumTestValueKeys);\n\nexport const kMinimumLimitBaseParams = kUnitCaseParamsBuilder\n  .combine('limitTest', kMinimumLimitValueTestKeys)\n  .beginSubcases()\n  .combine('testValueName', kMinimumTestValueKeys);\n\nexport class LimitTestsImpl extends GPUTestBase {\n  _adapter: GPUAdapter | null = null;\n  _device: GPUDevice | undefined = undefined;\n  limit: GPUSupportedLimit = '' as GPUSupportedLimit;\n  defaultLimit = 0;\n  adapterLimit = 0;\n\n  async init() {\n    await super.init();\n    const gpu = getGPU();\n    this._adapter = await gpu.requestAdapter();\n    const limit = this.limit;\n    this.defaultLimit = getDefaultLimit(limit);\n    this.adapterLimit = this.adapter.limits[limit] as number;\n    assert(!Number.isNaN(this.defaultLimit));\n    assert(!Number.isNaN(this.adapterLimit));\n  }\n\n  get adapter(): GPUAdapter {\n    assert(this._adapter !== undefined);\n    return this._adapter!;\n  }\n\n  get device(): GPUDevice {\n    assert(this._device !== undefined, 'device is only valid in _testThenDestroyDevice callback');\n    return this._device;\n  }\n\n  async requestDeviceWithLimits(\n    adapter: GPUAdapter,\n    requiredLimits: Record<string, number>,\n    shouldReject: boolean,\n    requiredFeatures?: GPUFeatureName[]\n  ) {\n    if (shouldReject) {\n      this.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n      return undefined;\n    } else {\n      return await adapter.requestDevice({ requiredLimits, requiredFeatures });\n    }\n  }\n\n  getDefaultOrAdapterLimit(limit: GPUSupportedLimit, limitMode: LimitMode) {\n    switch (limitMode) {\n      case 'defaultLimit':\n        return getDefaultLimit(limit);\n      case 'adapterLimit':\n        return this.adapter.limits[limit];\n    }\n  }\n\n  /**\n   * Gets a device with the adapter a requested limit and checks that that limit\n   * is correct or that the device failed to create if the requested limit is\n   * beyond the maximum supported by the device.\n   */\n  async _getDeviceWithSpecificLimit(\n    requestedLimit: number,\n    extraLimits?: LimitsRequest,\n    features?: GPUFeatureName[]\n  ): Promise<DeviceAndLimits | undefined> {\n    const { adapter, limit, adapterLimit, defaultLimit } = this;\n\n    const requiredLimits: Record<string, number> = {};\n    requiredLimits[limit] = requestedLimit;\n\n    if (extraLimits) {\n      for (const [extraLimitStr, limitMode] of Object.entries(extraLimits)) {\n        const extraLimit = extraLimitStr as GPUSupportedLimit;\n        requiredLimits[extraLimit] =\n          limitMode === 'defaultLimit'\n            ? getDefaultLimit(extraLimit)\n            : (adapter.limits[extraLimit] as number);\n      }\n    }\n\n    const shouldReject = kMinimumLimits.has(limit)\n      ? requestedLimit < adapterLimit\n      : requestedLimit > adapterLimit;\n\n    const device = await this.requestDeviceWithLimits(\n      adapter,\n      requiredLimits,\n      shouldReject,\n      features\n    );\n    const actualLimit = (device ? device.limits[limit] : 0) as number;\n\n    if (shouldReject) {\n      this.expect(!device, 'expected no device');\n    } else {\n      if (kMinimumLimits.has(limit)) {\n        if (requestedLimit <= defaultLimit) {\n          this.expect(\n            actualLimit === requestedLimit,\n            `expected actual actualLimit: ${actualLimit} to equal defaultLimit: ${requestedLimit}`\n          );\n        } else {\n          this.expect(\n            actualLimit === defaultLimit,\n            `expected actual actualLimit: ${actualLimit} to equal defaultLimit: ${defaultLimit}`\n          );\n        }\n      } else {\n        if (requestedLimit <= defaultLimit) {\n          this.expect(\n            actualLimit === defaultLimit,\n            `expected actual actualLimit: ${actualLimit} to equal defaultLimit: ${defaultLimit}`\n          );\n        } else {\n          this.expect(\n            actualLimit === requestedLimit,\n            `expected actual actualLimit: ${actualLimit} to equal requestedLimit: ${requestedLimit}`\n          );\n        }\n      }\n    }\n\n    return device ? { device, defaultLimit, adapterLimit, requestedLimit, actualLimit } : undefined;\n  }\n\n  /**\n   * Gets a device with the adapter a requested limit and checks that that limit\n   * is correct or that the device failed to create if the requested limit is\n   * beyond the maximum supported by the device.\n   */\n  async _getDeviceWithRequestedMaximumLimit(\n    limitValueTest: MaximumLimitValueTest,\n    extraLimits?: LimitsRequest,\n    features?: GPUFeatureName[]\n  ): Promise<DeviceAndLimits | undefined> {\n    const { defaultLimit, adapterLimit: maximumLimit } = this;\n\n    const requestedLimit = getLimitValue(defaultLimit, maximumLimit, limitValueTest);\n    return this._getDeviceWithSpecificLimit(requestedLimit, extraLimits, features);\n  }\n\n  /**\n   * Call the given function and check no WebGPU errors are leaked.\n   */\n  async _testThenDestroyDevice(\n    deviceAndLimits: DeviceAndLimits,\n    testValue: number,\n    fn: (inputs: SpecificLimitTestInputs) => void | Promise<void>\n  ) {\n    assert(!this._device);\n\n    const { device, actualLimit } = deviceAndLimits;\n    this._device = device;\n\n    const shouldError = kMinimumLimits.has(this.limit)\n      ? testValue < actualLimit\n      : testValue > actualLimit;\n\n    device.pushErrorScope('internal');\n    device.pushErrorScope('out-of-memory');\n    device.pushErrorScope('validation');\n\n    await fn({ ...deviceAndLimits, testValue, shouldError });\n\n    const validationError = await device.popErrorScope();\n    const outOfMemoryError = await device.popErrorScope();\n    const internalError = await device.popErrorScope();\n\n    this.expect(!validationError, `unexpected validation error: ${validationError?.message || ''}`);\n    this.expect(\n      !outOfMemoryError,\n      `unexpected out-of-memory error: ${outOfMemoryError?.message || ''}`\n    );\n    this.expect(!internalError, `unexpected internal error: ${internalError?.message || ''}`);\n\n    device.destroy();\n    this._device = undefined;\n  }\n\n  /**\n   * Creates a device with a specific limit.\n   * If the limit of over the maximum we expect an exception\n   * If the device is created then we call a test function, checking\n   * that the function does not leak any GPU errors.\n   */\n  async testDeviceWithSpecificLimits(\n    deviceLimitValue: number,\n    testValue: number,\n    fn: (inputs: SpecificLimitTestInputs) => void | Promise<void>,\n    extraLimits?: LimitsRequest,\n    features?: GPUFeatureName[]\n  ) {\n    assert(!this._device);\n\n    const deviceAndLimits = await this._getDeviceWithSpecificLimit(\n      deviceLimitValue,\n      extraLimits,\n      features\n    );\n    // If we request over the limit requestDevice will throw\n    if (!deviceAndLimits) {\n      return;\n    }\n\n    await this._testThenDestroyDevice(deviceAndLimits, testValue, fn);\n  }\n\n  /**\n   * Creates a device with the limit defined by LimitValueTest.\n   * If the limit of over the maximum we expect an exception\n   * If the device is created then we call a test function, checking\n   * that the function does not leak any GPU errors.\n   */\n  async testDeviceWithRequestedMaximumLimits(\n    limitTest: MaximumLimitValueTest,\n    testValueName: MaximumTestValue,\n    fn: (inputs: MaximumLimitTestInputs) => void | Promise<void>,\n    extraLimits?: LimitsRequest\n  ) {\n    assert(!this._device);\n\n    const deviceAndLimits = await this._getDeviceWithRequestedMaximumLimit(limitTest, extraLimits);\n    // If we request over the limit requestDevice will throw\n    if (!deviceAndLimits) {\n      return;\n    }\n\n    const { actualLimit } = deviceAndLimits;\n    const testValue = getMaximumTestValue(actualLimit, testValueName);\n\n    await this._testThenDestroyDevice(\n      deviceAndLimits,\n      testValue,\n      async (inputs: SpecificLimitTestInputs) => {\n        await fn({ ...inputs, testValueName });\n      }\n    );\n  }\n\n  /**\n   * Calls a function that expects a GPU error if shouldError is true\n   */\n  // MAINTENANCE_TODO: Remove this duplicated code with GPUTest if possible\n  async expectGPUErrorAsync<R>(\n    filter: GPUErrorFilter,\n    fn: () => R,\n    shouldError: boolean = true,\n    msg = ''\n  ): Promise<R> {\n    const { device } = this;\n\n    device.pushErrorScope(filter);\n    const returnValue = fn();\n    if (returnValue instanceof Promise) {\n      await returnValue;\n    }\n\n    const error = await device.popErrorScope();\n    this.expect(\n      !!error === shouldError,\n      `${error?.message || 'no error when one was expected'}: ${msg}`\n    );\n\n    return returnValue;\n  }\n\n  /** Expect that the provided promise rejects, with the provided exception name. */\n  async shouldRejectConditionally(\n    expectedName: string,\n    p: Promise<unknown>,\n    shouldReject: boolean,\n    msg?: string\n  ): Promise<void> {\n    if (shouldReject) {\n      this.shouldReject(expectedName, p, msg);\n    } else {\n      this.shouldResolve(p, msg);\n    }\n\n    // We need to explicitly wait for the promise because the device may be\n    // destroyed immediately after returning from this function.\n    try {\n      await p;\n    } catch (e) {\n      //\n    }\n  }\n\n  /**\n   * Calls a function that expects a validation error if shouldError is true\n   */\n  async expectValidationError<R>(fn: () => R, shouldError: boolean = true, msg = ''): Promise<R> {\n    return this.expectGPUErrorAsync('validation', fn, shouldError, msg);\n  }\n\n  /**\n   * Calls a function that expects to not generate a validation error\n   */\n  async expectNoValidationError<R>(fn: () => R, msg = ''): Promise<R> {\n    return this.expectGPUErrorAsync('validation', fn, false, msg);\n  }\n\n  /**\n   * Calls a function that might expect a validation error.\n   * if shouldError is true then expect a validation error,\n   * if shouldError is false then ignore out-of-memory errors.\n   */\n  async testForValidationErrorWithPossibleOutOfMemoryError<R>(\n    fn: () => R,\n    shouldError: boolean = true,\n    msg = ''\n  ): Promise<R> {\n    const { device } = this;\n\n    if (!shouldError) {\n      device.pushErrorScope('out-of-memory');\n      const result = fn();\n      await device.popErrorScope();\n      return result;\n    }\n\n    // Validation should fail before out-of-memory so there is no need to check\n    // for out-of-memory here.\n    device.pushErrorScope('validation');\n    const returnValue = fn();\n    const validationError = await device.popErrorScope();\n\n    this.expect(\n      !!validationError,\n      `${validationError?.message || 'no error when one was expected'}: ${msg}`\n    );\n\n    return returnValue;\n  }\n\n  getGroupIndexWGSLForPipelineType(pipelineType: CreatePipelineType, groupIndex: number) {\n    switch (pipelineType) {\n      case 'createRenderPipeline':\n        return `\n          @group(${groupIndex}) @binding(0) var<uniform> v: f32;\n          @vertex fn mainVS() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n        `;\n      case 'createRenderPipelineWithFragmentStage':\n        return `\n          @group(${groupIndex}) @binding(0) var<uniform> v: f32;\n          @vertex fn mainVS() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n          @fragment fn mainFS() -> @location(0) vec4f {\n            return vec4f(1);\n          }\n        `;\n      case 'createComputePipeline':\n        return `\n          @group(${groupIndex}) @binding(0) var<uniform> v: f32;\n          @compute @workgroup_size(1) fn main() {\n            _ = v;\n          }\n        `;\n        break;\n    }\n  }\n\n  getBindingIndexWGSLForPipelineType(pipelineType: CreatePipelineType, bindingIndex: number) {\n    switch (pipelineType) {\n      case 'createRenderPipeline':\n        return `\n          @group(0) @binding(${bindingIndex}) var<uniform> v: f32;\n          @vertex fn mainVS() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n        `;\n      case 'createRenderPipelineWithFragmentStage':\n        return `\n          @group(0) @binding(${bindingIndex}) var<uniform> v: f32;\n          @vertex fn mainVS() -> @builtin(position) vec4f {\n            return vec4f(v);\n          }\n          @fragment fn mainFS() -> @location(0) vec4f {\n            return vec4f(1);\n          }\n        `;\n      case 'createComputePipeline':\n        return `\n          @group(0) @binding(${bindingIndex}) var<uniform> v: f32;\n          @compute @workgroup_size(1) fn main() {\n            _ = v;\n          }\n        `;\n        break;\n    }\n  }\n\n  createPipeline(createPipelineType: CreatePipelineType, module: GPUShaderModule) {\n    const { device } = this;\n\n    switch (createPipelineType) {\n      case 'createRenderPipeline':\n        return device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'mainVS',\n          },\n        });\n        break;\n      case 'createRenderPipelineWithFragmentStage':\n        return device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'mainVS',\n          },\n          fragment: {\n            module,\n            entryPoint: 'mainFS',\n            targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n          },\n        });\n        break;\n      case 'createComputePipeline':\n        return device.createComputePipeline({\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n        break;\n    }\n  }\n\n  createPipelineAsync(createPipelineType: CreatePipelineType, module: GPUShaderModule) {\n    const { device } = this;\n\n    switch (createPipelineType) {\n      case 'createRenderPipeline':\n        return device.createRenderPipelineAsync({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'mainVS',\n          },\n        });\n      case 'createRenderPipelineWithFragmentStage':\n        return device.createRenderPipelineAsync({\n          layout: 'auto',\n          vertex: {\n            module,\n            entryPoint: 'mainVS',\n          },\n          fragment: {\n            module,\n            entryPoint: 'mainFS',\n            targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n          },\n        });\n      case 'createComputePipeline':\n        return device.createComputePipelineAsync({\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n    }\n  }\n\n  async testCreatePipeline(\n    createPipelineType: CreatePipelineType,\n    async: boolean,\n    module: GPUShaderModule,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    if (async) {\n      await this.expectValidationError(\n        () => {\n          this.createPipeline(createPipelineType, module);\n        },\n        shouldError,\n        msg\n      );\n    } else {\n      await this.shouldRejectConditionally(\n        'GPUPipelineError',\n        this.createPipelineAsync(createPipelineType, module),\n        shouldError,\n        msg\n      );\n    }\n  }\n\n  async testCreateRenderPipeline(\n    pipelineDescriptor: GPURenderPipelineDescriptor,\n    async: boolean,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    const { device } = this;\n    if (async) {\n      await this.shouldRejectConditionally(\n        'GPUPipelineError',\n        device.createRenderPipelineAsync(pipelineDescriptor),\n        shouldError,\n        msg\n      );\n    } else {\n      await this.expectValidationError(\n        () => {\n          device.createRenderPipeline(pipelineDescriptor);\n        },\n        shouldError,\n        msg\n      );\n    }\n  }\n\n  async testMaxComputeWorkgroupSize(\n    limitTest: MaximumLimitValueTest,\n    testValueName: MaximumTestValue,\n    async: boolean,\n    axis: 'X' | 'Y' | 'Z'\n  ) {\n    const kExtraLimits: LimitsRequest = {\n      maxComputeInvocationsPerWorkgroup: 'adapterLimit',\n    };\n\n    await this.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        if (testValue > device.limits.maxComputeInvocationsPerWorkgroup) {\n          return;\n        }\n\n        const size = [1, 1, 1];\n        size[axis.codePointAt(0)! - 'X'.codePointAt(0)!] = testValue;\n        const { module, code } = this.getModuleForWorkgroupSize(size);\n\n        await this.testCreatePipeline(\n          'createComputePipeline',\n          async,\n          module,\n          shouldError,\n          `size: ${testValue}, limit: ${actualLimit}\\n${code}`\n        );\n      },\n      kExtraLimits\n    );\n  }\n\n  /**\n   * Creates an GPURenderCommandsMixin setup with some initial state.\n   */\n  _getGPURenderCommandsMixin(encoderType: RenderEncoderType) {\n    const { device } = this;\n\n    switch (encoderType) {\n      case 'render': {\n        const buffer = this.trackForCleanup(\n          device.createBuffer({\n            size: 16,\n            usage: GPUBufferUsage.UNIFORM,\n          })\n        );\n\n        const texture = this.trackForCleanup(\n          device.createTexture({\n            size: [1, 1],\n            format: 'rgba8unorm',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          })\n        );\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const encoder = device.createCommandEncoder();\n        const mixin = encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: texture.createView(),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n\n        return {\n          mixin,\n          bindGroup,\n          prep() {\n            mixin.end();\n          },\n          test() {\n            encoder.finish();\n          },\n        };\n        break;\n      }\n\n      case 'renderBundle': {\n        const buffer = this.trackForCleanup(\n          device.createBuffer({\n            size: 16,\n            usage: GPUBufferUsage.UNIFORM,\n          })\n        );\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const mixin = device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n\n        return {\n          mixin,\n          bindGroup,\n          prep() {},\n          test() {\n            mixin.finish();\n          },\n        };\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests a method on GPURenderCommandsMixin\n   * The function will be called with the mixin.\n   */\n  async testGPURenderCommandsMixin(\n    encoderType: RenderEncoderType,\n    fn: ({ mixin }: { mixin: GPURenderCommandsMixin }) => void,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    const { mixin, prep, test } = this._getGPURenderCommandsMixin(encoderType);\n    fn({ mixin });\n    prep();\n\n    await this.expectValidationError(test, shouldError, msg);\n  }\n\n  /**\n   * Creates GPUBindingCommandsMixin setup with some initial state.\n   */\n  _getGPUBindingCommandsMixin(encoderType: EncoderType) {\n    const { device } = this;\n\n    switch (encoderType) {\n      case 'compute': {\n        const buffer = this.trackForCleanup(\n          device.createBuffer({\n            size: 16,\n            usage: GPUBufferUsage.UNIFORM,\n          })\n        );\n\n        const layout = device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.COMPUTE,\n              buffer: {},\n            },\n          ],\n        });\n\n        const bindGroup = device.createBindGroup({\n          layout,\n          entries: [\n            {\n              binding: 0,\n              resource: { buffer },\n            },\n          ],\n        });\n\n        const encoder = device.createCommandEncoder();\n        const mixin = encoder.beginComputePass();\n        return {\n          mixin,\n          bindGroup,\n          prep() {\n            mixin.end();\n          },\n          test() {\n            encoder.finish();\n          },\n        };\n        break;\n      }\n      case 'render':\n        return this._getGPURenderCommandsMixin('render');\n      case 'renderBundle':\n        return this._getGPURenderCommandsMixin('renderBundle');\n    }\n  }\n\n  /**\n   * Tests a method on GPUBindingCommandsMixin\n   * The function pass will be called with the mixin and a bindGroup\n   */\n  async testGPUBindingCommandsMixin(\n    encoderType: EncoderType,\n    fn: ({ bindGroup }: { mixin: GPUBindingCommandsMixin; bindGroup: GPUBindGroup }) => void,\n    shouldError: boolean,\n    msg = ''\n  ) {\n    const { mixin, bindGroup, prep, test } = this._getGPUBindingCommandsMixin(encoderType);\n    fn({ mixin, bindGroup });\n    prep();\n\n    await this.expectValidationError(test, shouldError, msg);\n  }\n\n  getModuleForWorkgroupSize(size: number[]) {\n    const { device } = this;\n    const code = `\n      @group(0) @binding(0) var<storage, read_write> d: f32;\n      @compute @workgroup_size(${size.join(',')}) fn main() {\n        d = 0;\n      }\n    `;\n    const module = device.createShaderModule({ code });\n    return { module, code };\n  }\n}\n\n/**\n * Makes a new LimitTest class so that the tests have access to `limit`\n */\nfunction makeLimitTestFixture(limit: GPUSupportedLimit): typeof LimitTestsImpl {\n  class LimitTests extends LimitTestsImpl {\n    limit = limit;\n  }\n\n  return LimitTests;\n}\n\n/**\n * This is to avoid repeating yourself (D.R.Y.) as I ran into that issue multiple times\n * writing these tests where I'd copy a test, need to rename a limit in 3-4 places,\n * forget one place, and then spend 20-30 minutes wondering why the test was failing.\n */\nexport function makeLimitTestGroup(limit: GPUSupportedLimit) {\n  const description = `API Validation Tests for ${limit}.`;\n  const g = makeTestGroup(makeLimitTestFixture(limit));\n  return { g, description, limit };\n}\n"],"mappings":"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"}