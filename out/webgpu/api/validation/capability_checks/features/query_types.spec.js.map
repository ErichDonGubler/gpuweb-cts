{"version":3,"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/query_types.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","params","u","combine","beforeAllSubcases","t","featureContainsTimestampQuery","requiredFeatures","push","selectDeviceOrSkipTestCase","fn","type","count","shouldException","shouldThrow","device","createQuerySet"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,GARA;;AAUGC,MAVH,CAUU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,MADX,EACmB,CAAC,WAAD,EAAc,WAAd,CADnB;AAEGA,OAFH,CAEW,+BAFX,EAE4C,CAAC,KAAD,EAAQ,IAAR,CAF5C,CAXJ;;AAeGC,iBAfH,CAeqB,CAAAC,CAAC,KAAI;AACtB,QAAM,EAAEC,6BAAF,KAAoCD,CAAC,CAACJ,MAA5C;;AAEA,QAAMM,gBAAkC,GAAG,EAA3C;AACA,MAAID,6BAAJ,EAAmC;AACjCC,IAAAA,gBAAgB,CAACC,IAAjB,CAAsB,iBAAtB;AACD;;AAEDH,EAAAA,CAAC,CAACI,0BAAF,CAA6B,EAAEF,gBAAF,EAA7B;AACD,CAxBH;AAyBGG,EAzBH,CAyBM,OAAML,CAAN,KAAW;AACb,QAAM,EAAEM,IAAF,EAAQL,6BAAR,KAA0CD,CAAC,CAACJ,MAAlD;;AAEA,QAAMW,KAAK,GAAG,CAAd;AACA,QAAMC,eAAe,GAAGF,IAAI,KAAK,WAAT,IAAwB,CAACL,6BAAjD;;AAEAD,EAAAA,CAAC,CAACS,WAAF,CAAcD,eAAe,GAAG,WAAH,GAAiB,KAA9C,EAAqD,MAAM;AACzDR,IAAAA,CAAC,CAACU,MAAF,CAASC,cAAT,CAAwB,EAAEL,IAAF,EAAQC,KAAR,EAAxB;AACD,GAFD;AAGD,CAlCH","sourcesContent":["export const description = `\nTests for capability checking for features enabling optional query types.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('createQuerySet')\n  .desc(\n    `\n  Tests that creating a query set throws a type error exception if the features don't contain\n  'timestamp-query'.\n    - createQuerySet\n      - type {occlusion, timestamp}\n      - x= {pipeline statistics, timestamp} query {enable, disable}\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', ['occlusion', 'timestamp'] as const)\n      .combine('featureContainsTimestampQuery', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { featureContainsTimestampQuery } = t.params;\n\n    const requiredFeatures: GPUFeatureName[] = [];\n    if (featureContainsTimestampQuery) {\n      requiredFeatures.push('timestamp-query');\n    }\n\n    t.selectDeviceOrSkipTestCase({ requiredFeatures });\n  })\n  .fn(async t => {\n    const { type, featureContainsTimestampQuery } = t.params;\n\n    const count = 1;\n    const shouldException = type === 'timestamp' && !featureContainsTimestampQuery;\n\n    t.shouldThrow(shouldException ? 'TypeError' : false, () => {\n      t.device.createQuerySet({ type, count });\n    });\n  });\n"],"file":"query_types.spec.js"}