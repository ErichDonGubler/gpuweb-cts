{"version":3,"sources":["../../../src/webgpu/util/device_pool.ts"],"names":["SkipTestCase","attemptGarbageCollection","getGPU","assert","raceWithRejectOnTimeout","assertReject","kLimitInfo","kLimits","TestFailedButDeviceReusable","Error","FeaturesNotSupported","TestOOMedShouldAttemptGC","DevicePool","holders","reserve","descriptor","errorMessage","DescriptorToHolderMap","getOrCreate","undefined","ex","name","message","holder","state","release","DeviceHolder","ensureRelease","lostInfo","reason","delete","device","destroy","releaseGPUDevice","expectedDeviceLost","expectedLostReason","unsupported","Set","Map","k","v","uncanonicalizedDescriptor","key","canonicalizeDescriptor","has","JSON","stringify","value","get","set","create","add","insertAndCleanUp","kMaxEntries","size","desc","featuresCanonicalized","requiredFeatures","Array","from","sort","limitsCanonicalized","requiredLimits","limit","requestedValue","defaultValue","default","descriptorCanonicalized","defaultQueue","supportsFeature","adapter","feature","features","gpu","requestAdapter","requestDevice","constructor","_device","lost","then","ev","acquire","pushErrorScope","expectDeviceLost","kPopErrorScopeTimeoutMS","gpuValidationError","gpuOutOfMemoryError","queue","submit","popErrorScope","onSubmittedWorkDone","GPUValidationError","GPUOutOfMemoryError"],"mappings":"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","sourcesContent":["import { SkipTestCase } from '../../common/framework/fixture.js';\nimport { attemptGarbageCollection } from '../../common/util/collect_garbage.js';\nimport { getGPU } from '../../common/util/navigator_gpu.js';\nimport { assert, raceWithRejectOnTimeout, assertReject } from '../../common/util/util.js';\nimport { kLimitInfo, kLimits } from '../capability_info.js';\n\nexport interface DeviceProvider {\n  acquire(): GPUDevice;\n  expectDeviceLost(reason: GPUDeviceLostReason): void;\n}\n\nclass TestFailedButDeviceReusable extends Error {}\nclass FeaturesNotSupported extends Error {}\nexport class TestOOMedShouldAttemptGC extends Error {}\n\nexport class DevicePool {\n  private holders: 'uninitialized' | 'failed' | DescriptorToHolderMap = 'uninitialized';\n\n  /** Request a device from the pool. */\n  async reserve(descriptor?: UncanonicalizedDeviceDescriptor): Promise<DeviceProvider> {\n    let errorMessage = '';\n    if (this.holders === 'uninitialized') {\n      this.holders = new DescriptorToHolderMap();\n      try {\n        await this.holders.getOrCreate(undefined);\n      } catch (ex) {\n        this.holders = 'failed';\n        if (ex instanceof Error) {\n          errorMessage = ` with ${ex.name} \"${ex.message}\"`;\n        }\n      }\n    }\n\n    assert(\n      this.holders !== 'failed',\n      `WebGPU device failed to initialize${errorMessage}; not retrying`\n    );\n\n    const holder = await this.holders.getOrCreate(descriptor);\n\n    assert(holder.state === 'free', 'Device was in use on DevicePool.acquire');\n    holder.state = 'reserved';\n    return holder;\n  }\n\n  // When a test is done using a device, it's released back into the pool.\n  // This waits for error scopes, checks their results, and checks for various error conditions.\n  async release(holder: DeviceProvider): Promise<void> {\n    assert(this.holders instanceof DescriptorToHolderMap, 'DevicePool got into a bad state');\n    assert(holder instanceof DeviceHolder, 'DeviceProvider should always be a DeviceHolder');\n\n    assert(holder.state !== 'free', 'trying to release a device while already released');\n\n    try {\n      await holder.ensureRelease();\n\n      // (Hopefully if the device was lost, it has been reported by the time endErrorScopes()\n      // has finished (or timed out). If not, it could cause a finite number of extra test\n      // failures following this one (but should recover eventually).)\n      assert(\n        holder.lostInfo === undefined,\n        `Device was unexpectedly lost. Reason: ${holder.lostInfo?.reason}, Message: ${holder.lostInfo?.message}`\n      );\n    } catch (ex) {\n      // Any error that isn't explicitly TestFailedButDeviceReusable forces a new device to be\n      // created for the next test.\n      if (!(ex instanceof TestFailedButDeviceReusable)) {\n        this.holders.delete(holder);\n        if ('destroy' in holder.device) {\n          holder.device.destroy();\n        }\n\n        // Release the (hopefully only) ref to the GPUDevice.\n        holder.releaseGPUDevice();\n\n        // Try to clean up, in case there are stray GPU resources in need of collection.\n        if (ex instanceof TestOOMedShouldAttemptGC) {\n          await attemptGarbageCollection();\n        }\n      }\n      // In the try block, we may throw an error if the device is lost in order to force device\n      // reinitialization, however, if the device lost was expected we want to suppress the error\n      // The device lost is expected when `holder.expectedLostReason` is equal to\n      // `holder.lostInfo.reason`.\n      const expectedDeviceLost =\n        holder.expectedLostReason !== undefined &&\n        holder.lostInfo !== undefined &&\n        holder.expectedLostReason === holder.lostInfo.reason;\n      if (!expectedDeviceLost) {\n        throw ex;\n      }\n    } finally {\n      // Mark the holder as free. (This only has an effect if the pool still has the holder.)\n      // This could be done at the top but is done here to guard against async-races during release.\n      holder.state = 'free';\n    }\n  }\n}\n\n/**\n * Map from GPUDeviceDescriptor to DeviceHolder.\n */\nclass DescriptorToHolderMap {\n  /** Map keys that are known to be unsupported and can be rejected quickly. */\n  private unsupported: Set<string> = new Set();\n  private holders: Map<string, DeviceHolder> = new Map();\n\n  /** Deletes an item from the map by DeviceHolder value. */\n  delete(device: DeviceHolder): void {\n    for (const [k, v] of this.holders) {\n      if (v === device) {\n        this.holders.delete(k);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Gets a DeviceHolder from the map if it exists; otherwise, calls create() to create one,\n   * inserts it, and returns it.\n   *\n   * If an `uncanonicalizedDescriptor` is provided, it is canonicalized and used as the map key.\n   * If one is not provided, the map key is `\"\"` (empty string).\n   *\n   * Throws SkipTestCase if devices with this descriptor are unsupported.\n   */\n  async getOrCreate(\n    uncanonicalizedDescriptor: UncanonicalizedDeviceDescriptor | undefined\n  ): Promise<DeviceHolder> {\n    const [descriptor, key] = canonicalizeDescriptor(uncanonicalizedDescriptor);\n    // Quick-reject descriptors that are known to be unsupported already.\n    if (this.unsupported.has(key)) {\n      throw new SkipTestCase(\n        `GPUDeviceDescriptor previously failed: ${JSON.stringify(descriptor)}`\n      );\n    }\n\n    // Search for an existing device with the same descriptor.\n    {\n      const value = this.holders.get(key);\n      if (value) {\n        // Move it to the end of the Map (most-recently-used).\n        this.holders.delete(key);\n        this.holders.set(key, value);\n        return value;\n      }\n    }\n\n    // No existing item was found; add a new one.\n    let value;\n    try {\n      value = await DeviceHolder.create(descriptor);\n    } catch (ex) {\n      if (ex instanceof FeaturesNotSupported) {\n        this.unsupported.add(key);\n        throw new SkipTestCase(\n          `GPUDeviceDescriptor not supported: ${JSON.stringify(descriptor)}\\n${ex?.message ?? ''}`\n        );\n      }\n\n      throw ex;\n    }\n    this.insertAndCleanUp(key, value);\n    return value;\n  }\n\n  /** Insert an entry, then remove the least-recently-used items if there are too many. */\n  private insertAndCleanUp(key: string, value: DeviceHolder) {\n    this.holders.set(key, value);\n\n    const kMaxEntries = 5;\n    if (this.holders.size > kMaxEntries) {\n      // Delete the first (least recently used) item in the set.\n      for (const [key] of this.holders) {\n        this.holders.delete(key);\n        return;\n      }\n    }\n  }\n}\n\nexport type UncanonicalizedDeviceDescriptor = {\n  requiredFeatures?: Iterable<GPUFeatureName>;\n  requiredLimits?: Record<string, GPUSize32>;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedFeatures?: undefined;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedLimits?: undefined;\n  /** @deprecated this field cannot be used */\n  extensions?: undefined;\n  /** @deprecated this field cannot be used */\n  features?: undefined;\n};\ntype CanonicalDeviceDescriptor = Omit<\n  Required<GPUDeviceDescriptor>,\n  'label' | 'nonGuaranteedFeatures' | 'nonGuaranteedLimits'\n>;\n/**\n * Make a stringified map-key from a GPUDeviceDescriptor.\n * Tries to make sure all defaults are resolved, first - but it's okay if some are missed\n * (it just means some GPUDevice objects won't get deduplicated).\n *\n * This does **not** canonicalize `undefined` (the \"default\" descriptor) into a fully-qualified\n * GPUDeviceDescriptor. This is just because `undefined` is a common case and we want to use it\n * as a sanity check that WebGPU is working.\n */\nfunction canonicalizeDescriptor(\n  desc: UncanonicalizedDeviceDescriptor | undefined\n): [CanonicalDeviceDescriptor | undefined, string] {\n  if (desc === undefined) {\n    return [undefined, ''];\n  }\n\n  const featuresCanonicalized = desc.requiredFeatures\n    ? Array.from(new Set(desc.requiredFeatures)).sort()\n    : [];\n\n  /** Canonicalized version of the requested limits: in canonical order, with only values which are\n   * specified _and_ non-default. */\n  const limitsCanonicalized: Record<string, number> = {};\n  if (desc.requiredLimits) {\n    for (const limit of kLimits) {\n      const requestedValue = desc.requiredLimits[limit];\n      const defaultValue = kLimitInfo[limit].default;\n      // Skip adding a limit to limitsCanonicalized if it is the same as the default.\n      if (requestedValue !== undefined && requestedValue !== defaultValue) {\n        limitsCanonicalized[limit] = requestedValue;\n      }\n    }\n  }\n\n  // Type ensures every field is carried through.\n  const descriptorCanonicalized: CanonicalDeviceDescriptor = {\n    requiredFeatures: featuresCanonicalized,\n    requiredLimits: limitsCanonicalized,\n    defaultQueue: {},\n  };\n  return [descriptorCanonicalized, JSON.stringify(descriptorCanonicalized)];\n}\n\nfunction supportsFeature(\n  adapter: GPUAdapter,\n  descriptor: CanonicalDeviceDescriptor | undefined\n): boolean {\n  if (descriptor === undefined) {\n    return true;\n  }\n\n  for (const feature of descriptor.requiredFeatures) {\n    if (!adapter.features.has(feature)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * DeviceHolder has three states:\n * - 'free': Free to be used for a new test.\n * - 'reserved': Reserved by a running test, but has not had error scopes created yet.\n * - 'acquired': Reserved by a running test, and has had error scopes created.\n */\ntype DeviceHolderState = 'free' | 'reserved' | 'acquired';\n\n/**\n * Holds a GPUDevice and tracks its state (free/reserved/acquired) and handles device loss.\n */\nclass DeviceHolder implements DeviceProvider {\n  /** The device. Will be cleared during cleanup if there were unexpected errors. */\n  private _device: GPUDevice | undefined;\n  /** Whether the device is in use by a test or not. */\n  state: DeviceHolderState = 'free';\n  /** initially undefined; becomes set when the device is lost */\n  lostInfo?: GPUDeviceLostInfo;\n  /** Set if the device is expected to be lost. */\n  expectedLostReason?: GPUDeviceLostReason;\n\n  // Gets a device and creates a DeviceHolder.\n  // If the device is lost, DeviceHolder.lost gets set.\n  static async create(descriptor: CanonicalDeviceDescriptor | undefined): Promise<DeviceHolder> {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null, 'requestAdapter returned null');\n    if (!supportsFeature(adapter, descriptor)) {\n      throw new FeaturesNotSupported('One or more features are not supported');\n    }\n    const device = await adapter.requestDevice(descriptor);\n    assert(device !== null, 'requestDevice returned null');\n\n    return new DeviceHolder(device);\n  }\n\n  private constructor(device: GPUDevice) {\n    this._device = device;\n    this._device.lost.then(ev => {\n      this.lostInfo = ev;\n    });\n  }\n\n  get device() {\n    assert(this._device !== undefined);\n    return this._device;\n  }\n\n  acquire(): GPUDevice {\n    assert(this.state === 'reserved');\n    this.state = 'acquired';\n    this.device.pushErrorScope('out-of-memory');\n    this.device.pushErrorScope('validation');\n    return this.device;\n  }\n\n  expectDeviceLost(reason: GPUDeviceLostReason) {\n    this.expectedLostReason = reason;\n  }\n\n  async ensureRelease(): Promise<void> {\n    const kPopErrorScopeTimeoutMS = 5000;\n\n    assert(this.state !== 'free');\n    try {\n      if (this.state === 'acquired') {\n        // Time out if popErrorScope never completes. This could happen due to a browser bug - e.g.,\n        // as of this writing, on Chrome GPU process crash, popErrorScope just hangs.\n        await raceWithRejectOnTimeout(\n          this.release(),\n          kPopErrorScopeTimeoutMS,\n          'finalization popErrorScope timed out'\n        );\n      }\n    } finally {\n      this.state = 'free';\n    }\n  }\n\n  private async release(): Promise<void> {\n    // End the whole-test error scopes. Check that there are no extra error scopes, and that no\n    // otherwise-uncaptured errors occurred during the test.\n    let gpuValidationError: GPUValidationError | GPUOutOfMemoryError | null;\n    let gpuOutOfMemoryError: GPUValidationError | GPUOutOfMemoryError | null;\n\n    // Submit to the queue to attempt to force a GPU flush.\n    this.device.queue.submit([]);\n\n    try {\n      // May reject if the device was lost.\n      gpuValidationError = await this.device.popErrorScope();\n      gpuOutOfMemoryError = await this.device.popErrorScope();\n    } catch (ex) {\n      assert(\n        this.lostInfo !== undefined,\n        'popErrorScope failed; should only happen if device has been lost'\n      );\n      throw ex;\n    }\n\n    // Attempt to wait for the queue to be idle.\n    if (this.device.queue.onSubmittedWorkDone) {\n      await this.device.queue.onSubmittedWorkDone();\n    }\n\n    await assertReject(\n      this.device.popErrorScope(),\n      'There was an extra error scope on the stack after a test'\n    );\n\n    if (gpuValidationError !== null) {\n      assert(gpuValidationError instanceof GPUValidationError);\n      // Allow the device to be reused.\n      throw new TestFailedButDeviceReusable(\n        `Unexpected validation error occurred: ${gpuValidationError.message}`\n      );\n    }\n    if (gpuOutOfMemoryError !== null) {\n      assert(gpuOutOfMemoryError instanceof GPUOutOfMemoryError);\n      // Don't allow the device to be reused; unexpected OOM could break the device.\n      throw new TestOOMedShouldAttemptGC('Unexpected out-of-memory error occurred');\n    }\n  }\n\n  /**\n   * Release the ref to the GPUDevice. This should be the only ref held by the DevicePool or\n   * GPUTest, so in theory it can get garbage collected.\n   */\n  releaseGPUDevice(): void {\n    this._device = undefined;\n  }\n}\n"],"file":"device_pool.js"}