{"version":3,"file":"f32_interval.js","names":["assert","unreachable","Float16Array","kValue","reinterpretF32AsU32","reinterpretU32AsF32","calculatePermutations","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","flatten2DArray","flushSubnormalNumberF32","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","oneULP","unflatten2DArray","F32Interval","constructor","bounds","begin","end","length","Number","isNaN","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","i","toF32Interval","containsZeroOrSubnormals","f32","subnormal","negative","min","positive","max","isFinite","span","intervals","forEach","Math","toString","any","_any","undefined","serializeF32Interval","deserializeF32Interval","data","Array","kNegPiToPiInterval","pi","whole","kGreaterThanZeroInterval","isF32Vector","v","toF32Vector","f","map","kZeroVector","kAnyVector","spanF32Vector","vectors","vector_length","every","e","result","multiplyVectorByScalar","c","x","multiplicationInterval","isF32Matrix","m","num_rows","toF32Matrix","kAnyF32Matrix","spanF32Matrix","matrices","ms","num_cols","r","_","j","addFlushedIfNeededF32","values","some","concat","addFlushedIfNeededF16","limitPointToIntervalDomain","domain","impl","limitBinaryToIntervalDomain","y","d","roundAndFlushPointToInterval","op","inputs","results","Set","roundAndFlushBinaryToInterval","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushTernaryToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","roundAndFlushMatrixToMatrix","m_flat","m_rounded","m_flushed","m_options","m_inputs","interval_matrices","inner_m","runPointToIntervalOp","extrema","b","runBinaryToIntervalOp","outputs","runTernaryToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","runPointToIntervalOpComponentWise","runVectorPairToVectorOp","runBinaryToIntervalOpVectorComponentWise","idx","runMatrixToMatrixOp","m_values","unflat_m","result_cols","result_rows","runBinaryToIntervalOpMatrixComponentWise","cols","rows","flat_x","flat_y","CorrectlyRoundedIntervalOp","correctlyRoundedInterval","AbsoluteErrorIntervalOp","error_range","absoluteErrorInterval","abs","ULPIntervalOp","numULP","ulp","ulpInterval","AbsIntervalOp","absInterval","AcosIntervalOp","sqrtInterval","subtractionInterval","atan2Interval","acosInterval","acoshIntervals","acoshAlternativeInterval","acoshPrimaryInterval","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","AcoshPrimaryIntervalOp","AdditionIntervalOp","additionMatrixInterval","AsinIntervalOp","asinInterval","AsinhIntervalOp","asinhInterval","AtanIntervalOp","atan","atanInterval","Atan2IntervalOp","atan_yx","AtanhIntervalOp","numerator","denominator","log_interval","divisionInterval","atanhInterval","CeilIntervalOp","ceil","ceilInterval","ClampMedianIntervalOp","sort","a","clampIntervals","clampMinMaxInterval","clampMedianInterval","ClampMinMaxIntervalOp","low","high","CosIntervalOp","cos","cosInterval","CoshIntervalOp","minus_n","negationInterval","expInterval","coshInterval","CrossIntervalOp","r0","r1","r2","crossInterval","DegreesIntervalOp","degreesInterval","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceInterval","DivisionIntervalOp","DotIntervalOp","multiplications","MultiplicationIntervalOp","permutations","p","reduce","prev","cur","dotInterval","ExpIntervalOp","exp","Exp2IntervalOp","pow","exp2Interval","faceForwardIntervals","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","push","FloorIntervalOp","floor","floorInterval","FmaIntervalOp","fmaInterval","FractIntervalOp","less_than_one","fractInterval","InverseSqrtIntervalOp","sqrt","inverseSqrtInterval","LdexpIntervalOp","e1","e2","ldexpInterval","LengthIntervalScalarOp","LengthIntervalVectorOp","LogIntervalOp","log","Log2IntervalOp","log2","log2Interval","MaxIntervalOp","maxInterval","MinIntervalOp","minInterval","MixImpreciseIntervalOp","t","mixIntervals","mixImpreciseInterval","mixPreciseInterval","MixPreciseIntervalOp","s","modfInterval","fract","MultiplicationInnerOp","NormalizeIntervalOp","normalizeInterval","PowIntervalOp","powInterval","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16Interval","RadiansIntervalOp","radiansInterval","ReflectIntervalOp","rhs","reflectInterval","refractInterval","r_squared","dot","dot_squared","one_minus_dot_squared","k","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderInterval","RoundIntervalOp","diff_before","diff_after","roundInterval","saturateInterval","SignIntervalOp","signInterval","SinIntervalOp","sin","sinInterval","SinhIntervalOp","sinhInterval","SmoothStepOp","smoothStepInterval","SqrtIntervalOp","StepIntervalOp","edge","stepInterval","subtractionMatrixInterval","TanIntervalOp","tanInterval","TanhIntervalOp","tanhInterval","TransposeIntervalOp","transposeInterval","TruncIntervalOp","trunc","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatInterval","u32","Unpack2x16snormIntervalOp","unpack2x16snormInterval","Unpack2x16unormIntervalOp","unpack2x16unormInterval","Unpack4x8snormIntervalOp","unpack4x8snormInterval","Unpack4x8unormIntervalOp","unpack4x8unormInterval"],"sources":["../../../src/webgpu/util/f32_interval.ts"],"sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { kValue } from './constants.js';\nimport { reinterpretF32AsU32, reinterpretU32AsF32 } from './conversion.js';\nimport {\n  calculatePermutations,\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  flatten2DArray,\n  flushSubnormalNumberF32,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  oneULP,\n  unflatten2DArray,\n} from './math.js';\n\n/**\n * Representation of bounds for an interval as an array with either one or two\n * elements. Single element indicates that the interval is a single point. For\n * two elements, the first is the lower bound of the interval and the second is\n * the upper bound.\n */\nexport type IntervalBounds = [number] | [number, number];\n\n/** Represents a closed interval in the f32 range */\nexport class F32Interval {\n  public readonly begin: number;\n  public readonly end: number;\n  private static _any: F32Interval;\n\n  /** Constructor\n   *\n   * `toF32Interval` is the preferred way to create F32Intervals\n   *\n   * @param bounds either a pair of numbers indicating the beginning then the\n   *               end of the interval, or a single element array indicating the\n   *               interval is a point\n   */\n  public constructor(...bounds: IntervalBounds) {\n    const [begin, end] = bounds.length === 2 ? bounds : [bounds[0], bounds[0]];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `bounds need to be non-NaN`);\n    assert(begin <= end, `bounds[0] (${begin}) must be less than or equal to bounds[1]  (${end})`);\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  public bounds(): IntervalBounds {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  public contains(n: number | F32Interval): boolean {\n    if (Number.isNaN(n)) {\n      // Being the any interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n    const i = toF32Interval(n);\n    return this.begin <= i.begin && this.end >= i.end;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  public containsZeroOrSubnormals(): boolean {\n    return !(\n      this.end < kValue.f32.subnormal.negative.min || this.begin > kValue.f32.subnormal.positive.max\n    );\n  }\n\n  /** @returns if this interval contains a single point */\n  public isPoint(): boolean {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains f32 finite values */\n  public isFinite(): boolean {\n    return isFiniteF32(this.begin) && isFiniteF32(this.end);\n  }\n\n  /** @returns an interval with the tightest bounds that includes all provided intervals */\n  static span(...intervals: F32Interval[]): F32Interval {\n    assert(intervals.length > 0, `span of an empty list of F32Intervals is not allowed`);\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach(i => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return new F32Interval(begin, end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  public toString(): string {\n    return `[${this.bounds()}]`;\n  }\n\n  /** @returns a singleton for interval of all possible values\n   * This interval is used in situations where accuracy is not defined, so any\n   * result is valid.\n   */\n  public static any(): F32Interval {\n    if (this._any === undefined) {\n      this._any = new F32Interval(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n    }\n    return this._any;\n  }\n}\n\n/**\n * SerializedF32Interval holds the serialized form of a F32Interval.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedF32Interval = { begin: number; end: number } | 'any';\n\n/** serializeF32Interval() converts a F32Interval to a SerializedF32Interval */\nexport function serializeF32Interval(i: F32Interval): SerializedF32Interval {\n  return i === F32Interval.any()\n    ? 'any'\n    : { begin: reinterpretF32AsU32(i.begin), end: reinterpretF32AsU32(i.end) };\n}\n\n/** serializeF32Interval() converts a SerializedF32Interval to a F32Interval */\nexport function deserializeF32Interval(data: SerializedF32Interval): F32Interval {\n  return data === 'any'\n    ? F32Interval.any()\n    : toF32Interval([reinterpretU32AsF32(data.begin), reinterpretU32AsF32(data.end)]);\n}\n\n/** @returns an interval containing the point or the original interval */\nexport function toF32Interval(n: number | IntervalBounds | F32Interval): F32Interval {\n  if (n instanceof F32Interval) {\n    return n;\n  }\n\n  if (n instanceof Array) {\n    return new F32Interval(...n);\n  }\n\n  return new F32Interval(n, n);\n}\n\n/** F32Interval of [-π, π] */\nconst kNegPiToPiInterval = toF32Interval([\n  kValue.f32.negative.pi.whole,\n  kValue.f32.positive.pi.whole,\n]);\n\n/** F32Interval of values greater than 0 and less than or equal to f32 max */\nconst kGreaterThanZeroInterval = toF32Interval([\n  kValue.f32.subnormal.positive.min,\n  kValue.f32.positive.max,\n]);\n\n/**\n * Representation of a vec2/3/4 of floating point intervals as an array of F32Intervals.\n * */\nexport type F32Vector =\n  | [F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval, F32Interval];\n\n/** Coerce F32Interval[] to F32Vector if possible */\nfunction isF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): v is F32Vector {\n  if (v[0] instanceof F32Interval) {\n    return v.length === 2 || v.length === 3 || v.length === 4;\n  }\n  return false;\n}\n\n/** @returns an F32Vector representation of an array fo F32Intervals if possible */\nexport function toF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): F32Vector {\n  if (isF32Vector(v)) {\n    return v;\n  }\n\n  const f = v.map(toF32Interval);\n  if (isF32Vector(f)) {\n    return f;\n  }\n  unreachable(`Cannot convert [${v}] to F32Vector`);\n}\n\n/** F32Vector with all zero elements */\nconst kZeroVector = {\n  2: toF32Vector([0, 0]),\n  3: toF32Vector([0, 0, 0]),\n  4: toF32Vector([0, 0, 0, 0]),\n};\n\n/** F32Vector with all F32Interval.any() elements */\nconst kAnyVector = {\n  2: toF32Vector([F32Interval.any(), F32Interval.any()]),\n  3: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n  4: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n};\n\n/**\n * @returns a F32Vector where each element is the span for corresponding\n *          elements at the same index in the input vectors\n */\nfunction spanF32Vector(...vectors: F32Vector[]): F32Vector {\n  assert(isF32Vector(vectors[0]), '');\n  const vector_length = vectors[0].length;\n  assert(\n    vectors.every(e => e.length === vector_length),\n    `Vector span is not defined for vectors of differing lengths`\n  );\n\n  const result: F32Interval[] = new Array<F32Interval>(vector_length);\n\n  for (let i = 0; i < vector_length; i++) {\n    result[i] = F32Interval.span(...vectors.map(v => v[i]));\n  }\n  return toF32Vector(result);\n}\n\n/**\n * @retuns the vector result of multiplying the given vector by the given scalar\n */\nfunction multiplyVectorByScalar(v: number[], c: number | F32Interval): F32Vector {\n  return toF32Vector(v.map(x => multiplicationInterval(x, c)));\n}\n\n/**\n * Short hand for an Array of Arrays that contains a column-major matrix\n *\n * This isn't exported outside of this file to avoid colliding with the Matrix\n * container for going in/out of a shader that the test runner uses.\n */\ntype Matrix<T> = T[][];\n\n/** Representation of a matCxR of floating point intervals as an array of arrays of F32Intervals. This maps onto the WGSL concept of matrix. Internally  */\n// prettier-ignore;\nexport type F32Matrix =\n  | [[F32Interval, F32Interval], [F32Interval, F32Interval]]\n  | [[F32Interval, F32Interval], [F32Interval, F32Interval], [F32Interval, F32Interval]]\n  | [\n      [F32Interval, F32Interval],\n      [F32Interval, F32Interval],\n      [F32Interval, F32Interval],\n      [F32Interval, F32Interval]\n    ]\n  | [[F32Interval, F32Interval, F32Interval], [F32Interval, F32Interval, F32Interval]]\n  | [\n      [F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval]\n    ]\n  | [\n      [F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval]\n    ]\n  | [\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval]\n    ]\n  | [\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval]\n    ]\n  | [\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval],\n      [F32Interval, F32Interval, F32Interval, F32Interval]\n    ];\n\n/** Coerce F32Interval[] to F32Matrix if possible */\nfunction isF32Matrix(\n  m: Matrix<number> | Matrix<IntervalBounds> | Matrix<F32Interval> | F32Vector[] | F32Matrix\n): m is F32Matrix {\n  if (!(m[0][0] instanceof F32Interval)) {\n    return false;\n  }\n  // At this point m guaranteed to be a F32Interval[][] | F32Vector[]\n  // | F32Matrix.\n\n  // Coercing the type since F32Vector[] and F32Matrix are functionally\n  // equivalent to F32Interval[][] for .length and .every, but they are not\n  // generally compatible, since tuples are not equivalent to arrays, so TS\n  // considers c in .every to be unresolvable, even though our usage is safe.\n  m = m as F32Interval[][];\n\n  if (m.length > 4 || m.length < 2) {\n    return false;\n  }\n\n  const num_rows = m[0].length;\n  if (num_rows > 4 || num_rows < 2) {\n    return false;\n  }\n\n  return m.every(c => c.length === num_rows);\n}\n\n/** @returns an F32Matrix representation of an array fo F32Intervals if possible */\nexport function toF32Matrix(\n  m: Matrix<number> | Matrix<IntervalBounds> | Matrix<F32Interval> | F32Vector[] | F32Matrix\n): F32Matrix {\n  if (isF32Matrix(m)) {\n    return m;\n  }\n\n  const result = m.map(c => c.map(toF32Interval));\n\n  if (isF32Matrix(result)) {\n    return result;\n  }\n  unreachable(`Cannot convert ${m} to F32Matrix`);\n}\n\n/** F32Matrix with all F32Interval.any() elements */\nconst kAnyF32Matrix = {\n  2: {\n    2: toF32Matrix([\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n    ]),\n    3: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n    4: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n  },\n  3: {\n    2: toF32Matrix([\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n    ]),\n    3: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n    4: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n  },\n  4: {\n    2: toF32Matrix([\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any()],\n    ]),\n    3: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n    4: toF32Matrix([\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n      [F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()],\n    ]),\n  },\n};\n\n/**\n * @returns a F32Matrix where each element is the span for corresponding\n *          elements at the same index in the input matrices\n */\nfunction spanF32Matrix(...matrices: F32Matrix[]): F32Matrix {\n  // Coercing the type of matrices, since tuples are not generally compatible\n  // with Arrays, but they are functionally equivalent for the usages in this\n  // function.\n  const ms = matrices as Matrix<F32Interval>[];\n  const num_cols = ms[0].length;\n  const num_rows = ms[0][0].length;\n  assert(\n    ms.every(m => m.length === num_cols && m.every(r => r.length === num_rows)),\n    `Matrix span is not defined for Matrices of differing dimensions`\n  );\n\n  const result: Matrix<F32Interval> = [...Array(num_cols)].map(_ => [...Array(num_rows)]);\n  for (let i = 0; i < num_cols; i++) {\n    for (let j = 0; j < num_rows; j++) {\n      result[i][j] = F32Interval.span(...ms.map(m => m[i][j]));\n    }\n  }\n\n  return toF32Matrix(result);\n}\n\n/**\n * @returns the input plus zero if any of the entries are f32 subnormal,\n * otherwise returns the input.\n */\nfunction addFlushedIfNeededF32(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF32(v)) ? values.concat(0) : values;\n}\n\n/**\n * @returns the input plus zero if any of the entries are f16 subnormal,\n * otherwise returns the input\n */\nfunction addFlushedIfNeededF16(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToInterval {\n  (x: number): F32Interval;\n}\n\n/** Operation used to implement a PointToInterval */\nexport interface PointToIntervalOp {\n  /** @returns acceptance interval for a function at point x */\n  impl: PointToInterval;\n\n  /**\n   * Calculates where in the domain defined by x the min/max extrema of impl\n   * occur and returns a span of those points to be used as the domain instead.\n   *\n   * Used by runPointToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for operations that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   *      i.e. fooInterval takes in x: number | F32Interval, not x: number\n   */\n  extrema?: (x: F32Interval) => F32Interval;\n}\n\n/**\n * Restrict the inputs to an PointToInterval operation\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain interval to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a PointToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitPointToIntervalDomain(domain: F32Interval, impl: PointToInterval): PointToInterval {\n  return (n: number): F32Interval => {\n    return domain.contains(n) ? impl(n) : F32Interval.any();\n  };\n}\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface BinaryToInterval {\n  (x: number, y: number): F32Interval;\n}\n\n/** Operation used to implement a BinaryToInterval */\ninterface BinaryToIntervalOp {\n  /** @returns acceptance interval for a function at point (x, y) */\n  impl: BinaryToInterval;\n  /**\n   * Calculates where in domain defined by x & y the min/max extrema of impl\n   * occur and returns spans of those points to be used as the domain instead.\n   *\n   * Used by runBinaryToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for functions that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   */\n  extrema?: (x: F32Interval, y: F32Interval) => [F32Interval, F32Interval];\n}\n\n/** Domain for a BinaryToInterval implementation */\ninterface BinaryToIntervalDomain {\n  // Arrays to support discrete valid domain intervals\n  x: F32Interval[];\n  y: F32Interval[];\n}\n\n/**\n * Restrict the inputs to a BinaryToInterval\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain set of intervals to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a BinaryToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitBinaryToIntervalDomain(\n  domain: BinaryToIntervalDomain,\n  impl: BinaryToInterval\n): BinaryToInterval {\n  return (x: number, y: number): F32Interval => {\n    if (!domain.x.some(d => d.contains(x)) || !domain.y.some(d => d.contains(y))) {\n      return F32Interval.any();\n    }\n\n    return impl(x, y);\n  };\n}\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface TernaryToInterval {\n  (x: number, y: number, z: number): F32Interval;\n}\n\n/** Operation used to implement a TernaryToInterval */\ninterface TernaryToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function at point (x, y, z) */\n  impl: TernaryToInterval;\n}\n\n// Currently PointToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToVector {\n  (n: number): F32Vector;\n}\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToInterval {\n  (x: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorToInterval */\ninterface VectorToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vector x */\n  impl: VectorToInterval;\n}\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorPairToInterval */\ninterface VectorPairToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vectors (x, y) */\n  impl: VectorPairToInterval;\n}\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToVector {\n  (x: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorToVector */\ninterface VectorToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vector x */\n  impl: VectorToVector;\n}\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorPairToVector */\ninterface VectorPairToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vectors (x, y) */\n  impl: VectorPairToVector;\n}\n\n/**\n * A function that converts a matrix to a matrix of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixToMatrix {\n  (m: Matrix<number>): F32Matrix;\n}\n\n/** Operation used to implement a MatrixToMatrix */\ninterface MatrixToMatrixOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a matrix of acceptance intervals for a function on matrix x */\n  impl: MatrixToMatrix;\n}\n\n/**\n * A function that converts a pair of matrices to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixPairToMatrix {\n  (x: Matrix<number>, y: Matrix<number>): F32Matrix;\n}\n\n/** Converts a point to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param n value to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushPointToInterval(n: number, op: PointToIntervalOp) {\n  assert(!Number.isNaN(n), `flush not defined for NaN`);\n  const values = correctlyRoundedF32(n);\n  const inputs = addFlushedIfNeededF32(values);\n  const results = new Set<F32Interval>(inputs.map(op.impl));\n  return F32Interval.span(...results);\n}\n\n/** Converts a pair to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushBinaryToInterval(x: number, y: number, op: BinaryToIntervalOp): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a triplet to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x, y & z are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param z third param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushTernaryToInterval(\n  x: number,\n  y: number,\n  z: number,\n  op: TernaryToIntervalOp\n): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  assert(!Number.isNaN(z), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const z_values = correctlyRoundedF32(z);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const z_inputs = addFlushedIfNeededF32(z_values);\n  const intervals = new Set<F32Interval>();\n  // prettier-ignore\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      z_inputs.forEach(inner_z => {\n        intervals.add(op.impl(inner_x, inner_y, inner_z));\n      });\n    });\n  });\n\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorToInterval(x: number[], op: VectorToIntervalOp): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    intervals.add(op.impl(inner_x));\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a pair of vectors to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorPairToInterval(\n  x: number[],\n  y: number[],\n  op: VectorPairToIntervalOp\n): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to a vector of acceptance intervals using a specific\n * function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each outputs of op.impl\n */\nfunction roundAndFlushVectorToVector(x: number[], op: VectorToVectorOp): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    interval_vectors.add(op.impl(inner_x));\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/**\n * Converts a pair of vectors to a vector of acceptance intervals using a\n * specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param x second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each output of op.impl\n */\nfunction roundAndFlushVectorPairToVector(\n  x: number[],\n  y: number[],\n  op: VectorPairToVectorOp\n): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      interval_vectors.add(op.impl(inner_x, inner_y));\n    });\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/** Converts a matrix to a matrix of acceptance intervals using a specific\n * function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param m param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a matrix of spans for each outputs of op.impl\n */\nfunction roundAndFlushMatrixToMatrix(m: Matrix<number>, op: MatrixToMatrixOp): F32Matrix {\n  const num_cols = m.length;\n  const num_rows = m[0].length;\n  assert(\n    m.every(c => c.every(r => !Number.isNaN(r))),\n    `flush not defined for NaN`\n  );\n\n  const m_flat = flatten2DArray(m);\n  const m_rounded: number[][] = m_flat.map(correctlyRoundedF32);\n  const m_flushed: number[][] = m_rounded.map(e => addFlushedIfNeededF32(e));\n  const m_options: number[][] = cartesianProduct<number>(...m_flushed);\n  const m_inputs: Matrix<number>[] = m_options.map(e => unflatten2DArray(e, num_cols, num_rows));\n\n  const interval_matrices = new Set<F32Matrix>();\n  m_inputs.forEach(inner_m => {\n    interval_matrices.add(op.impl(inner_m));\n  });\n\n  return spanF32Matrix(...interval_matrices);\n}\n\n/** Calculate the acceptance interval for a unary function over an interval\n *\n * If the interval is actually a point, this just decays to\n * roundAndFlushPointToInterval.\n *\n * The provided domain interval may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runPointToIntervalOp(x: F32Interval, op: PointToIntervalOp): F32Interval {\n  if (!x.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    x = op.extrema(x);\n  }\n\n  const result = F32Interval.span(...x.bounds().map(b => roundAndFlushPointToInterval(b, op)));\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a binary function over an interval\n *\n * The provided domain intervals may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runBinaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  op: BinaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    [x, y] = op.extrema(x, y);\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      outputs.add(roundAndFlushBinaryToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a ternary function over an interval\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param z third input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runTernaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  z: F32Interval,\n  op: TernaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n    return F32Interval.any();\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      z.bounds().forEach(inner_z => {\n        outputs.add(roundAndFlushTernaryToInterval(inner_x, inner_y, inner_z, op));\n      });\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector function over given intervals\n *\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorToIntervalOp(x: F32Vector, op: VectorToIntervalOp): F32Interval {\n  if (x.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToInterval(inner_x, op));\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector pair function over given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorPairToIntervalOp(\n  x: F32Vector,\n  y: F32Vector,\n  op: VectorPairToIntervalOp\n): F32Interval {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the vector of acceptance intervals for a pair of vector function over\n * given intervals\n *\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorToVectorOp(x: F32Vector, op: VectorToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToVector(inner_x, op));\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a vector.\n *\n * This is used for situations where a component-wise operation, like vector\n * negation, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runPointToIntervalOpComponentWise(x: F32Vector, op: PointToIntervalOp): F32Vector {\n  return toF32Vector(\n    x.map(i => {\n      return runPointToIntervalOp(i, op);\n    })\n  );\n}\n\n/** Calculate the vector of acceptance intervals for a vector function over\n * given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorPairToVectorOp(x: F32Vector, y: F32Vector, op: VectorPairToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n    });\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a pair vectors.\n *\n * This is used for situations where a component-wise operation, like vector\n * subtraction, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runBinaryToIntervalOpVectorComponentWise(\n  x: F32Vector,\n  y: F32Vector,\n  op: BinaryToIntervalOp\n): F32Vector {\n  assert(\n    x.length === y.length,\n    `runBinaryToIntervalOpVectorComponentWise requires vectors of the same length`\n  );\n  return toF32Vector(\n    x.map((i, idx) => {\n      return runBinaryToIntervalOp(i, y[idx], op);\n    })\n  );\n}\n\n/** Calculate the matrix of acceptance intervals for a pair of matrix function over\n * given intervals\n *\n * @param x input domain intervals matrix\n * @param x input domain intervals matrix\n * @param op operation defining the function being run\n * @returns a matrix of spans over all of the outputs of op.impl\n */\nfunction runMatrixToMatrixOp(m: F32Matrix, op: MatrixToMatrixOp): F32Matrix {\n  const num_cols = m.length;\n  const num_rows = m[0].length;\n  if (m.some(c => c.some(r => !r.isFinite()))) {\n    return kAnyF32Matrix[num_cols][num_rows];\n  }\n\n  const m_flat: F32Interval[] = flatten2DArray(m);\n  const m_values: number[][] = cartesianProduct<number>(...m_flat.map(e => e.bounds()));\n\n  const outputs = new Set<F32Matrix>();\n  m_values.forEach(inner_m => {\n    const unflat_m = unflatten2DArray(inner_m, num_cols, num_rows);\n    outputs.add(roundAndFlushMatrixToMatrix(unflat_m, op));\n  });\n\n  const result = spanF32Matrix(...outputs);\n  const result_cols = result.length;\n  const result_rows = result[0].length;\n\n  // F32Matrix has to be coerced to F32Interval[][] to use .every\n  return (result as F32Interval[][]).every(c => c.every(r => r.isFinite()))\n    ? result\n    : kAnyF32Matrix[result_cols][result_rows];\n}\n\n/**\n * Calculate the Matrix of acceptance intervals by running a scalar operation\n * component-wise over a pair of matrices.\n *\n * An example of this is performing matrix addition.\n *\n * @param x first input domain intervals matrix\n * @param y second input domain intervals matrix\n * @param op scalar operation to be run component-wise\n * @returns a matrix of intervals with the outputs of op.impl\n */\nfunction runBinaryToIntervalOpMatrixComponentWise(\n  x: F32Matrix,\n  y: F32Matrix,\n  op: BinaryToIntervalOp\n): F32Matrix {\n  assert(\n    x.length === y.length && x[0].length === y[0].length,\n    `runBinaryToIntervalOpMatrixComponentWise requires matrices of the same dimensions`\n  );\n\n  const cols = x.length;\n  const rows = x[0].length;\n  const flat_x = flatten2DArray(x);\n  const flat_y = flatten2DArray(y);\n\n  return toF32Matrix(\n    unflatten2DArray(\n      flat_x.map((i, idx) => {\n        return runBinaryToIntervalOp(i, flat_y[idx], op);\n      }),\n      cols,\n      rows\n    )\n  );\n}\n\n/** Defines a PointToIntervalOp for an interval of the correctly rounded values around the point */\nconst CorrectlyRoundedIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    assert(!Number.isNaN(n), `absolute not defined for NaN`);\n    return toF32Interval(n);\n  },\n};\n\n/** @returns an interval of the correctly rounded values around the point */\nexport function correctlyRoundedInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CorrectlyRoundedIntervalOp);\n}\n\n/** @returns a PointToIntervalOp for [n - error_range, n + error_range] */\nfunction AbsoluteErrorIntervalOp(error_range: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(error_range)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n      return toF32Interval([n - error_range, n + error_range]);\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of the absolute error around the point */\nexport function absoluteErrorInterval(n: number, error_range: number): F32Interval {\n  error_range = Math.abs(error_range);\n  return runPointToIntervalOp(toF32Interval(n), AbsoluteErrorIntervalOp(error_range));\n}\n\n/** @returns a PointToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\nfunction ULPIntervalOp(numULP: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(numULP)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n      const ulp = oneULP(n);\n      const begin = n - numULP * ulp;\n      const end = n + numULP * ulp;\n\n      return toF32Interval([\n        Math.min(begin, flushSubnormalNumberF32(begin)),\n        Math.max(end, flushSubnormalNumberF32(end)),\n      ]);\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of N * ULP around the point */\nexport function ulpInterval(n: number, numULP: number): F32Interval {\n  numULP = Math.abs(numULP);\n  return runPointToIntervalOp(toF32Interval(n), ULPIntervalOp(numULP));\n}\n\nconst AbsIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    return correctlyRoundedInterval(Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for abs(n) */\nexport function absInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AbsIntervalOp);\n}\n\nconst AcosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // acos(n) = atan2(sqrt(1.0 - n * n), n)\n    const y = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(y, n);\n  }),\n};\n\n/** Calculate an acceptance interval for acos(n) */\nexport function acosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AcosIntervalOp);\n}\n\n/** All acceptance interval functions for acosh(x) */\nexport const acoshIntervals: PointToInterval[] = [acoshAlternativeInterval, acoshPrimaryInterval];\n\nconst AcoshAlternativeIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n    const inner_value = multiplicationInterval(\n      additionInterval(x, 1.0),\n      subtractionInterval(x, 1.0)\n    );\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\nexport function acoshAlternativeInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshAlternativeIntervalOp);\n}\n\nconst AcoshPrimaryIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt(x * x - 1.0))\n    const inner_value = subtractionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\nexport function acoshPrimaryInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshPrimaryIntervalOp);\n}\n\nconst AdditionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x + y);\n  },\n};\n\n/** Calculate an acceptance interval of x + y */\nexport function additionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), AdditionIntervalOp);\n}\n\n/** Calculate an acceptance interval of x + y, when x and y are matrices */\nexport function additionMatrixInterval(x: Matrix<number>, y: Matrix<number>): F32Matrix {\n  return runBinaryToIntervalOpMatrixComponentWise(\n    toF32Matrix(x),\n    toF32Matrix(y),\n    AdditionIntervalOp\n  );\n}\n\nconst AsinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // asin(n) = atan2(n, sqrt(1.0 - n * n))\n    const x = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(n, x);\n  }),\n};\n\n/** Calculate an acceptance interval for asin(n) */\nexport function asinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinIntervalOp);\n}\n\nconst AsinhIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // asinh(x) = log(x + sqrt(x * x + 1.0))\n    const inner_value = additionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of asinh(x) */\nexport function asinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinhIntervalOp);\n}\n\nconst AtanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.atan(n), 4096);\n  },\n};\n\n/** Calculate an acceptance interval of atan(x) */\nexport function atanInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanIntervalOp);\n}\n\nconst Atan2IntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    {\n      // For atan2, there params are labelled (y, x), not (x, y), so domain.x is first parameter (y), and domain.y is\n      // the second parameter (x)\n      x: [\n        toF32Interval([kValue.f32.negative.min, kValue.f32.negative.max]),\n        toF32Interval([kValue.f32.positive.min, kValue.f32.positive.max]),\n      ], // first param must be finite and normal\n      y: [toF32Interval([-(2 ** 126), -(2 ** -126)]), toF32Interval([2 ** -126, 2 ** 126])], // inherited from division\n    },\n    (y: number, x: number): F32Interval => {\n      const atan_yx = Math.atan(y / x);\n      // x > 0, atan(y/x)\n      if (x > 0) {\n        return ulpInterval(atan_yx, 4096);\n      }\n\n      // x < 0, y > 0, atan(y/x) + π\n      if (y > 0) {\n        return ulpInterval(atan_yx + kValue.f32.positive.pi.whole, 4096);\n      }\n\n      // x < 0, y < 0, atan(y/x) - π\n      return ulpInterval(atan_yx - kValue.f32.positive.pi.whole, 4096);\n    }\n  ),\n  extrema: (y: F32Interval, x: F32Interval): [F32Interval, F32Interval] => {\n    // There is discontinuity + undefined behaviour at y/x = 0 that will dominate the accuracy\n    if (y.contains(0)) {\n      if (x.contains(0)) {\n        return [toF32Interval(0), toF32Interval(0)];\n      }\n      return [toF32Interval(0), x];\n    }\n    return [y, x];\n  },\n};\n\n/** Calculate an acceptance interval of atan2(y, x) */\nexport function atan2Interval(y: number | F32Interval, x: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(y), toF32Interval(x), Atan2IntervalOp);\n}\n\nconst AtanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n    const numerator = additionInterval(1.0, n);\n    const denominator = subtractionInterval(1.0, n);\n    const log_interval = logInterval(divisionInterval(numerator, denominator));\n    return multiplicationInterval(log_interval, 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of atanh(x) */\nexport function atanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanhIntervalOp);\n}\n\nconst CeilIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.ceil(n));\n  },\n};\n\n/** Calculate an acceptance interval of ceil(x) */\nexport function ceilInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CeilIntervalOp);\n}\n\nconst ClampMedianIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return correctlyRoundedInterval(\n      // Default sort is string sort, so have to implement numeric comparison.\n      // Cannot use the b-a one liner, because that assumes no infinities.\n      [x, y, z].sort((a, b) => {\n        if (a < b) {\n          return -1;\n        }\n        if (a > b) {\n          return 1;\n        }\n        return 0;\n      })[1]\n    );\n  },\n};\n\n/** All acceptance interval functions for clamp(x, y, z) */\nexport const clampIntervals: TernaryToInterval[] = [clampMinMaxInterval, clampMedianInterval];\n\n/** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\nexport function clampMedianInterval(\n  x: number | F32Interval,\n  y: number | F32Interval,\n  z: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    ClampMedianIntervalOp\n  );\n}\n\nconst ClampMinMaxIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, low: number, high: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(Math.max(x, low), high));\n  },\n};\n\n/** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\nexport function clampMinMaxInterval(\n  x: number | F32Interval,\n  low: number | F32Interval,\n  high: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(low),\n    toF32Interval(high),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst CosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.cos(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of cos(x) */\nexport function cosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CosIntervalOp);\n}\n\nconst CoshIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // cosh(x) = (exp(x) + exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(additionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of cosh(x) */\nexport function coshInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CoshIntervalOp);\n}\n\nconst CrossIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n    assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n    // cross(x, y) = r, where\n    //   r[0] = x[1] * y[2] - x[2] * y[1]\n    //   r[1] = x[2] * y[0] - x[0] * y[2]\n    //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n    const r0 = subtractionInterval(\n      multiplicationInterval(x[1], y[2]),\n      multiplicationInterval(x[2], y[1])\n    );\n    const r1 = subtractionInterval(\n      multiplicationInterval(x[2], y[0]),\n      multiplicationInterval(x[0], y[2])\n    );\n    const r2 = subtractionInterval(\n      multiplicationInterval(x[0], y[1]),\n      multiplicationInterval(x[1], y[0])\n    );\n    return [r0, r1, r2];\n  },\n};\n\nexport function crossInterval(x: number[], y: number[]): F32Vector {\n  assert(x.length === 3, `Cross is only defined for vec3`);\n  assert(y.length === 3, `Cross is only defined for vec3`);\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), CrossIntervalOp);\n}\n\nconst DegreesIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 57.295779513082322865);\n  },\n};\n\n/** Calculate an acceptance interval of degrees(x) */\nexport function degreesInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), DegreesIntervalOp);\n}\n\nconst DistanceIntervalScalarOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return lengthInterval(subtractionInterval(x, y));\n  },\n};\n\nconst DistanceIntervalVectorOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    return lengthInterval(\n      runBinaryToIntervalOpVectorComponentWise(\n        toF32Vector(x),\n        toF32Vector(y),\n        SubtractionIntervalOp\n      )\n    );\n  },\n};\n\n/** Calculate an acceptance interval of distance(x, y) */\nexport function distanceInterval(x: number | number[], y: number | number[]): F32Interval {\n  if (x instanceof Array && y instanceof Array) {\n    assert(\n      x.length === y.length,\n      `distanceInterval requires both params to have the same number of elements`\n    );\n    return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DistanceIntervalVectorOp);\n  } else if (!(x instanceof Array) && !(y instanceof Array)) {\n    return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DistanceIntervalScalarOp);\n  }\n  unreachable(\n    `distanceInterval requires both params to both the same type, either scalars or vectors`\n  );\n}\n\nconst DivisionIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    {\n      x: [toF32Interval([kValue.f32.negative.min, kValue.f32.positive.max])],\n      y: [toF32Interval([-(2 ** 126), -(2 ** -126)]), toF32Interval([2 ** -126, 2 ** 126])],\n    },\n    (x: number, y: number): F32Interval => {\n      if (y === 0) {\n        return F32Interval.any();\n      }\n      return ulpInterval(x / y, 2.5);\n    }\n  ),\n  extrema: (x: F32Interval, y: F32Interval): [F32Interval, F32Interval] => {\n    // division has a discontinuity at y = 0.\n    if (y.contains(0)) {\n      y = toF32Interval(0);\n    }\n    return [x, y];\n  },\n};\n\n/** Calculate an acceptance interval of x / y */\nexport function divisionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DivisionIntervalOp);\n}\n\nconst DotIntervalOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    // dot(x, y) = sum of x[i] * y[i]\n    const multiplications = runBinaryToIntervalOpVectorComponentWise(\n      toF32Vector(x),\n      toF32Vector(y),\n      MultiplicationIntervalOp\n    );\n\n    // vec2 doesn't require permutations, since a + b = b + a for floats\n    if (multiplications.length === 2) {\n      return additionInterval(multiplications[0], multiplications[1]);\n    }\n\n    // The spec does not state the ordering of summation, so all of the permutations are calculated and their results\n    // spanned, since addition of more then two floats is not transitive, i.e. a + b + c is not guaranteed to equal\n    // b + a + c\n    const permutations: F32Interval[][] = calculatePermutations(multiplications);\n    return F32Interval.span(\n      ...permutations.map(p => p.reduce((prev, cur) => additionInterval(prev, cur)))\n    );\n  },\n};\n\nexport function dotInterval(x: number[], y: number[]): F32Interval {\n  assert(x.length === y.length, `dot not defined for vectors with different lengths`);\n  return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DotIntervalOp);\n}\n\nconst ExpIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.exp(n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp(x) */\nexport function expInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), ExpIntervalOp);\n}\n\nconst Exp2IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.pow(2, n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp2(x) */\nexport function exp2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Exp2IntervalOp);\n}\n\n/**\n * Calculate the acceptance intervals for faceForward(x, y, z)\n *\n * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n *\n * This builtin selects from two discrete results (delta rounding/flushing), so\n * the majority of the framework code is not appropriate, since the framework\n * attempts to span results.\n *\n * Thus a bespoke implementation is used instead of\n * defining a Op and running that through the framework.\n */\nexport function faceForwardIntervals(\n  x: number[],\n  y: number[],\n  z: number[]\n): (F32Vector | undefined)[] {\n  const x_vec = toF32Vector(x);\n  // Running vector through runPointToIntervalOpComponentWise to make sure that flushing/rounding is handled, since\n  // toF32Vector does not perform those operations.\n  const positive_x = runPointToIntervalOpComponentWise(x_vec, { impl: toF32Interval });\n  const negative_x = runPointToIntervalOpComponentWise(x_vec, NegationIntervalOp);\n\n  const dot_interval = dotInterval(z, y);\n\n  const results: (F32Vector | undefined)[] = [];\n\n  if (!dot_interval.isFinite()) {\n    // dot calculation went out of bounds\n    // Inserting undefine in the result, so that the test running framework is aware\n    // of this potential OOB.\n    // For const-eval tests, it means that the test case should be skipped,\n    // since the shader will fail to compile.\n    // For non-const-eval the undefined should be stripped out of the possible\n    // results.\n\n    results.push(undefined);\n  }\n\n  // Because the result of dot can be an interval, it might span across 0, thus\n  // it is possible that both -x and x are valid responses.\n  if (dot_interval.begin < 0 || dot_interval.end < 0) {\n    results.push(positive_x);\n  }\n\n  if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n    results.push(negative_x);\n  }\n\n  assert(\n    results.length > 0 || results.every(r => r === undefined),\n    `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n  );\n  return results;\n}\n\nconst FloorIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.floor(n));\n  },\n};\n\n/** Calculate an acceptance interval of floor(x) */\nexport function floorInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FloorIntervalOp);\n}\n\nconst FmaIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return additionInterval(multiplicationInterval(x, y), z);\n  },\n};\n\n/** Calculate an acceptance interval for fma(x, y, z) */\nexport function fmaInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    FmaIntervalOp\n  );\n}\n\nconst FractIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // fract(x) = x - floor(x) is defined in the spec.\n    // For people coming from a non-graphics background this will cause some unintuitive results. For example,\n    // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n    // This is how other shading languages operate and allows for a desirable wrap around in graphics programming.\n    const result = subtractionInterval(n, floorInterval(n));\n    if (result.contains(1)) {\n      // Very small negative numbers can lead to catastrophic cancellation, thus calculating a fract of 1.0, which is\n      // technically not a fractional part, so some implementations clamp the result to next nearest number.\n      return F32Interval.span(result, toF32Interval(kValue.f32.positive.less_than_one));\n    }\n    return result;\n  },\n};\n\n/** Calculate an acceptance interval of fract(x) */\nexport function fractInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FractIntervalOp);\n}\n\nconst InverseSqrtIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      return ulpInterval(1 / Math.sqrt(n), 2);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of inverseSqrt(x) */\nexport function inverseSqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), InverseSqrtIntervalOp);\n}\n\nconst LdexpIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    // Implementing SPIR-V's more restrictive domain until\n    // https://github.com/gpuweb/gpuweb/issues/3134 is resolved\n    {\n      x: [toF32Interval([kValue.f32.negative.min, kValue.f32.positive.max])],\n      y: [toF32Interval([-126, 128])],\n    },\n    (e1: number, e2: number): F32Interval => {\n      // Though the spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, the\n      // accuracy is listed as correctly rounded to the true value, so the\n      // inheritance framework does not need to be invoked to determine bounds.\n      // Instead the value at a higher precision is calculated and passed to\n      // correctlyRoundedInterval.\n      const result = e1 * 2 ** e2;\n      if (Number.isNaN(result)) {\n        // Overflowed TS's number type, so definitely out of bounds for f32\n        return F32Interval.any();\n      }\n      return correctlyRoundedInterval(result);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of ldexp(e1, e2) */\nexport function ldexpInterval(e1: number, e2: number): F32Interval {\n  return roundAndFlushBinaryToInterval(e1, e2, LdexpIntervalOp);\n}\n\nconst LengthIntervalScalarOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return sqrtInterval(multiplicationInterval(n, n));\n  },\n};\n\nconst LengthIntervalVectorOp: VectorToIntervalOp = {\n  impl: (n: number[]): F32Interval => {\n    return sqrtInterval(dotInterval(n, n));\n  },\n};\n\n/** Calculate an acceptance interval of length(x) */\nexport function lengthInterval(n: number | F32Interval | number[] | F32Vector): F32Interval {\n  if (n instanceof Array) {\n    return runVectorToIntervalOp(toF32Vector(n), LengthIntervalVectorOp);\n  } else {\n    return runPointToIntervalOp(toF32Interval(n), LengthIntervalScalarOp);\n  }\n}\n\nconst LogIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log(x) */\nexport function logInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), LogIntervalOp);\n}\n\nconst Log2IntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log2(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log2(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log2(x) */\nexport function log2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Log2IntervalOp);\n}\n\nconst MaxIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.max(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of max(x, y) */\nexport function maxInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MaxIntervalOp);\n}\n\nconst MinIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of min(x, y) */\nexport function minInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MinIntervalOp);\n}\n\nconst MixImpreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x + (y - x) * z =\n    //  x + t, where t = (y - x) * z\n    const t = multiplicationInterval(subtractionInterval(y, x), z);\n    return additionInterval(x, t);\n  },\n};\n\n/** All acceptance interval functions for mix(x, y, z) */\nexport const mixIntervals: TernaryToInterval[] = [mixImpreciseInterval, mixPreciseInterval];\n\n/** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\nexport function mixImpreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixImpreciseIntervalOp\n  );\n}\n\nconst MixPreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x * (1.0 - z) + y * z =\n    //   t + s, where t = x * (1.0 - z), s = y * z\n    const t = multiplicationInterval(x, subtractionInterval(1.0, z));\n    const s = multiplicationInterval(y, z);\n    return additionInterval(t, s);\n  },\n};\n\n/** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\nexport function mixPreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixPreciseIntervalOp\n  );\n}\n\n/** Calculate an acceptance interval of modf(x) */\nexport function modfInterval(n: number): { fract: F32Interval; whole: F32Interval } {\n  const fract = correctlyRoundedInterval(n % 1.0);\n  const whole = correctlyRoundedInterval(n - (n % 1.0));\n  return { fract, whole };\n}\n\nconst MultiplicationInnerOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x * y);\n  },\n};\n\nconst MultiplicationIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return roundAndFlushBinaryToInterval(x, y, MultiplicationInnerOp);\n  },\n};\n\n/** Calculate an acceptance interval of x * y */\nexport function multiplicationInterval(\n  x: number | F32Interval,\n  y: number | F32Interval\n): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MultiplicationIntervalOp);\n}\n\nconst NegationIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(-n);\n  },\n};\n\n/** Calculate an acceptance interval of -x */\nexport function negationInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), NegationIntervalOp);\n}\n\nconst NormalizeIntervalOp: VectorToVectorOp = {\n  impl: (n: number[]): F32Vector => {\n    const length = lengthInterval(n);\n    return toF32Vector(n.map(e => divisionInterval(e, length)));\n  },\n};\n\n/** Calculate an acceptance interval of normalize(x) */\nexport function normalizeInterval(n: number[]): F32Vector {\n  return runVectorToVectorOp(toF32Vector(n), NormalizeIntervalOp);\n}\n\nconst PowIntervalOp: BinaryToIntervalOp = {\n  // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n  // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n  // enforce this, so there is no need to wrap the impl call here.\n  impl: (x: number, y: number): F32Interval => {\n    return exp2Interval(multiplicationInterval(y, log2Interval(x)));\n  },\n};\n\n/** Calculate an acceptance interval of pow(x, y) */\nexport function powInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), PowIntervalOp);\n}\n\n// Once a full implementation of F16Interval exists, the correctlyRounded for\n// that can potentially be used instead of having a bespoke operation\n// implementation.\nconst QuantizeToF16IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const rounded = correctlyRoundedF16(n);\n    const flushed = addFlushedIfNeededF16(rounded);\n    return F32Interval.span(...flushed.map(toF32Interval));\n  },\n};\n\n/** Calculate an acceptance interval of quanitizeToF16(x) */\nexport function quantizeToF16Interval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), QuantizeToF16IntervalOp);\n}\n\nconst RadiansIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 0.017453292519943295474);\n  },\n};\n\n/** Calculate an acceptance interval of radians(x) */\nexport function radiansInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RadiansIntervalOp);\n}\n\nconst ReflectIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(\n      x.length === y.length,\n      `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n    );\n\n    // reflect(x, y) = x - 2.0 * dot(x, y) * y\n    //               = x - t * y, t = 2.0 * dot(x, y)\n    // x = incident vector\n    // y = normal of reflecting surface\n    const t = multiplicationInterval(2.0, dotInterval(x, y));\n    const rhs = multiplyVectorByScalar(y, t);\n    return runBinaryToIntervalOpVectorComponentWise(toF32Vector(x), rhs, SubtractionIntervalOp);\n  },\n};\n\n/** Calculate an acceptance interval of reflect(x, y) */\nexport function reflectInterval(x: number[], y: number[]): F32Vector {\n  assert(\n    x.length === y.length,\n    `reflect is only defined for vectors with the same number of elements`\n  );\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), ReflectIntervalOp);\n}\n\n/**\n * Calculate acceptance interval vectors of reflect(i, s, r)\n *\n * refract is a singular function in the sense that it is the only builtin that\n * takes in (F32Vector, F32Vector, F32) and returns F32Vector and is basically\n * defined in terms of other functions.\n *\n * Instead of implementing all of the framework code to integrate it with its\n * own operation type/etc, it instead has a bespoke implementation that is a\n * composition of other builtin functions that use the framework.\n */\nexport function refractInterval(i: number[], s: number[], r: number): F32Vector {\n  assert(\n    i.length === s.length,\n    `refract is only defined for vectors with the same number of elements`\n  );\n\n  const r_squared = multiplicationInterval(r, r);\n  const dot = dotInterval(s, i);\n  const dot_squared = multiplicationInterval(dot, dot);\n  const one_minus_dot_squared = subtractionInterval(1, dot_squared);\n  const k = subtractionInterval(1.0, multiplicationInterval(r_squared, one_minus_dot_squared));\n\n  if (!k.isFinite() || k.containsZeroOrSubnormals()) {\n    // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n    return kAnyVector[toF32Vector(i).length];\n  }\n\n  if (k.end < 0.0) {\n    // if k is negative, then the zero vector is the valid response\n    return kZeroVector[toF32Vector(i).length];\n  }\n\n  const dot_times_r = multiplicationInterval(dot, r);\n  const k_sqrt = sqrtInterval(k);\n  const t = additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n  const result = runBinaryToIntervalOpVectorComponentWise(\n    multiplyVectorByScalar(i, r),\n    multiplyVectorByScalar(s, t),\n    SubtractionIntervalOp\n  ); // (i * r) - (s * t)\n  return result;\n}\n\nconst RemainderIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    // x % y = x - y * trunc(x/y)\n    return subtractionInterval(x, multiplicationInterval(y, truncInterval(divisionInterval(x, y))));\n  },\n};\n\n/** Calculate an acceptance interval for x % y */\nexport function remainderInterval(x: number, y: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), RemainderIntervalOp);\n}\n\nconst RoundIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const k = Math.floor(n);\n    const diff_before = n - k;\n    const diff_after = k + 1 - n;\n    if (diff_before < diff_after) {\n      return correctlyRoundedInterval(k);\n    } else if (diff_before > diff_after) {\n      return correctlyRoundedInterval(k + 1);\n    }\n\n    // n is in the middle of two integers.\n    // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n    if (k % 2 === 0) {\n      return correctlyRoundedInterval(k);\n    }\n    return correctlyRoundedInterval(k + 1);\n  },\n};\n\n/** Calculate an acceptance interval of round(x) */\nexport function roundInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RoundIntervalOp);\n}\n\n/**\n * Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0)\n *\n * The definition of saturate is such that both possible implementations of\n * clamp will return the same value, so arbitrarily picking the minmax version\n * to use.\n */\nexport function saturateInterval(n: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(n),\n    toF32Interval(0.0),\n    toF32Interval(1.0),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst SignIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    if (n > 0.0) {\n      return correctlyRoundedInterval(1.0);\n    }\n    if (n < 0.0) {\n      return correctlyRoundedInterval(-1.0);\n    }\n\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function signInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SignIntervalOp);\n}\n\nconst SinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.sin(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function sinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinIntervalOp);\n}\n\nconst SinhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // sinh(x) = (exp(x) - exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(subtractionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of sinh(x) */\nexport function sinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinhIntervalOp);\n}\n\nconst SmoothStepOp: TernaryToIntervalOp = {\n  impl: (low: number, high: number, x: number): F32Interval => {\n    // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n    // the same value, so arbitrarily picking the minmax version to use.\n    // t = clamp((x - low) / (high - low), 0.0, 1.0)\n    // prettier-ignore\n    const t = clampMedianInterval(\n      divisionInterval(\n        subtractionInterval(x, low),\n        subtractionInterval(high, low)),\n      0.0,\n      1.0);\n    // Inherited from t * t * (3.0 - 2.0 * t)\n    // prettier-ignore\n    return multiplicationInterval(\n      t,\n      multiplicationInterval(t,\n        subtractionInterval(3.0,\n          multiplicationInterval(2.0, t))));\n  },\n};\n\n/** Calculate an acceptance interval of smoothStep(low, high, x) */\nexport function smoothStepInterval(low: number, high: number, x: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(low),\n    toF32Interval(high),\n    toF32Interval(x),\n    SmoothStepOp\n  );\n}\n\nconst SqrtIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(1.0, inverseSqrtInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of sqrt(x) */\nexport function sqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SqrtIntervalOp);\n}\n\nconst StepIntervalOp: BinaryToIntervalOp = {\n  impl: (edge: number, x: number): F32Interval => {\n    if (edge <= x) {\n      return correctlyRoundedInterval(1.0);\n    }\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance 'interval' for step(edge, x)\n *\n * step only returns two possible values, so its interval requires special\n * interpretation in CTS tests.\n * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n * indicate either 0.0 or 1.0 are acceptable answers.\n * [-∞, +∞] is treated as the any interval, since an undefined or infinite value was passed in.\n */\nexport function stepInterval(edge: number, x: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(edge), toF32Interval(x), StepIntervalOp);\n}\n\nconst SubtractionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x - y);\n  },\n};\n\n/** Calculate an acceptance interval of x - y */\nexport function subtractionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), SubtractionIntervalOp);\n}\n\n/** Calculate an acceptance interval of x - y, when x and y are matrices */\nexport function subtractionMatrixInterval(x: Matrix<number>, y: Matrix<number>): F32Matrix {\n  return runBinaryToIntervalOpMatrixComponentWise(\n    toF32Matrix(x),\n    toF32Matrix(y),\n    SubtractionIntervalOp\n  );\n}\n\nconst TanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinInterval(n), cosInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tan(x) */\nexport function tanInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanIntervalOp);\n}\n\nconst TanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinhInterval(n), coshInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tanh(x) */\nexport function tanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanhIntervalOp);\n}\n\nconst TransposeIntervalOp: MatrixToMatrixOp = {\n  impl: (m: Matrix<number>): F32Matrix => {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    const result: Matrix<F32Interval> = [...Array(num_rows)].map(_ => [...Array(num_cols)]);\n\n    for (let i = 0; i < num_cols; i++) {\n      for (let j = 0; j < num_rows; j++) {\n        result[j][i] = correctlyRoundedInterval(m[i][j]);\n      }\n    }\n    return toF32Matrix(result);\n  },\n};\n\n/** Calculate an acceptance interval of transpose(m) */\nexport function transposeInterval(m: number[][]): F32Matrix {\n  return runMatrixToMatrixOp(toF32Matrix(m), TransposeIntervalOp);\n}\n\nconst TruncIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.trunc(n));\n  },\n};\n\n/** Calculate an acceptance interval of trunc(x) */\nexport function truncInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TruncIntervalOp);\n}\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * unpackData* is shared between all of the unpack*Interval functions, so to avoid re-entrancy problems, they should\n * not call each other or themselves directly or indirectly.\n */\nconst unpackData = new ArrayBuffer(4);\nconst unpackDataU32 = new Uint32Array(unpackData);\nconst unpackDataU16 = new Uint16Array(unpackData);\nconst unpackDataU8 = new Uint8Array(unpackData);\nconst unpackDataI16 = new Int16Array(unpackData);\nconst unpackDataI8 = new Int8Array(unpackData);\nconst unpackDataF16 = new Float16Array(unpackData);\n\n/** Calculate an acceptance interval vector for unpack2x16float(x) */\nexport function unpack2x16floatInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16floatInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  if (unpackDataF16.some(f => !isFiniteF16(f))) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n\n  const result: F32Vector = [\n    quantizeToF16Interval(unpackDataF16[0]),\n    quantizeToF16Interval(unpackDataF16[1]),\n  ];\n\n  if (result.some(r => !r.isFinite())) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n  return result;\n}\n\nconst Unpack2x16snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 32767), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16snorm(x) */\nexport function unpack2x16snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16snormIntervalOp(unpackDataI16[0]), Unpack2x16snormIntervalOp(unpackDataI16[1])];\n}\n\nconst Unpack2x16unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 65535);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16unorm(x) */\nexport function unpack2x16unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16unormIntervalOp(unpackDataU16[0]), Unpack2x16unormIntervalOp(unpackDataU16[1])];\n}\n\nconst Unpack4x8snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 127), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8snorm(x) */\nexport function unpack4x8snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8snormIntervalOp(unpackDataI8[0]),\n    Unpack4x8snormIntervalOp(unpackDataI8[1]),\n    Unpack4x8snormIntervalOp(unpackDataI8[2]),\n    Unpack4x8snormIntervalOp(unpackDataI8[3]),\n  ];\n}\n\nconst Unpack4x8unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 255);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8unorm(x) */\nexport function unpack4x8unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8unormIntervalOp(unpackDataU8[0]),\n    Unpack4x8unormIntervalOp(unpackDataU8[1]),\n    Unpack4x8unormIntervalOp(unpackDataU8[2]),\n    Unpack4x8unormIntervalOp(unpackDataU8[3]),\n  ];\n}\n"],"mappings":"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"}