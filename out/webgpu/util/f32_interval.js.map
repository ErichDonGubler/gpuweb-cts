{"version":3,"file":"f32_interval.js","names":["FP","toF32Interval","n","f32","toInterval","isF32Vector","v","isVector","toF32Vector","toVector","spanF32Intervals","intervals","spanIntervals","isF32Matrix","m","isMatrix","toF32Matrix","toMatrix","correctlyRoundedInterval","correctlyRoundedMatrix","absoluteErrorInterval","error_range","ulpInterval","numULP","additionMatrixInterval","x","y","clampIntervals","clampMedianInterval","z","clampMinMaxInterval","crossInterval","determinantInterval","dotInterval","faceForwardIntervals","fmaInterval","lengthInterval","mixIntervals","mixImpreciseInterval","mixPreciseInterval","modfInterval","multiplicationMatrixScalarInterval","mat","scalar","multiplicationScalarMatrixInterval","multiplicationMatrixMatrixInterval","mat_x","mat_y","multiplicationMatrixVectorInterval","multiplicationVectorMatrixInterval","normalizeInterval","reflectInterval","refractInterval","i","s","r","smoothStepInterval","low","high","subtractionMatrixInterval","transposeInterval","unpack2x16floatInterval","unpack2x16snormInterval","unpack2x16unormInterval","unpack4x8snormInterval","unpack4x8unormInterval"],"sources":["../../../src/webgpu/util/f32_interval.ts"],"sourcesContent":["// This is a shim file with all the old/deprecated f32 API calls.\n// They currently just pass-through to the refactored FPContext implementation.\n// As CTS migrates over to directly calling the new API, these will be removed.\n\nimport { FPInterval, FPMatrix, FPVector, IntervalBounds, FP } from './floating_point.js';\n\n// Interfaces\n\nexport interface ScalarTripleToInterval {\n  (x: number, y: number, z: number): FPInterval;\n}\n\nexport interface ScalarToVector {\n  (n: number): FPVector;\n}\n\nexport interface VectorToInterval {\n  (x: number[]): FPInterval;\n}\n\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): FPInterval;\n}\n\nexport interface VectorToVector {\n  (x: number[]): FPVector;\n}\n\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): FPVector;\n}\n\nexport interface VectorScalarToVector {\n  (x: number[], y: number): FPVector;\n}\n\nexport interface ScalarVectorToVector {\n  (x: number, y: number[]): FPVector;\n}\n\nexport interface MatrixToScalar {\n  (m: number[][]): FPInterval;\n}\n\nexport interface MatrixToMatrix {\n  (m: number[][]): FPMatrix;\n}\n\nexport interface MatrixPairToMatrix {\n  (x: number[][], y: number[][]): FPMatrix;\n}\n\nexport interface MatrixScalarToMatrix {\n  (x: number[][], y: number): FPMatrix;\n}\n\nexport interface ScalarMatrixToMatrix {\n  (x: number, y: number[][]): FPMatrix;\n}\n\nexport interface MatrixVectorToVector {\n  (x: number[][], y: number[]): FPVector;\n}\n\nexport interface VectorMatrixToVector {\n  (x: number[], y: number[][]): FPVector;\n}\n\n// Containers\n\nexport type F32Vector = FPVector;\n\n// Utilities\n\nexport function toF32Interval(n: number | IntervalBounds | FPInterval): FPInterval {\n  return FP.f32.toInterval(n);\n}\n\nexport function isF32Vector(v: (number | IntervalBounds | FPInterval)[]): v is FPVector {\n  return FP.f32.isVector(v);\n}\n\nexport function toF32Vector(v: (number | IntervalBounds | FPInterval)[]): FPVector {\n  return FP.f32.toVector(v);\n}\n\nexport function spanF32Intervals(...intervals: FPInterval[]): FPInterval {\n  return FP.f32.spanIntervals(...intervals);\n}\n\nexport function isF32Matrix(\n  m: (number | IntervalBounds | FPInterval)[][] | FPVector[]\n): m is FPMatrix {\n  return FP.f32.isMatrix(m);\n}\n\nexport function toF32Matrix(m: (number | IntervalBounds | FPInterval)[][] | FPVector[]): FPMatrix {\n  return FP.f32.toMatrix(m);\n}\n\n// Accuracy Interval\n\nexport function correctlyRoundedInterval(n: number | FPInterval): FPInterval {\n  return FP.f32.correctlyRoundedInterval(n);\n}\n\nexport function correctlyRoundedMatrix(m: number[][]): FPMatrix {\n  return FP.f32.correctlyRoundedMatrix(m);\n}\n\nexport function absoluteErrorInterval(n: number, error_range: number): FPInterval {\n  return FP.f32.absoluteErrorInterval(n, error_range);\n}\n\nexport function ulpInterval(n: number, numULP: number): FPInterval {\n  return FP.f32.ulpInterval(n, numULP);\n}\n\nexport function additionMatrixInterval(x: number[][], y: number[][]): FPMatrix {\n  return FP.f32.additionMatrixInterval(x, y);\n}\n\nexport const clampIntervals = FP.f32.clampIntervals;\n\nexport function clampMedianInterval(\n  x: number | FPInterval,\n  y: number | FPInterval,\n  z: number | FPInterval\n): FPInterval {\n  return FP.f32.clampMedianInterval(x, y, z);\n}\n\nexport function clampMinMaxInterval(\n  x: number | FPInterval,\n  y: number | FPInterval,\n  z: number | FPInterval\n): FPInterval {\n  return FP.f32.clampMinMaxInterval(x, y, z);\n}\n\nexport function crossInterval(x: number[], y: number[]): FPVector {\n  return FP.f32.crossInterval(x, y);\n}\n\nexport function determinantInterval(m: number[][]): FPInterval {\n  return FP.f32.determinantInterval(m);\n}\n\nexport function dotInterval(x: number[] | FPInterval[], y: number[] | FPInterval[]): FPInterval {\n  return FP.f32.dotInterval(x, y);\n}\n\nexport function faceForwardIntervals(\n  x: number[],\n  y: number[],\n  z: number[]\n): (FPVector | undefined)[] {\n  return FP.f32.faceForwardIntervals(x, y, z);\n}\n\nexport function fmaInterval(x: number, y: number, z: number): FPInterval {\n  return FP.f32.fmaInterval(x, y, z);\n}\n\nexport function lengthInterval(n: number | FPInterval | number[] | FPVector): FPInterval {\n  return FP.f32.lengthInterval(n);\n}\n\nexport const mixIntervals = FP.f32.mixIntervals;\n\nexport function mixImpreciseInterval(x: number, y: number, z: number): FPInterval {\n  return FP.f32.mixImpreciseInterval(x, y, z);\n}\n\nexport function mixPreciseInterval(x: number, y: number, z: number): FPInterval {\n  return FP.f32.mixPreciseInterval(x, y, z);\n}\n\nexport function modfInterval(n: number): { fract: FPInterval; whole: FPInterval } {\n  return FP.f32.modfInterval(n);\n}\n\nexport function multiplicationMatrixScalarInterval(mat: number[][], scalar: number): FPMatrix {\n  return FP.f32.multiplicationMatrixScalarInterval(mat, scalar);\n}\n\nexport function multiplicationScalarMatrixInterval(scalar: number, mat: number[][]): FPMatrix {\n  return FP.f32.multiplicationScalarMatrixInterval(scalar, mat);\n}\n\nexport function multiplicationMatrixMatrixInterval(mat_x: number[][], mat_y: number[][]): FPMatrix {\n  return FP.f32.multiplicationMatrixMatrixInterval(mat_x, mat_y);\n}\n\nexport function multiplicationMatrixVectorInterval(x: number[][], y: number[]): FPVector {\n  return FP.f32.multiplicationMatrixVectorInterval(x, y);\n}\n\nexport function multiplicationVectorMatrixInterval(x: number[], y: number[][]): FPVector {\n  return FP.f32.multiplicationVectorMatrixInterval(x, y);\n}\n\nexport function normalizeInterval(n: number[]): FPVector {\n  return FP.f32.normalizeInterval(n);\n}\n\nexport function reflectInterval(x: number[], y: number[]): FPVector {\n  return FP.f32.reflectInterval(x, y);\n}\n\nexport function refractInterval(i: number[], s: number[], r: number): FPVector {\n  return FP.f32.refractInterval(i, s, r);\n}\n\nexport function smoothStepInterval(low: number, high: number, x: number): FPInterval {\n  return FP.f32.smoothStepInterval(low, high, x);\n}\n\nexport function subtractionMatrixInterval(x: number[][], y: number[][]): FPMatrix {\n  return FP.f32.subtractionMatrixInterval(x, y);\n}\n\nexport function transposeInterval(m: number[][]): FPMatrix {\n  return FP.f32.transposeInterval(m);\n}\n\nexport function unpack2x16floatInterval(n: number): FPVector {\n  return FP.f32.unpack2x16floatInterval(n);\n}\n\nexport function unpack2x16snormInterval(n: number): FPVector {\n  return FP.f32.unpack2x16snormInterval(n);\n}\n\nexport function unpack2x16unormInterval(n: number): FPVector {\n  return FP.f32.unpack2x16unormInterval(n);\n}\n\nexport function unpack4x8snormInterval(n: number): FPVector {\n  return FP.f32.unpack4x8snormInterval(n);\n}\n\nexport function unpack4x8unormInterval(n: number): FPVector {\n  return FP.f32.unpack4x8unormInterval(n);\n}\n"],"mappings":"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"}