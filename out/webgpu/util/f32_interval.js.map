{"version":3,"sources":["../../../src/webgpu/util/f32_interval.ts"],"names":["assert","unreachable","Float16Array","kValue","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","flushSubnormalNumberF32","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","oneULP","F32Interval","constructor","bounds","begin","end","length","Number","isNaN","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","i","toF32Interval","containsZeroOrSubnormals","f32","subnormal","negative","min","positive","max","isFinite","span","intervals","forEach","Math","toString","any","_any","undefined","Array","kNegPiToPiInterval","pi","whole","kGreaterThanZeroInterval","isF32Vector","v","toF32Vector","f","map","kZeroVector","kAnyVector","spanF32Vector","vectors","vector_length","every","e","_","idx","multiplyVectorByScalar","c","x","multiplicationInterval","addFlushedIfNeededF32","values","some","concat","addFlushedIfNeededF16","limitPointToIntervalDomain","domain","impl","limitBinaryToIntervalDomain","y","d","roundAndFlushPointToInterval","op","inputs","results","Set","roundAndFlushBinaryToInterval","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushTernaryToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","runPointToIntervalOp","extrema","result","b","runBinaryToIntervalOp","outputs","runTernaryToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","runPointToIntervalOpComponentWise","runVectorPairToVectorOp","runBinaryToIntervalOpComponentWise","CorrectlyRoundedIntervalOp","correctlyRoundedInterval","AbsoluteErrorIntervalOp","error_range","absoluteErrorInterval","abs","ULPIntervalOp","numULP","ulp","ulpInterval","AbsIntervalOp","absInterval","AcosIntervalOp","sqrtInterval","subtractionInterval","atan2Interval","acosInterval","acoshIntervals","acoshAlternativeInterval","acoshPrimaryInterval","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","AcoshPrimaryIntervalOp","AdditionIntervalOp","AsinIntervalOp","asinInterval","AsinhIntervalOp","asinhInterval","AtanIntervalOp","atan","atanInterval","Atan2IntervalOp","atan_yx","divisionInterval","AtanhIntervalOp","numerator","denominator","log_interval","atanhInterval","CeilIntervalOp","ceil","ceilInterval","ClampMedianIntervalOp","sort","a","clampIntervals","clampMinMaxInterval","clampMedianInterval","ClampMinMaxIntervalOp","low","high","CosIntervalOp","cos","cosInterval","CoshIntervalOp","minus_n","negationInterval","expInterval","coshInterval","CrossIntervalOp","r0","r1","r2","crossInterval","DegreesIntervalOp","degreesInterval","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceInterval","DivisionIntervalOp","DotIntervalOp","multiplications","MultiplicationIntervalOp","reduce","previous","current","dotInterval","ExpIntervalOp","exp","Exp2IntervalOp","pow","exp2Interval","faceForwardIntervals","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","push","FloorIntervalOp","floor","floorInterval","FmaIntervalOp","fmaInterval","FractIntervalOp","less_than_one","fractInterval","InverseSqrtIntervalOp","sqrt","inverseSqrtInterval","LdexpIntervalOp","e1","e2","ldexpInterval","LengthIntervalScalarOp","LengthIntervalVectorOp","LogIntervalOp","log","Log2IntervalOp","log2","log2Interval","MaxIntervalOp","maxInterval","MinIntervalOp","minInterval","MixImpreciseIntervalOp","t","mixIntervals","mixImpreciseInterval","mixPreciseInterval","MixPreciseIntervalOp","s","MultiplicationInnerOp","NormalizeIntervalOp","normalizeInterval","PowIntervalOp","powInterval","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16Interval","RadiansIntervalOp","radiansInterval","ReflectIntervalOp","rhs","reflectInterval","refractInterval","r","r_squared","dot","dot_squared","one_minus_dot_squared","k","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderInterval","RoundIntervalOp","diff_before","diff_after","roundInterval","saturateInterval","SignIntervalOp","signInterval","SinIntervalOp","sin","sinInterval","SinhIntervalOp","sinhInterval","SmoothStepOp","smoothStepInterval","SqrtIntervalOp","StepIntervalOp","edge","stepInterval","TanIntervalOp","tanInterval","TanhIntervalOp","tanhInterval","TruncIntervalOp","trunc","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatInterval","u32","Unpack2x16snormIntervalOp","unpack2x16snormInterval","Unpack2x16unormIntervalOp","unpack2x16unormInterval","Unpack4x8snormIntervalOp","unpack4x8snormInterval","Unpack4x8unormIntervalOp","unpack4x8unormInterval"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { kValue } from './constants.js';\nimport {\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  flushSubnormalNumberF32,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  oneULP,\n} from './math.js';\n\n/**\n * Representation of bounds for an interval as an array with either one or two\n * elements. Single element indicates that the interval is a single point. For\n * two elements, the first is the lower bound of the interval and the second is\n * the upper bound.\n */\nexport type IntervalBounds = [number] | [number, number];\n\n/** Represents a closed interval in the f32 range */\nexport class F32Interval {\n  public readonly begin: number;\n  public readonly end: number;\n  private static _any: F32Interval;\n\n  /** Constructor\n   *\n   * @param bounds either a pair of numbers indicating the beginning then the\n   *               end of the interval, or a single element array indicating the\n   *               interval is a point\n   */\n  public constructor(...bounds: IntervalBounds) {\n    const [begin, end] = bounds.length === 2 ? bounds : [bounds[0], bounds[0]];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `bounds need to be non-NaN`);\n    assert(begin <= end, `bounds[0] (${begin}) must be less than or equal to bounds[1]  (${end})`);\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  public bounds(): IntervalBounds {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  public contains(n: number | F32Interval): boolean {\n    if (Number.isNaN(n)) {\n      // Being the any interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n    const i = toF32Interval(n);\n    return this.begin <= i.begin && this.end >= i.end;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  public containsZeroOrSubnormals(): boolean {\n    return !(\n      this.end < kValue.f32.subnormal.negative.min || this.begin > kValue.f32.subnormal.positive.max\n    );\n  }\n\n  /** @returns if this interval contains a single point */\n  public isPoint(): boolean {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains f32 finite values */\n  public isFinite(): boolean {\n    return isFiniteF32(this.begin) && isFiniteF32(this.end);\n  }\n\n  /** @returns an interval with the tightest bounds that includes all provided intervals */\n  static span(...intervals: F32Interval[]): F32Interval {\n    assert(intervals.length > 0, `span of an empty list of F32Intervals is not allowed`);\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach(i => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return new F32Interval(begin, end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  public toString(): string {\n    return `[${this.bounds()}]`;\n  }\n\n  /** @returns a singleton for interval of all possible values\n   * This interval is used in situations where accuracy is not defined, so any\n   * result is valid.\n   */\n  public static any(): F32Interval {\n    if (this._any === undefined) {\n      this._any = new F32Interval(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n    }\n    return this._any;\n  }\n}\n\n/** @returns an interval containing the point or the original interval */\nfunction toF32Interval(n: number | IntervalBounds | F32Interval): F32Interval {\n  if (n instanceof F32Interval) {\n    return n;\n  }\n\n  if (n instanceof Array) {\n    return new F32Interval(...n);\n  }\n\n  return new F32Interval(n, n);\n}\n\n/** F32Interval of [-π, π] */\nconst kNegPiToPiInterval = new F32Interval(\n  kValue.f32.negative.pi.whole,\n  kValue.f32.positive.pi.whole\n);\n\n/** F32Interval of values greater than 0 and less than or equal to f32 max */\nconst kGreaterThanZeroInterval = new F32Interval(\n  kValue.f32.subnormal.positive.min,\n  kValue.f32.positive.max\n);\n\n/** Representation of a vec2/3/4 of floating point intervals as an array of F32Intervals */\ntype F32Vector =\n  | [F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval, F32Interval];\n\n/** Coerce F32Interval[] to F32Vector if possible */\nfunction isF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): v is F32Vector {\n  if (v[0] instanceof F32Interval) {\n    return v.length === 2 || v.length === 3 || v.length === 4;\n  }\n  return false;\n}\n\n/** @returns an F32Vector representation of an array fo F32Intervals if possible */\nexport function toF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): F32Vector {\n  if (isF32Vector(v)) {\n    return v;\n  }\n\n  const f = v.map(toF32Interval);\n  if (isF32Vector(f)) {\n    return f;\n  }\n  unreachable(`Cannot convert [${v}] to F32Vector`);\n}\n\n/** F32Vector with all zero elements */\nconst kZeroVector = {\n  2: toF32Vector([0, 0]),\n  3: toF32Vector([0, 0, 0]),\n  4: toF32Vector([0, 0, 0, 0]),\n};\n\n/** F32Vector with all F32Interval.any() elements */\nconst kAnyVector = {\n  2: toF32Vector([F32Interval.any(), F32Interval.any()]),\n  3: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n  4: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n};\n\n/**\n * @returns a F32Vector where each element is the span for corresponding\n *          elements at the same index in the input vectors\n */\nfunction spanF32Vector(...vectors: F32Vector[]): F32Vector {\n  const vector_length = vectors[0].length;\n  assert(\n    vectors.every(e => e.length === vector_length),\n    `Vector span is not defined for vectors of differing lengths`\n  );\n\n  // The outer map is doing the walk across a single F32Vector to get the indices to use.\n  // The inner map is doing the walk across the of the vector array, collecting the value of each vector at the\n  // index, then spanning them down to a single F32Interval.\n  // The toF32Vector coerces things at the end to be a F32Vector, because the outer .map() will actually return a\n  // F32Interval[]\n  return toF32Vector(\n    vectors[0].map((_, idx) => {\n      return F32Interval.span(...vectors.map(v => v[idx]));\n    })\n  );\n}\n\n/**\n * @retuns the vector result of multiplying the given vector by the given scalar\n */\nfunction multiplyVectorByScalar(v: number[], c: number | F32Interval): F32Vector {\n  return toF32Vector(v.map(x => multiplicationInterval(x, c)));\n}\n\n/**\n * @returns the input plus zero if any of the entries are f32 subnormal,\n * otherwise returns the input.\n */\nfunction addFlushedIfNeededF32(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF32(v)) ? values.concat(0) : values;\n}\n\n/**\n * @returns the input plus zero if any of the entries are f16 subnormal,\n * otherwise returns the input\n */\nfunction addFlushedIfNeededF16(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToInterval {\n  (x: number): F32Interval;\n}\n\n/** Operation used to implement a PointToInterval */\nexport interface PointToIntervalOp {\n  /** @returns acceptance interval for a function at point x */\n  impl: PointToInterval;\n\n  /**\n   * Calculates where in the domain defined by x the min/max extrema of impl\n   * occur and returns a span of those points to be used as the domain instead.\n   *\n   * Used by runPointToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for operations that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   *      i.e. fooInterval takes in x: number | F32Interval, not x: number\n   */\n  extrema?: (x: F32Interval) => F32Interval;\n}\n\n/**\n * Restrict the inputs to an PointToInterval operation\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain interval to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a PointToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitPointToIntervalDomain(domain: F32Interval, impl: PointToInterval): PointToInterval {\n  return (n: number): F32Interval => {\n    return domain.contains(n) ? impl(n) : F32Interval.any();\n  };\n}\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface BinaryToInterval {\n  (x: number, y: number): F32Interval;\n}\n\n/** Operation used to implement a BinaryToInterval */\ninterface BinaryToIntervalOp {\n  /** @returns acceptance interval for a function at point (x, y) */\n  impl: BinaryToInterval;\n  /**\n   * Calculates where in domain defined by x & y the min/max extrema of impl\n   * occur and returns spans of those points to be used as the domain instead.\n   *\n   * Used by runBinaryToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for functions that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   */\n  extrema?: (x: F32Interval, y: F32Interval) => [F32Interval, F32Interval];\n}\n\n/** Domain for a BinaryToInterval implementation */\ninterface BinaryToIntervalDomain {\n  x: F32Interval;\n  // y is an array to support handling domains composed of discrete intervals\n  y: F32Interval[];\n}\n\n/**\n * Restrict the inputs to a BinaryToInterval\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain set of intervals to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a BinaryToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitBinaryToIntervalDomain(\n  domain: BinaryToIntervalDomain,\n  impl: BinaryToInterval\n): BinaryToInterval {\n  return (x: number, y: number): F32Interval => {\n    if (!domain.x.contains(x)) {\n      return F32Interval.any();\n    }\n\n    if (!domain.y.some(d => d.contains(y))) {\n      return F32Interval.any();\n    }\n\n    return impl(x, y);\n  };\n}\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface TernaryToInterval {\n  (x: number, y: number, z: number): F32Interval;\n}\n\n/** Operation used to implement a TernaryToInterval */\ninterface TernaryToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function at point (x, y, z) */\n  impl: TernaryToInterval;\n}\n\n// Currently PointToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToVector {\n  (n: number): F32Vector;\n}\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToInterval {\n  (x: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorToInterval */\ninterface VectorToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vector x */\n  impl: VectorToInterval;\n}\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorPairToInterval */\ninterface VectorPairToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vectors (x, y) */\n  impl: VectorPairToInterval;\n}\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToVector {\n  (x: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorToVector */\ninterface VectorToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vector x */\n  impl: VectorToVector;\n}\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorPairToVector */\ninterface VectorPairToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vectors (x, y) */\n  impl: VectorPairToVector;\n}\n\n/** Converts a point to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param n value to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushPointToInterval(n: number, op: PointToIntervalOp) {\n  assert(!Number.isNaN(n), `flush not defined for NaN`);\n  const values = correctlyRoundedF32(n);\n  const inputs = addFlushedIfNeededF32(values);\n  const results = new Set<F32Interval>(inputs.map(op.impl));\n  return F32Interval.span(...results);\n}\n\n/** Converts a pair to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushBinaryToInterval(x: number, y: number, op: BinaryToIntervalOp): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a triplet to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x, y & z are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param z third param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushTernaryToInterval(\n  x: number,\n  y: number,\n  z: number,\n  op: TernaryToIntervalOp\n): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  assert(!Number.isNaN(z), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const z_values = correctlyRoundedF32(z);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const z_inputs = addFlushedIfNeededF32(z_values);\n  const intervals = new Set<F32Interval>();\n  // prettier-ignore\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      z_inputs.forEach(inner_z => {\n        intervals.add(op.impl(inner_x, inner_y, inner_z));\n      });\n    });\n  });\n\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorToInterval(x: number[], op: VectorToIntervalOp): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    intervals.add(op.impl(inner_x));\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a pair of vectors to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorPairToInterval(\n  x: number[],\n  y: number[],\n  op: VectorPairToIntervalOp\n): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to a vector of acceptance intervals using a specific\n * function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each outputs of op.impl\n */\nfunction roundAndFlushVectorToVector(x: number[], op: VectorToVectorOp): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    interval_vectors.add(op.impl(inner_x));\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/**\n * Converts a pair of vectors to a vector of acceptance intervals using a\n * specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param x second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each output of op.impl\n */\nfunction roundAndFlushVectorPairToVector(\n  x: number[],\n  y: number[],\n  op: VectorPairToVectorOp\n): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      interval_vectors.add(op.impl(inner_x, inner_y));\n    });\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/** Calculate the acceptance interval for a unary function over an interval\n *\n * If the interval is actually a point, this just decays to\n * roundAndFlushPointToInterval.\n *\n * The provided domain interval may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runPointToIntervalOp(x: F32Interval, op: PointToIntervalOp): F32Interval {\n  if (!x.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    x = op.extrema(x);\n  }\n\n  const result = F32Interval.span(...x.bounds().map(b => roundAndFlushPointToInterval(b, op)));\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a binary function over an interval\n *\n * The provided domain intervals may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runBinaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  op: BinaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    [x, y] = op.extrema(x, y);\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      outputs.add(roundAndFlushBinaryToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a ternary function over an interval\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param z third input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runTernaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  z: F32Interval,\n  op: TernaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n    return F32Interval.any();\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      z.bounds().forEach(inner_z => {\n        outputs.add(roundAndFlushTernaryToInterval(inner_x, inner_y, inner_z, op));\n      });\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector function over given intervals\n *\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorToIntervalOp(x: F32Vector, op: VectorToIntervalOp): F32Interval {\n  if (x.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToInterval(inner_x, op));\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector pair function over given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorPairToIntervalOp(\n  x: F32Vector,\n  y: F32Vector,\n  op: VectorPairToIntervalOp\n): F32Interval {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the vector of acceptance intervals for a pair of vector function over\n * given intervals\n *\n * @param x input domain intervals vector\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorToVectorOp(x: F32Vector, op: VectorToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToVector(inner_x, op));\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a vector.\n *\n * This is used for situations where a component-wise operation, like vector\n * negation, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runPointToIntervalOpComponentWise(x: F32Vector, op: PointToIntervalOp): F32Vector {\n  return toF32Vector(\n    x.map(i => {\n      return runPointToIntervalOp(i, op);\n    })\n  );\n}\n\n/** Calculate the vector of acceptance intervals for a vector function over\n * given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorPairToVectorOp(x: F32Vector, y: F32Vector, op: VectorPairToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n    });\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a pair vectors.\n *\n * This is used for situations where a component-wise operation, like vector\n * subtraction, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runBinaryToIntervalOpComponentWise(\n  x: F32Vector,\n  y: F32Vector,\n  op: BinaryToIntervalOp\n): F32Vector {\n  assert(\n    x.length === y.length,\n    `runBinaryToIntervalOpComponentWise requires vectors of the same length`\n  );\n  return toF32Vector(\n    x.map((i, idx) => {\n      return runBinaryToIntervalOp(i, y[idx], op);\n    })\n  );\n}\n\n/** Defines a PointToIntervalOp for an interval of the correctly rounded values around the point */\nconst CorrectlyRoundedIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    assert(!Number.isNaN(n), `absolute not defined for NaN`);\n    return toF32Interval(n);\n  },\n};\n\n/** @returns an interval of the correctly rounded values around the point */\nexport function correctlyRoundedInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CorrectlyRoundedIntervalOp);\n}\n\n/** @returns a PointToIntervalOp for [n - error_range, n + error_range] */\nfunction AbsoluteErrorIntervalOp(error_range: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(error_range)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n      return new F32Interval(n - error_range, n + error_range);\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of the absolute error around the point */\nexport function absoluteErrorInterval(n: number, error_range: number): F32Interval {\n  error_range = Math.abs(error_range);\n  return runPointToIntervalOp(toF32Interval(n), AbsoluteErrorIntervalOp(error_range));\n}\n\n/** @returns a PointToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\nfunction ULPIntervalOp(numULP: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(numULP)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n      const ulp = oneULP(n);\n      const begin = n - numULP * ulp;\n      const end = n + numULP * ulp;\n\n      return new F32Interval(\n        Math.min(begin, flushSubnormalNumberF32(begin)),\n        Math.max(end, flushSubnormalNumberF32(end))\n      );\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of N * ULP around the point */\nexport function ulpInterval(n: number, numULP: number): F32Interval {\n  numULP = Math.abs(numULP);\n  return runPointToIntervalOp(toF32Interval(n), ULPIntervalOp(numULP));\n}\n\nconst AbsIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    return correctlyRoundedInterval(Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for abs(n) */\nexport function absInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AbsIntervalOp);\n}\n\nconst AcosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // acos(n) = atan2(sqrt(1.0 - n * n), n)\n    const y = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(y, n);\n  }),\n};\n\n/** Calculate an acceptance interval for acos(n) */\nexport function acosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AcosIntervalOp);\n}\n\n/** All acceptance interval functions for acosh(x) */\nexport const acoshIntervals: PointToInterval[] = [acoshAlternativeInterval, acoshPrimaryInterval];\n\nconst AcoshAlternativeIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n    const inner_value = multiplicationInterval(\n      additionInterval(x, 1.0),\n      subtractionInterval(x, 1.0)\n    );\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\nexport function acoshAlternativeInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshAlternativeIntervalOp);\n}\n\nconst AcoshPrimaryIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt(x * x - 1.0))\n    const inner_value = subtractionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\nexport function acoshPrimaryInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshPrimaryIntervalOp);\n}\n\nconst AdditionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x + y);\n  },\n};\n\n/** Calculate an acceptance interval of x + y */\nexport function additionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), AdditionIntervalOp);\n}\n\nconst AsinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // asin(n) = atan2(n, sqrt(1.0 - n * n))\n    const x = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(n, x);\n  }),\n};\n\n/** Calculate an acceptance interval for asin(n) */\nexport function asinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinIntervalOp);\n}\n\nconst AsinhIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // asinh(x) = log(x + sqrt(x * x + 1.0))\n    const inner_value = additionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of asinh(x) */\nexport function asinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinhIntervalOp);\n}\n\nconst AtanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.atan(n), 4096);\n  },\n};\n\n/** Calculate an acceptance interval of atan(x) */\nexport function atanInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanIntervalOp);\n}\n\nconst Atan2IntervalOp: BinaryToIntervalOp = {\n  impl: (y: number, x: number): F32Interval => {\n    // y/x is not defined meaningfully here\n    if (x === 0) {\n      return F32Interval.any();\n    }\n\n    // atan2's accuracy is only defined if y is normal\n    if (isSubnormalNumberF32(y)) {\n      return F32Interval.any();\n    }\n\n    const atan_yx = atanInterval(divisionInterval(y, x));\n    // x > 0, atan(y/x)\n    if (x > 0) {\n      return atan_yx;\n    }\n\n    // x < 0, y > 0, atan(y/x) + π\n    if (y > 0) {\n      return additionInterval(atan_yx, kValue.f32.positive.pi.whole);\n    }\n\n    // x < 0, y < 0, atan(y/x) - π\n    return subtractionInterval(atan_yx, kValue.f32.positive.pi.whole);\n  },\n  extrema: (y: F32Interval, x: F32Interval): [F32Interval, F32Interval] => {\n    // There is discontinuity + undefined behaviour at y/x = 0 that will dominate the accuracy\n    if (y.contains(0)) {\n      if (x.contains(0)) {\n        return [toF32Interval(0), toF32Interval(0)];\n      }\n      return [toF32Interval(0), x];\n    }\n    return [y, x];\n  },\n};\n\n/** Calculate an acceptance interval of atan2(y, x) */\nexport function atan2Interval(y: number | F32Interval, x: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(y), toF32Interval(x), Atan2IntervalOp);\n}\n\nconst AtanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n    const numerator = additionInterval(1.0, n);\n    const denominator = subtractionInterval(1.0, n);\n    const log_interval = logInterval(divisionInterval(numerator, denominator));\n    return multiplicationInterval(log_interval, 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of atanh(x) */\nexport function atanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanhIntervalOp);\n}\n\nconst CeilIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.ceil(n));\n  },\n};\n\n/** Calculate an acceptance interval of ceil(x) */\nexport function ceilInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CeilIntervalOp);\n}\n\nconst ClampMedianIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return correctlyRoundedInterval(\n      // Default sort is string sort, so have to implement numeric comparison.\n      // Cannot use the b-a one liner, because that assumes no infinities.\n      [x, y, z].sort((a, b) => {\n        if (a < b) {\n          return -1;\n        }\n        if (a > b) {\n          return 1;\n        }\n        return 0;\n      })[1]\n    );\n  },\n};\n\n/** All acceptance interval functions for clamp(x, y, z) */\nexport const clampIntervals: TernaryToInterval[] = [clampMinMaxInterval, clampMedianInterval];\n\n/** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\nexport function clampMedianInterval(\n  x: number | F32Interval,\n  y: number | F32Interval,\n  z: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    ClampMedianIntervalOp\n  );\n}\n\nconst ClampMinMaxIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, low: number, high: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(Math.max(x, low), high));\n  },\n};\n\n/** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\nexport function clampMinMaxInterval(\n  x: number | F32Interval,\n  low: number | F32Interval,\n  high: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(low),\n    toF32Interval(high),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst CosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.cos(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of cos(x) */\nexport function cosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CosIntervalOp);\n}\n\nconst CoshIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // cosh(x) = (exp(x) + exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(additionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of cosh(x) */\nexport function coshInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CoshIntervalOp);\n}\n\nconst CrossIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n    assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n    // cross(x, y) = r, where\n    //   r[0] = x[1] * y[2] - x[2] * y[1]\n    //   r[1] = x[2] * y[0] - x[0] * y[2]\n    //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n    const r0 = subtractionInterval(\n      multiplicationInterval(x[1], y[2]),\n      multiplicationInterval(x[2], y[1])\n    );\n    const r1 = subtractionInterval(\n      multiplicationInterval(x[2], y[0]),\n      multiplicationInterval(x[0], y[2])\n    );\n    const r2 = subtractionInterval(\n      multiplicationInterval(x[0], y[1]),\n      multiplicationInterval(x[1], y[0])\n    );\n    return [r0, r1, r2];\n  },\n};\n\nexport function crossInterval(x: number[], y: number[]): F32Vector {\n  assert(x.length === 3, `Cross is only defined for vec3`);\n  assert(y.length === 3, `Cross is only defined for vec3`);\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), CrossIntervalOp);\n}\n\nconst DegreesIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 57.295779513082322865);\n  },\n};\n\n/** Calculate an acceptance interval of degrees(x) */\nexport function degreesInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), DegreesIntervalOp);\n}\n\nconst DistanceIntervalScalarOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return lengthInterval(subtractionInterval(x, y));\n  },\n};\n\nconst DistanceIntervalVectorOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    return lengthInterval(\n      runBinaryToIntervalOpComponentWise(toF32Vector(x), toF32Vector(y), SubtractionIntervalOp)\n    );\n  },\n};\n\n/** Calculate an acceptance interval of distance(x, y) */\nexport function distanceInterval(x: number | number[], y: number | number[]): F32Interval {\n  if (x instanceof Array && y instanceof Array) {\n    assert(\n      x.length === y.length,\n      `distanceInterval requires both params to have the same number of elements`\n    );\n    return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DistanceIntervalVectorOp);\n  } else if (!(x instanceof Array) && !(y instanceof Array)) {\n    return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DistanceIntervalScalarOp);\n  }\n  unreachable(\n    `distanceInterval requires both params to both the same type, either scalars or vectors`\n  );\n}\n\nconst DivisionIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    {\n      x: new F32Interval(kValue.f32.negative.min, kValue.f32.positive.max),\n      y: [new F32Interval(-(2 ** 126), -(2 ** -126)), new F32Interval(2 ** -126, 2 ** 126)],\n    },\n    (x: number, y: number): F32Interval => {\n      if (y === 0) {\n        return F32Interval.any();\n      }\n      return ulpInterval(x / y, 2.5);\n    }\n  ),\n  extrema: (x: F32Interval, y: F32Interval): [F32Interval, F32Interval] => {\n    // division has a discontinuity at y = 0.\n    if (y.contains(0)) {\n      y = toF32Interval(0);\n    }\n    return [x, y];\n  },\n};\n\n/** Calculate an acceptance interval of x / y */\nexport function divisionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DivisionIntervalOp);\n}\n\nconst DotIntervalOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    // dot(x, y) = sum of x[i] * y[i]\n    const multiplications = runBinaryToIntervalOpComponentWise(\n      toF32Vector(x),\n      toF32Vector(y),\n      MultiplicationIntervalOp\n    );\n    return multiplications.reduce((previous, current) => additionInterval(previous, current));\n  },\n};\n\nexport function dotInterval(x: number[], y: number[]): F32Interval {\n  assert(x.length === y.length, `dot not defined for vectors with different lengths`);\n  return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DotIntervalOp);\n}\n\nconst ExpIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.exp(n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp(x) */\nexport function expInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), ExpIntervalOp);\n}\n\nconst Exp2IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.pow(2, n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp2(x) */\nexport function exp2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Exp2IntervalOp);\n}\n\n/**\n * Calculate the acceptance intervals for faceForward(x, y, z)\n *\n * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n *\n * This builtin selects from two discrete results (delta rounding/flushing), so\n * the majority of the framework code is not appropriate, since the framework\n * attempts to span results.\n *\n * Thus a bespoke implementation is used instead of\n * defining a Op and running that through the framework.\n */\nexport function faceForwardIntervals(x: number[], y: number[], z: number[]): F32Vector[] {\n  const x_vec = toF32Vector(x);\n  // Running vector through runPointToIntervalOpComponentWise to make sure that flushing/rounding is handled, since\n  // toF32Vector does not perform those operations.\n  const positive_x = runPointToIntervalOpComponentWise(x_vec, { impl: toF32Interval });\n  const negative_x = runPointToIntervalOpComponentWise(x_vec, NegationIntervalOp);\n\n  const dot_interval = dotInterval(z, y);\n  const results = new Array<F32Vector>();\n\n  // Because the result of dot can be an interval, it might span across 0, thus it is possible that both -x and x are\n  // valid responses.\n  if (dot_interval.begin < 0 || dot_interval.end < 0) {\n    results.push(positive_x);\n  }\n\n  if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n    results.push(negative_x);\n  }\n\n  assert(\n    results.length > 0,\n    `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n  );\n  return results;\n}\n\nconst FloorIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.floor(n));\n  },\n};\n\n/** Calculate an acceptance interval of floor(x) */\nexport function floorInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FloorIntervalOp);\n}\n\nconst FmaIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return additionInterval(multiplicationInterval(x, y), z);\n  },\n};\n\n/** Calculate an acceptance interval for fma(x, y, z) */\nexport function fmaInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    FmaIntervalOp\n  );\n}\n\nconst FractIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // fract(x) = x - floor(x) is defined in the spec.\n    // For people coming from a non-graphics background this will cause some unintuitive results. For example,\n    // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n    // This is how other shading languages operate and allows for a desirable wrap around in graphics programming.\n    const result = subtractionInterval(n, floorInterval(n));\n    if (result.contains(1)) {\n      // Very small negative numbers can lead to catastrophic cancellation, thus calculating a fract of 1.0, which is\n      // technically not a fractional part, so some implementations clamp the result to next nearest number.\n      return F32Interval.span(result, toF32Interval(kValue.f32.positive.less_than_one));\n    }\n    return result;\n  },\n};\n\n/** Calculate an acceptance interval of fract(x) */\nexport function fractInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FractIntervalOp);\n}\n\nconst InverseSqrtIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      return ulpInterval(1 / Math.sqrt(n), 2);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of inverseSqrt(x) */\nexport function inverseSqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), InverseSqrtIntervalOp);\n}\n\nconst LdexpIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    // Implementing SPIR-V's more restrictive domain until\n    // https://github.com/gpuweb/gpuweb/issues/3134 is resolved\n    {\n      x: new F32Interval(kValue.f32.negative.min, kValue.f32.positive.max),\n      y: [new F32Interval(-126, 128)],\n    },\n    (e1: number, e2: number): F32Interval => {\n      // Though the spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, the\n      // accuracy is listed as correctly rounded to the true value, so the\n      // inheritance framework does not need to be invoked to determine bounds.\n      // Instead the value at a higher precision is calculated and passed to\n      // correctlyRoundedInterval.\n      const result = e1 * 2 ** e2;\n      if (Number.isNaN(result)) {\n        // Overflowed TS's number type, so definitely out of bounds for f32\n        return F32Interval.any();\n      }\n      return correctlyRoundedInterval(result);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of ldexp(e1, e2) */\nexport function ldexpInterval(e1: number, e2: number): F32Interval {\n  return roundAndFlushBinaryToInterval(e1, e2, LdexpIntervalOp);\n}\n\nconst LengthIntervalScalarOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return sqrtInterval(multiplicationInterval(n, n));\n  },\n};\n\nconst LengthIntervalVectorOp: VectorToIntervalOp = {\n  impl: (n: number[]): F32Interval => {\n    return sqrtInterval(dotInterval(n, n));\n  },\n};\n\n/** Calculate an acceptance interval of length(x) */\nexport function lengthInterval(n: number | F32Interval | number[] | F32Vector): F32Interval {\n  if (n instanceof Array) {\n    return runVectorToIntervalOp(toF32Vector(n), LengthIntervalVectorOp);\n  } else {\n    return runPointToIntervalOp(toF32Interval(n), LengthIntervalScalarOp);\n  }\n}\n\nconst LogIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log(x) */\nexport function logInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), LogIntervalOp);\n}\n\nconst Log2IntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log2(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log2(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log2(x) */\nexport function log2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Log2IntervalOp);\n}\n\nconst MaxIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.max(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of max(x, y) */\nexport function maxInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MaxIntervalOp);\n}\n\nconst MinIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of min(x, y) */\nexport function minInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MinIntervalOp);\n}\n\nconst MixImpreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x + (y - x) * z =\n    //  x + t, where t = (y - x) * z\n    const t = multiplicationInterval(subtractionInterval(y, x), z);\n    return additionInterval(x, t);\n  },\n};\n\n/** All acceptance interval functions for mix(x, y, z) */\nexport const mixIntervals: TernaryToInterval[] = [mixImpreciseInterval, mixPreciseInterval];\n\n/** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\nexport function mixImpreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixImpreciseIntervalOp\n  );\n}\n\nconst MixPreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x * (1.0 - z) + y * z =\n    //   t + s, where t = x * (1.0 - z), s = y * z\n    const t = multiplicationInterval(x, subtractionInterval(1.0, z));\n    const s = multiplicationInterval(y, z);\n    return additionInterval(t, s);\n  },\n};\n\n/** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\nexport function mixPreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixPreciseIntervalOp\n  );\n}\n\nconst MultiplicationInnerOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x * y);\n  },\n};\n\nconst MultiplicationIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return roundAndFlushBinaryToInterval(x, y, MultiplicationInnerOp);\n  },\n};\n\n/** Calculate an acceptance interval of x * y */\nexport function multiplicationInterval(\n  x: number | F32Interval,\n  y: number | F32Interval\n): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MultiplicationIntervalOp);\n}\n\nconst NegationIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(-n);\n  },\n};\n\n/** Calculate an acceptance interval of -x */\nexport function negationInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), NegationIntervalOp);\n}\n\nconst NormalizeIntervalOp: VectorToVectorOp = {\n  impl: (n: number[]): F32Vector => {\n    const length = lengthInterval(n);\n    return toF32Vector(n.map(e => divisionInterval(e, length)));\n  },\n};\n\n/** Calculate an acceptance interval of normalize(x) */\nexport function normalizeInterval(n: number[]): F32Vector {\n  return runVectorToVectorOp(toF32Vector(n), NormalizeIntervalOp);\n}\n\nconst PowIntervalOp: BinaryToIntervalOp = {\n  // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n  // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n  // enforce this, so there is no need to wrap the impl call here.\n  impl: (x: number, y: number): F32Interval => {\n    return exp2Interval(multiplicationInterval(y, log2Interval(x)));\n  },\n};\n\n/** Calculate an acceptance interval of pow(x, y) */\nexport function powInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), PowIntervalOp);\n}\n\n// Once a full implementation of F16Interval exists, the correctlyRounded for\n// that can potentially be used instead of having a bespoke operation\n// implementation.\nconst QuantizeToF16IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const rounded = correctlyRoundedF16(n);\n    const flushed = addFlushedIfNeededF16(rounded);\n    return F32Interval.span(...flushed.map(toF32Interval));\n  },\n};\n\n/** Calculate an acceptance interval of quanitizeToF16(x) */\nexport function quantizeToF16Interval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), QuantizeToF16IntervalOp);\n}\n\nconst RadiansIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 0.017453292519943295474);\n  },\n};\n\n/** Calculate an acceptance interval of radians(x) */\nexport function radiansInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RadiansIntervalOp);\n}\n\nconst ReflectIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(\n      x.length === y.length,\n      `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n    );\n\n    // reflect(x, y) = x - 2.0 * dot(x, y) * y\n    //               = x - t * y, t = 2.0 * dot(x, y)\n    // x = incident vector\n    // y = normal of reflecting surface\n    const t = multiplicationInterval(2.0, dotInterval(x, y));\n    const rhs = multiplyVectorByScalar(y, t);\n    return runBinaryToIntervalOpComponentWise(toF32Vector(x), rhs, SubtractionIntervalOp);\n  },\n};\n\n/** Calculate an acceptance interval of reflect(x, y) */\nexport function reflectInterval(x: number[], y: number[]): F32Vector {\n  assert(\n    x.length === y.length,\n    `reflect is only defined for vectors with the same number of elements`\n  );\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), ReflectIntervalOp);\n}\n\n/**\n * Calculate acceptance interval vectors of reflect(i, s, r)\n *\n * refract is a singular function in the sense that it is the only builtin that\n * takes in (F32Vector, F32Vector, F32) and returns F32Vector and is basically\n * defined in terms of other functions.\n *\n * Instead of implementing all of the framework code to integrate it with its\n * own operation type/etc, it instead has a bespoke implementation that is a\n * composition of other builtin functions that use the framework.\n */\nexport function refractInterval(i: number[], s: number[], r: number): F32Vector {\n  assert(\n    i.length === s.length,\n    `refract is only defined for vectors with the same number of elements`\n  );\n\n  const r_squared = multiplicationInterval(r, r);\n  const dot = dotInterval(s, i);\n  const dot_squared = multiplicationInterval(dot, dot);\n  const one_minus_dot_squared = subtractionInterval(1, dot_squared);\n  const k = subtractionInterval(1.0, multiplicationInterval(r_squared, one_minus_dot_squared));\n\n  if (k.containsZeroOrSubnormals()) {\n    // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n    return kAnyVector[toF32Vector(i).length];\n  }\n\n  if (k.end < 0.0) {\n    // if k is negative, then the zero vector is the valid response\n    return kZeroVector[toF32Vector(i).length];\n  }\n\n  const dot_times_r = multiplicationInterval(dot, r);\n  const k_sqrt = sqrtInterval(k);\n  const t = additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n  const result = runBinaryToIntervalOpComponentWise(\n    multiplyVectorByScalar(i, r),\n    multiplyVectorByScalar(s, t),\n    SubtractionIntervalOp\n  ); // (i * r) - (s * t)\n  return result;\n}\n\nconst RemainderIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    // x % y = x - y * trunc(x/y)\n    return subtractionInterval(x, multiplicationInterval(y, truncInterval(divisionInterval(x, y))));\n  },\n};\n\n/** Calculate an acceptance interval for x % y */\nexport function remainderInterval(x: number, y: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), RemainderIntervalOp);\n}\n\nconst RoundIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const k = Math.floor(n);\n    const diff_before = n - k;\n    const diff_after = k + 1 - n;\n    if (diff_before < diff_after) {\n      return correctlyRoundedInterval(k);\n    } else if (diff_before > diff_after) {\n      return correctlyRoundedInterval(k + 1);\n    }\n\n    // n is in the middle of two integers.\n    // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n    if (k % 2 === 0) {\n      return correctlyRoundedInterval(k);\n    }\n    return correctlyRoundedInterval(k + 1);\n  },\n};\n\n/** Calculate an acceptance interval of round(x) */\nexport function roundInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RoundIntervalOp);\n}\n\n/**\n * Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0)\n *\n * The definition of saturate is such that both possible implementations of\n * clamp will return the same value, so arbitrarily picking the minmax version\n * to use.\n */\nexport function saturateInterval(n: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(n),\n    toF32Interval(0.0),\n    toF32Interval(1.0),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst SignIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    if (n > 0.0) {\n      return correctlyRoundedInterval(1.0);\n    }\n    if (n < 0.0) {\n      return correctlyRoundedInterval(-1.0);\n    }\n\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function signInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SignIntervalOp);\n}\n\nconst SinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.sin(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function sinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinIntervalOp);\n}\n\nconst SinhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // sinh(x) = (exp(x) - exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(subtractionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of sinh(x) */\nexport function sinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinhIntervalOp);\n}\n\nconst SmoothStepOp: TernaryToIntervalOp = {\n  impl: (low: number, high: number, x: number): F32Interval => {\n    // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n    // the same value, so arbitrarily picking the minmax version to use.\n    // t = clamp((x - low) / (high - low), 0.0, 1.0)\n    // prettier-ignore\n    const t = clampMedianInterval(\n      divisionInterval(\n        subtractionInterval(x, low),\n        subtractionInterval(high, low)),\n      0.0,\n      1.0);\n    // Inherited from t * t * (3.0 - 2.0 * t)\n    // prettier-ignore\n    return multiplicationInterval(\n      t,\n      multiplicationInterval(t,\n        subtractionInterval(3.0,\n          multiplicationInterval(2.0, t))));\n  },\n};\n\n/** Calculate an acceptance interval of smoothStep(low, high, x) */\nexport function smoothStepInterval(low: number, high: number, x: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(low),\n    toF32Interval(high),\n    toF32Interval(x),\n    SmoothStepOp\n  );\n}\n\nconst SqrtIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(1.0, inverseSqrtInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of sqrt(x) */\nexport function sqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SqrtIntervalOp);\n}\n\nconst StepIntervalOp: BinaryToIntervalOp = {\n  impl: (edge: number, x: number): F32Interval => {\n    if (edge <= x) {\n      return correctlyRoundedInterval(1.0);\n    }\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance 'interval' for step(edge, x)\n *\n * step only returns two possible values, so its interval requires special\n * interpretation in CTS tests.\n * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n * indicate either 0.0 or 1.0 are acceptable answers.\n * [-∞, +∞] is treated as the any interval, since an undefined or infinite value was passed in.\n */\nexport function stepInterval(edge: number, x: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(edge), toF32Interval(x), StepIntervalOp);\n}\n\nconst SubtractionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x - y);\n  },\n};\n\n/** Calculate an acceptance interval of x - y */\nexport function subtractionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), SubtractionIntervalOp);\n}\n\nconst TanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinInterval(n), cosInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tan(x) */\nexport function tanInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanIntervalOp);\n}\n\nconst TanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinhInterval(n), coshInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tanh(x) */\nexport function tanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanhIntervalOp);\n}\n\nconst TruncIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.trunc(n));\n  },\n};\n\n/** Calculate an acceptance interval of trunc(x) */\nexport function truncInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TruncIntervalOp);\n}\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * unpackData* is shared between all of the unpack*Interval functions, so to avoid re-entrancy problems, they should\n * not call each other or themselves directly or indirectly.\n */\nconst unpackData = new ArrayBuffer(4);\nconst unpackDataU32 = new Uint32Array(unpackData);\nconst unpackDataU16 = new Uint16Array(unpackData);\nconst unpackDataU8 = new Uint8Array(unpackData);\nconst unpackDataI16 = new Int16Array(unpackData);\nconst unpackDataI8 = new Int8Array(unpackData);\nconst unpackDataF16 = new Float16Array(unpackData);\n\n/** Calculate an acceptance interval vector for unpack2x16float(x) */\nexport function unpack2x16floatInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16floatInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  if (unpackDataF16.some(f => !isFiniteF16(f))) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n\n  const result: F32Vector = [\n    quantizeToF16Interval(unpackDataF16[0]),\n    quantizeToF16Interval(unpackDataF16[1]),\n  ];\n\n  if (result.some(r => !r.isFinite())) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n  return result;\n}\n\nconst Unpack2x16snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 32767), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16snorm(x) */\nexport function unpack2x16snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16snormIntervalOp(unpackDataI16[0]), Unpack2x16snormIntervalOp(unpackDataI16[1])];\n}\n\nconst Unpack2x16unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 65535);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16unorm(x) */\nexport function unpack2x16unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16unormIntervalOp(unpackDataU16[0]), Unpack2x16unormIntervalOp(unpackDataU16[1])];\n}\n\nconst Unpack4x8snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 127), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8snorm(x) */\nexport function unpack4x8snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8snormIntervalOp(unpackDataI8[0]),\n    Unpack4x8snormIntervalOp(unpackDataI8[1]),\n    Unpack4x8snormIntervalOp(unpackDataI8[2]),\n    Unpack4x8snormIntervalOp(unpackDataI8[3]),\n  ];\n}\n\nconst Unpack4x8unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 255);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8unorm(x) */\nexport function unpack4x8unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8unormIntervalOp(unpackDataU8[0]),\n    Unpack4x8unormIntervalOp(unpackDataU8[1]),\n    Unpack4x8unormIntervalOp(unpackDataU8[2]),\n    Unpack4x8unormIntervalOp(unpackDataU8[3]),\n  ];\n}\n"],"file":"f32_interval.js"}