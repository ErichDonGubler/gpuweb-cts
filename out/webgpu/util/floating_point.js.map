{"version":3,"file":"floating_point.js","names":["assert","unreachable","Float16Array","anyOf","kValue","f32","Matrix","reinterpretF32AsU32","reinterpretU32AsF32","u32","Vector","calculatePermutations","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","flatten2DArray","flushSubnormalNumberF32","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","map2DArray","oneULPF32","quantizeToF32","unflatten2DArray","FPInterval","constructor","kind","bounds","begin","end","length","Number","isNaN","traits","FP","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","containsZeroOrSubnormals","constants","negative","subnormal","min","positive","max","isFinite","toString","map","scalarBuilder","serializeFPInterval","i","anyInterval","deserializeFPInterval","data","toInterval","addFlushedIfNeededF16","values","some","v","concat","FPTraits","k","Array","spanIntervals","intervals","every","forEach","Math","isVector","e","toVector","f","spanVectors","vectors","vector_length","result","isMatrix","m","c","num_rows","toMatrix","bind","spanMatrices","matrices","ms","num_cols","r","_","j","addFlushedIfNeeded","subnormals","filter","isSubnormal","needs_zero","s","limitScalarToIntervalDomain","domain","impl","limitScalarPairToIntervalDomain","x","y","d","makeScalarToIntervalCase","param","ops","quantize","o","undefined","input","expected","generateScalarToIntervalCases","params","reduce","cases","push","makeScalarPairToIntervalCase","param0","param1","generateScalarPairToIntervalCases","param0s","param1s","makeScalarTripleToIntervalCase","param2","generateScalarTripleToIntervalCases","param2s","makeVectorToIntervalCase","generateVectorToIntervalCases","makeVectorPairToIntervalCase","generateVectorPairToIntervalCases","makeVectorToVectorCase","generateVectorToVectorCases","makeScalarVectorToVectorCase","scalar","vector","results","generateScalarVectorToVectorCases","scalars","makeVectorScalarToVectorCase","generateVectorScalarToVectorCases","makeVectorPairToVectorCase","generateVectorPairToVectorCases","makeMatrixToScalarCase","generateMatrixToScalarCases","makeMatrixToMatrixCase","generateMatrixToMatrixCases","makeMatrixPairToMatrixCase","generateMatrixPairToMatrixCases","makeMatrixScalarToMatrixCase","mat","generateMatrixScalarToMatrixCases","mats","makeScalarMatrixToMatrixCase","generateScalarMatrixToMatrixCases","makeMatrixVectorToVectorCase","vec","generateMatrixVectorToVectorCases","vecs","makeVectorMatrixToVectorCase","generateVectorMatrixToVectorCases","roundAndFlushScalarToInterval","op","correctlyRounded","inputs","Set","roundAndFlushScalarPairToInterval","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushScalarTripleToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","roundAndFlushMatrixToMatrix","m_flat","m_rounded","m_flushed","m_options","m_inputs","interval_matrices","inner_m","runScalarToIntervalOp","extrema","b","runScalarPairToIntervalOp","outputs","runScalarTripleToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","anyVector","runScalarToIntervalOpComponentWise","runVectorPairToVectorOp","runScalarPairToIntervalOpVectorComponentWise","idx","runMatrixToMatrixOp","anyMatrix","m_values","unflat_m","result_cols","result_rows","runScalarPairToIntervalOpMatrixComponentWise","cols","rows","flat_x","flat_y","CorrectlyRoundedIntervalOp","correctlyRoundedIntervalImpl","correctlyRoundedMatrixImpl","correctlyRoundedInterval","AbsoluteErrorIntervalOp","error_range","absoluteErrorInterval","abs","ULPIntervalOp","numULP","ulp","oneULP","flushSubnormal","ulpInterval","AbsIntervalOp","absIntervalImpl","AcosIntervalOp","sqrtInterval","subtractionInterval","multiplicationInterval","atan2Interval","acos","acosIntervalImpl","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","acoshAlternativeIntervalImpl","AcoshPrimaryIntervalOp","acoshPrimaryIntervalImpl","AdditionIntervalOp","additionIntervalImpl","additionMatrixMatrixIntervalImpl","AsinIntervalOp","asin","asinIntervalImpl","AsinhIntervalOp","asinhIntervalImpl","AtanIntervalOp","atan","atanIntervalImpl","Atan2IntervalOp","atan_yx","pi","whole","atan2IntervalImpl","AtanhIntervalOp","numerator","denominator","log_interval","divisionInterval","atanhIntervalImpl","CeilIntervalOp","ceil","ceilIntervalImpl","ClampMedianIntervalOp","sort","a","clampMedianIntervalImpl","ClampMinMaxIntervalOp","low","high","minInterval","maxInterval","clampMinMaxIntervalImpl","CosIntervalOp","negPiToPiInterval","cos","cosIntervalImpl","CoshIntervalOp","minus_n","negationInterval","expInterval","coshIntervalImpl","CrossIntervalOp","r0","r1","r2","crossIntervalImpl","DegreesIntervalOp","degreesIntervalImpl","minorNxN","col","row","dim","col_indices","keys","row_indices","determinant2x2Interval","determinant3x3Interval","A","B","C","permutations","p","prev","cur","determinant4x4Interval","D","determinantIntervalImpl","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceIntervalImpl","DivisionIntervalOp","divisionIntervalImpl","DotIntervalOp","multiplications","MultiplicationIntervalOp","dotIntervalImpl","ExpIntervalOp","exp","expIntervalImpl","Exp2IntervalOp","pow","exp2IntervalImpl","faceForwardIntervals","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","dotInterval","FloorIntervalOp","floor","floorIntervalImpl","FmaIntervalOp","fmaIntervalImpl","FractIntervalOp","floorInterval","less_than_one","fractIntervalImpl","InverseSqrtIntervalOp","greaterThanZeroInterval","sqrt","inverseSqrtIntervalImpl","LdexpIntervalOp","e1","e2","ldexpIntervalImpl","LengthIntervalScalarOp","LengthIntervalVectorOp","lengthIntervalImpl","LogIntervalOp","log","logIntervalImpl","Log2IntervalOp","log2","log2IntervalImpl","MaxIntervalOp","maxIntervalImpl","MinIntervalOp","minIntervalImpl","MixImpreciseIntervalOp","t","mixImpreciseIntervalImpl","MixPreciseIntervalOp","mixPreciseIntervalImpl","modfInterval","fract","MultiplicationInnerOp","multiplicationIntervalImpl","multiplyVectorByScalar","multiplicationMatrixScalarIntervalImpl","multiplicationScalarMatrixIntervalImpl","multiplicationMatrixMatrixIntervalImpl","mat_x","mat_y","x_cols","x_rows","y_cols","y_rows","x_transposed","transposeInterval","multiplicationMatrixVectorIntervalImpl","multiplicationVectorMatrixIntervalImpl","negationIntervalImpl","NormalizeIntervalOp","normalizeIntervalImpl","PowIntervalOp","exp2Interval","log2Interval","powIntervalImpl","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16IntervalImpl","RadiansIntervalOp","radiansIntervalImpl","ReflectIntervalOp","rhs","reflectIntervalImpl","refractInterval","r_squared","dot","dot_squared","one_minus_dot_squared","zeroVector","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderIntervalImpl","RoundIntervalOp","diff_before","diff_after","roundIntervalImpl","saturateIntervalImpl","SignIntervalOp","signIntervalImpl","SinIntervalOp","sin","sinIntervalImpl","SinhIntervalOp","sinhIntervalImpl","SmoothStepOp","clampMedianInterval","smoothStepIntervalImpl","SqrtIntervalOp","inverseSqrtInterval","sqrtIntervalImpl","StepIntervalOp","edge","stepIntervalImpl","subtractionIntervalImpl","subtractionMatrixMatrixIntervalImpl","TanIntervalOp","sinInterval","cosInterval","tanIntervalImpl","TanhIntervalOp","sinhInterval","coshInterval","tanhIntervalImpl","TransposeIntervalOp","transposeIntervalImpl","TruncIntervalOp","trunc","truncIntervalImpl","kF32AnyInterval","kF32ZeroInterval","F32Traits","_constants","infinity","nearest_max","three_quarters","half","third","quarter","sixth","nearest_min","zeroInterval","absInterval","acosInterval","acoshAlternativeInterval","acoshPrimaryInterval","acoshIntervals","additionMatrixMatrixInterval","asinInterval","asinhInterval","atanInterval","atanhInterval","ceilInterval","clampMinMaxInterval","clampIntervals","correctlyRoundedMatrix","crossInterval","degreesInterval","determinantInterval","distanceInterval","fmaInterval","fractInterval","ldexpInterval","mixImpreciseInterval","mixPreciseInterval","mixIntervals","multiplicationMatrixMatrixInterval","multiplicationMatrixScalarInterval","multiplicationScalarMatrixInterval","multiplicationMatrixVectorInterval","multiplicationVectorMatrixInterval","normalizeInterval","powInterval","quantizeToF16Interval","radiansInterval","reflectInterval","remainderInterval","roundInterval","saturateInterval","signInterval","smoothStepInterval","stepInterval","subtractionMatrixMatrixInterval","tanInterval","tanhInterval","makeU32ToVectorCase","generateU32ToIntervalCases","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatIntervalImpl","unpack2x16floatInterval","unpack2x16snormIntervalImpl","unpack2x16snormInterval","unpack2x16unormIntervalImpl","unpack2x16unormInterval","unpack4x8snormIntervalImpl","unpack4x8snormInterval","unpack4x8unormIntervalImpl","unpack4x8unormInterval"],"sources":["../../../src/webgpu/util/floating_point.ts"],"sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\nimport { Case, IntervalFilter } from '../shader/execution/expression/expression.js';\n\nimport { anyOf } from './compare.js';\nimport { kValue } from './constants.js';\nimport {\n  f32,\n  Matrix,\n  reinterpretF32AsU32,\n  reinterpretU32AsF32,\n  Scalar,\n  u32,\n  Vector,\n} from './conversion.js';\nimport {\n  calculatePermutations,\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  flatten2DArray,\n  FlushMode,\n  flushSubnormalNumberF32,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  map2DArray,\n  oneULPF32,\n  quantizeToF32,\n  unflatten2DArray,\n} from './math.js';\n\n/** Indicate the kind of WGSL floating point numbers being operated on */\nexport type FPKind = 'f32';\n\n// Containers\n\n/**\n * Representation of bounds for an interval as an array with either one or two\n * elements. Single element indicates that the interval is a single point. For\n * two elements, the first is the lower bound of the interval and the second is\n * the upper bound.\n */\nexport type IntervalBounds = [number] | [number, number];\n\n/** Represents a closed interval of floating point numbers */\nexport class FPInterval {\n  public readonly kind: FPKind;\n  public readonly begin: number;\n  public readonly end: number;\n\n  /**\n   * Constructor\n   *\n   * `FPTraits.toInterval` is the preferred way to create FPIntervals\n   *\n   * @param kind the floating point number type this is an interval for\n   * @param bounds beginning and end of the interval\n   */\n  public constructor(kind: FPKind, ...bounds: IntervalBounds) {\n    this.kind = kind;\n\n    const [begin, end] = bounds.length === 2 ? bounds : [bounds[0], bounds[0]];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `bounds need to be non-NaN`);\n    assert(begin <= end, `bounds[0] (${begin}) must be less than or equal to bounds[1]  (${end})`);\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns the floating point traits for this interval */\n  public traits(): FPTraits {\n    return FP[this.kind];\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  public bounds(): IntervalBounds {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  public contains(n: number | FPInterval): boolean {\n    if (Number.isNaN(n)) {\n      // Being the 'any' interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n\n    if (n instanceof FPInterval) {\n      return this.begin <= n.begin && this.end >= n.end;\n    }\n    return this.begin <= n && this.end >= n;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  public containsZeroOrSubnormals(): boolean {\n    return !(\n      this.end < this.traits().constants().negative.subnormal.min ||\n      this.begin > this.traits().constants().positive.subnormal.max\n    );\n  }\n\n  /** @returns if this interval contains a single point */\n  public isPoint(): boolean {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains f32 finite values */\n  public isFinite(): boolean {\n    return this.traits().isFinite(this.begin) && this.traits().isFinite(this.end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  public toString(): string {\n    return `{ '${this.kind}', [${this.bounds().map(this.traits().scalarBuilder)}] }`;\n  }\n}\n\n/**\n * SerializedFPInterval holds the serialized form of a FPInterval.\n * This form can be safely encoded to JSON.\n */\n// When non-f32 traits are defined this will need to be extended to include a\n// kind entry to differentiate.\nexport type SerializedFPInterval = { begin: number; end: number } | 'any';\n\n/** serializeFPInterval() converts a FPInterval to a SerializedFPInterval */\nexport function serializeFPInterval(i: FPInterval): SerializedFPInterval {\n  // When non-f32 traits are defined this will need to be re-written to pull\n  // the kind from i to get the traits, and embed the kind in the serialized\n  // form\n  return i === FP['f32'].constants().anyInterval\n    ? 'any'\n    : { begin: reinterpretF32AsU32(i.begin), end: reinterpretF32AsU32(i.end) };\n}\n\n/** serializeFPInterval() converts a SerializedFPInterval to a FPInterval */\nexport function deserializeFPInterval(data: SerializedFPInterval): FPInterval {\n  // When non-f32 traits are defined this will need to be re-written to pull\n  // the kind from serialized data to get the traits and perform unpacking\n  const traits = FP['f32'];\n  return data === 'any'\n    ? traits.constants().anyInterval\n    : traits.toInterval([reinterpretU32AsF32(data.begin), reinterpretU32AsF32(data.end)]);\n}\n\n/**\n * Representation of a vec2/3/4 of floating point intervals as an array of\n * FPIntervals.\n */\nexport type FPVector =\n  | [FPInterval, FPInterval]\n  | [FPInterval, FPInterval, FPInterval]\n  | [FPInterval, FPInterval, FPInterval, FPInterval];\n\n/** Shorthand for an Array of Arrays that contains a column-major matrix */\ntype Array2D<T> = T[][];\n\n/**\n * Representation of a matCxR of floating point intervals as an array of arrays\n * of FPIntervals. This maps onto the WGSL concept of matrix. Internally\n */\nexport type FPMatrix =\n  | [[FPInterval, FPInterval], [FPInterval, FPInterval]]\n  | [[FPInterval, FPInterval], [FPInterval, FPInterval], [FPInterval, FPInterval]]\n  | [\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval],\n      [FPInterval, FPInterval]\n    ]\n  | [[FPInterval, FPInterval, FPInterval], [FPInterval, FPInterval, FPInterval]]\n  | [\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ]\n  | [\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval],\n      [FPInterval, FPInterval, FPInterval, FPInterval]\n    ];\n\n// Utilities\n\n/** @returns input with an appended 0, if inputs contains non-zero subnormals */\n// When f16 traits is defined, this can be replaced with something like\n// `FP.f16..addFlushIfNeeded`\nfunction addFlushedIfNeededF16(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n// Operations\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarToInterval {\n  (x: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarToInterval */\ninterface ScalarToIntervalOp {\n  /** @returns acceptance interval for a function at point x */\n  impl: ScalarToInterval;\n\n  /**\n   * Calculates where in the domain defined by x the min/max extrema of impl\n   * occur and returns a span of those points to be used as the domain instead.\n   *\n   * Used by this.runScalarToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for operations that meet all the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   *      i.e. fooInterval takes in x: number | FPInterval, not x: number\n   */\n  extrema?: (x: FPInterval) => FPInterval;\n}\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarPairToInterval {\n  (x: number, y: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarPairToInterval */\ninterface ScalarPairToIntervalOp {\n  /** @returns acceptance interval for a function at point (x, y) */\n  impl: ScalarPairToInterval;\n  /**\n   * Calculates where in domain defined by x & y the min/max extrema of impl\n   * occur and returns spans of those points to be used as the domain instead.\n   *\n   * Used by runScalarPairToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for functions that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   */\n  extrema?: (x: FPInterval, y: FPInterval) => [FPInterval, FPInterval];\n}\n\n/** Domain for a ScalarPairToInterval implementation */\ninterface ScalarPairToIntervalDomain {\n  // Arrays to support discrete valid domain intervals\n  x: FPInterval[];\n  y: FPInterval[];\n}\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarTripleToInterval {\n  (x: number, y: number, z: number): FPInterval;\n}\n\n/** Operation used to implement a ScalarTripleToInterval */\ninterface ScalarTripleToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function at point (x, y, z) */\n  impl: ScalarTripleToInterval;\n}\n\n// Currently ScalarToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarToVector {\n  (n: number): FPVector;\n}\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToInterval {\n  (x: number[]): FPInterval;\n}\n\n/** Operation used to implement a VectorToInterval */\ninterface VectorToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vector x */\n  impl: VectorToInterval;\n}\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): FPInterval;\n}\n\n/** Operation used to implement a VectorPairToInterval */\ninterface VectorPairToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vectors (x, y) */\n  impl: VectorPairToInterval;\n}\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToVector {\n  (x: number[]): FPVector;\n}\n\n/** Operation used to implement a VectorToVector */\ninterface VectorToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vector x */\n  impl: VectorToVector;\n}\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): FPVector;\n}\n\n/** Operation used to implement a VectorPairToVector */\ninterface VectorPairToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vectors (x, y) */\n  impl: VectorPairToVector;\n}\n\n/**\n * A function that converts a vector and a scalar to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorScalarToVector {\n  (x: number[], y: number): FPVector;\n}\n\n/**\n * A function that converts a scalar and a vector  to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarVectorToVector {\n  (x: number, y: number[]): FPVector;\n}\n\n/**\n * A function that converts a matrix to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixToScalar {\n  (m: Array2D<number>): FPInterval;\n}\n\n/** Operation used to implement a MatrixToMatrix */\ninterface MatrixToMatrixOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a matrix of acceptance intervals for a function on matrix x */\n  impl: MatrixToMatrix;\n}\n\n/**\n * A function that converts a matrix to a matrix of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixToMatrix {\n  (m: Array2D<number>): FPMatrix;\n}\n\n/** Operation used to implement a MatrixToMatrix */\ninterface MatrixToMatrixOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a matrix of acceptance intervals for a function on matrix x */\n  impl: MatrixToMatrix;\n}\n\n/**\n * A function that converts a pair of matrices to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixPairToMatrix {\n  (x: Array2D<number>, y: Array2D<number>): FPMatrix;\n}\n\n/**\n * A function that converts a matrix and a scalar to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixScalarToMatrix {\n  (x: Array2D<number>, y: number): FPMatrix;\n}\n\n/**\n * A function that converts a scalar and a matrix to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface ScalarMatrixToMatrix {\n  (x: number, y: Array2D<number>): FPMatrix;\n}\n\n/**\n * A function that converts a matrix and a vector to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface MatrixVectorToVector {\n  (x: Array2D<number>, y: number[]): FPVector;\n}\n\n/**\n * A function that converts a vector and a matrix to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorMatrixToVector {\n  (x: number[], y: Array2D<number>): FPVector;\n}\n\n// Traits\n\n/**\n * Typed structure containing all the limits/constants defined for each\n * WGSL floating point kind\n */\ninterface FPConstants {\n  positive: {\n    min: number;\n    max: number;\n    infinity: number;\n    nearest_max: number;\n    less_than_one: number;\n    subnormal: {\n      min: number;\n      max: number;\n    };\n    pi: {\n      whole: number;\n      three_quarters: number;\n      half: number;\n      third: number;\n      quarter: number;\n      sixth: number;\n    };\n    e: number;\n  };\n  negative: {\n    min: number;\n    max: number;\n    infinity: number;\n    nearest_min: number;\n    less_than_one: number;\n    subnormal: {\n      min: number;\n      max: number;\n    };\n    pi: {\n      whole: number;\n      three_quarters: number;\n      half: number;\n      third: number;\n      quarter: number;\n      sixth: number;\n    };\n  };\n  anyInterval: FPInterval;\n  zeroInterval: FPInterval;\n  negPiToPiInterval: FPInterval;\n  greaterThanZeroInterval: FPInterval;\n  zeroVector: {\n    2: FPVector;\n    3: FPVector;\n    4: FPVector;\n  };\n  anyVector: {\n    2: FPVector;\n    3: FPVector;\n    4: FPVector;\n  };\n  anyMatrix: {\n    2: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n    3: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n    4: {\n      2: FPMatrix;\n      3: FPMatrix;\n      4: FPMatrix;\n    };\n  };\n}\n\nabstract class FPTraits {\n  public readonly kind: FPKind;\n  protected constructor(k: FPKind) {\n    this.kind = k;\n  }\n\n  public abstract constants(): FPConstants;\n\n  // Utilities - Implemented\n  /** @returns an interval containing the point or the original interval */\n  public toInterval(n: number | IntervalBounds | FPInterval): FPInterval {\n    if (n instanceof FPInterval) {\n      if (n.kind === this.kind) {\n        return n;\n      }\n      return new FPInterval(this.kind, ...n.bounds());\n    }\n\n    if (n instanceof Array) {\n      return new FPInterval(this.kind, ...n);\n    }\n\n    return new FPInterval(this.kind, n, n);\n  }\n\n  /**\n   * @returns an interval with the tightest bounds that includes all provided\n   *          intervals\n   */\n  public spanIntervals(...intervals: FPInterval[]): FPInterval {\n    assert(intervals.length > 0, `span of an empty list of FPIntervals is not allowed`);\n    assert(\n      intervals.every(i => i.kind === this.kind),\n      `span is only defined for intervals with the same kind`\n    );\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach(i => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return this.toInterval([begin, end]);\n  }\n\n  /** Narrow an array of values to FPVector if possible */\n  public isVector(v: (number | IntervalBounds | FPInterval)[]): v is FPVector {\n    if (v.every(e => e instanceof FPInterval && e.kind === this.kind)) {\n      return v.length === 2 || v.length === 3 || v.length === 4;\n    }\n    return false;\n  }\n\n  /** @returns an FPVector representation of an array of values if possible */\n  public toVector(v: (number | IntervalBounds | FPInterval)[]): FPVector {\n    if (this.isVector(v)) {\n      return v;\n    }\n\n    const f = v.map(e => this.toInterval(e));\n    // The return of the map above is a FPInterval[], which needs to be narrowed\n    // to FPVector, since FPVector is defined as fixed length tuples.\n    if (this.isVector(f)) {\n      return f;\n    }\n    unreachable(`Cannot convert [${v}] to FPVector`);\n  }\n\n  /**\n   * @returns a FPVector where each element is the span for corresponding\n   *          elements at the same index in the input vectors\n   */\n  public spanVectors(...vectors: FPVector[]): FPVector {\n    assert(\n      vectors.every(e => this.isVector(e)),\n      'Vector span is not defined for vectors of differing floating point kinds'\n    );\n\n    const vector_length = vectors[0].length;\n    assert(\n      vectors.every(e => e.length === vector_length),\n      `Vector span is not defined for vectors of differing lengths`\n    );\n\n    const result: FPInterval[] = new Array<FPInterval>(vector_length);\n\n    for (let i = 0; i < vector_length; i++) {\n      result[i] = this.spanIntervals(...vectors.map(v => v[i]));\n    }\n    return this.toVector(result);\n  }\n\n  /** Narrow an array of an array of values to FPMatrix if possible */\n  public isMatrix(m: Array2D<number | IntervalBounds | FPInterval> | FPVector[]): m is FPMatrix {\n    if (!m.every(c => c.every(e => e instanceof FPInterval && e.kind === this.kind))) {\n      return false;\n    }\n    // At this point m guaranteed to be a FPInterval[][], but maybe typed as a\n    // FPVector[].\n    // Coercing the type since FPVector[] is functionally equivalent to\n    // FPInterval[][] for .length and .every, but they are type compatible,\n    // since tuples are not equivalent to arrays, so TS considers c in .every to\n    // be unresolvable below, even though our usage is safe.\n    m = m as FPInterval[][];\n\n    if (m.length > 4 || m.length < 2) {\n      return false;\n    }\n\n    const num_rows = m[0].length;\n    if (num_rows > 4 || num_rows < 2) {\n      return false;\n    }\n\n    return m.every(c => c.length === num_rows);\n  }\n\n  /** @returns an FPMatrix representation of an array of an array of values if possible */\n  public toMatrix(m: Array2D<number | IntervalBounds | FPInterval> | FPVector[]): FPMatrix {\n    if (this.isMatrix(m)) {\n      return m;\n    }\n\n    const result = map2DArray(m, this.toInterval.bind(this));\n\n    // The return of the map above is a FPInterval[][], which needs to be\n    // narrowed to FPMatrix, since FPMatrix is defined as fixed length tuples.\n    if (this.isMatrix(result)) {\n      return result;\n    }\n    unreachable(`Cannot convert ${m} to FPMatrix`);\n  }\n\n  /**\n   * @returns a FPMatrix where each element is the span for corresponding\n   *          elements at the same index in the input matrices\n   */\n  public spanMatrices(...matrices: FPMatrix[]): FPMatrix {\n    // Coercing the type of matrices, since tuples are not generally compatible\n    // with Arrays, but they are functionally equivalent for the usages in this\n    // function.\n    const ms = matrices as Array2D<FPInterval>[];\n    const num_cols = ms[0].length;\n    const num_rows = ms[0][0].length;\n    assert(\n      ms.every(m => m.length === num_cols && m.every(r => r.length === num_rows)),\n      `Matrix span is not defined for Matrices of differing dimensions`\n    );\n\n    const result: Array2D<FPInterval> = [...Array(num_cols)].map(_ => [...Array(num_rows)]);\n    for (let i = 0; i < num_cols; i++) {\n      for (let j = 0; j < num_rows; j++) {\n        result[i][j] = this.spanIntervals(...ms.map(m => m[i][j]));\n      }\n    }\n\n    return this.toMatrix(result);\n  }\n\n  /** @returns input with an appended 0, if inputs contains non-zero subnormals */\n  public addFlushedIfNeeded(values: number[]): number[] {\n    const subnormals = values.filter(this.isSubnormal);\n    const needs_zero = subnormals.length > 0 && subnormals.every(s => s !== 0);\n    return needs_zero ? values.concat(0) : values;\n  }\n\n  /**\n   * Restrict the inputs to an ScalarToInterval operation\n   *\n   * Only used for operations that have tighter domain requirements than 'must\n   * be finite'.\n   *\n   * @param domain interval to restrict inputs to\n   * @param impl operation implementation to run if input is within the required domain\n   * @returns a ScalarToInterval that calls impl if domain contains the input,\n   *          otherwise it returns an any interval */\n  protected limitScalarToIntervalDomain(\n    domain: FPInterval,\n    impl: ScalarToInterval\n  ): ScalarToInterval {\n    return (n: number): FPInterval => {\n      return domain.contains(n) ? impl(n) : this.constants().anyInterval;\n    };\n  }\n\n  /**\n   * Restrict the inputs to a ScalarPairToInterval\n   *\n   * Only used for operations that have tighter domain requirements than 'must be\n   * finite'.\n   *\n   * @param domain set of intervals to restrict inputs to\n   * @param impl operation implementation to run if input is within the required domain\n   * @returns a ScalarPairToInterval that calls impl if domain contains the input,\n   *          otherwise it returns an any interval */\n  protected limitScalarPairToIntervalDomain(\n    domain: ScalarPairToIntervalDomain,\n    impl: ScalarPairToInterval\n  ): ScalarPairToInterval {\n    return (x: number, y: number): FPInterval => {\n      if (!domain.x.some(d => d.contains(x)) || !domain.y.some(d => d.contains(y))) {\n        return this.constants().anyInterval;\n      }\n\n      return impl(x, y);\n    };\n  }\n\n  // Utilities - Defined by subclass\n  /**\n   * @returns the nearest precise value to the input. Rounding should be IEEE\n   *          'roundTiesToEven'.\n   */\n  public abstract readonly quantize: (n: number) => number;\n  /** @returns all valid roundings of input */\n  public abstract readonly correctlyRounded: (n: number) => number[];\n  /** @returns true if input is considered finite, otherwise false */\n  public abstract readonly isFinite: (n: number) => boolean;\n  /** @returns true if input is considered subnormal, otherwise false */\n  public abstract readonly isSubnormal: (n: number) => boolean;\n  /** @returns 0 if the provided number is subnormal, otherwise returns the proved number */\n  public abstract readonly flushSubnormal: (n: number) => number;\n  /** @returns 1 * ULP: (number) */\n  public abstract readonly oneULP: (target: number, mode?: FlushMode) => number;\n  /** @returns a builder for converting numbers to Scalars */\n  public abstract readonly scalarBuilder: (n: number) => Scalar;\n\n  // Framework - Cases\n\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeScalarToIntervalCase(\n    param: number,\n    filter: IntervalFilter,\n    ...ops: ScalarToInterval[]\n  ): Case | undefined {\n    param = this.quantize(param);\n\n    const intervals = ops.map(o => o(param));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return { input: [this.scalarBuilder(param)], expected: anyOf(...intervals) };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarToIntervalCases(\n    params: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarToInterval[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeScalarToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeScalarPairToIntervalCase(\n    param0: number,\n    param1: number,\n    filter: IntervalFilter,\n    ...ops: ScalarPairToInterval[]\n  ): Case | undefined {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n\n    const intervals = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarPairToIntervalCases(\n    param0s: number[],\n    param1s: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarPairToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeScalarPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param param2 the third param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeScalarTripleToIntervalCase(\n    param0: number,\n    param1: number,\n    param2: number,\n    filter: IntervalFilter,\n    ...ops: ScalarTripleToInterval[]\n  ): Case | undefined {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n    param2 = this.quantize(param2);\n\n    const intervals = ops.map(o => o(param0, param1, param2));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1), this.scalarBuilder(param2)],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param param2s array of inputs to try for the third input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateScalarTripleToIntervalCases(\n    param0s: number[],\n    param1s: number[],\n    param2s: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarTripleToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s, param2s).reduce((cases, e) => {\n      const c = this.makeScalarTripleToIntervalCase(e[0], e[1], e[2], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeVectorToIntervalCase(\n    param: number[],\n    filter: IntervalFilter,\n    ...ops: VectorToInterval[]\n  ): Case | undefined {\n    param = param.map(this.quantize);\n\n    const intervals = ops.map(o => o(param));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [new Vector(param.map(this.scalarBuilder))],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateVectorToIntervalCases(\n    params: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorToInterval[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeVectorPairToIntervalCase(\n    param0: number[],\n    param1: number[],\n    filter: IntervalFilter,\n    ...ops: VectorPairToInterval[]\n  ): Case | undefined {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n\n    const intervals = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && intervals.some(i => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [\n        new Vector(param0.map(this.scalarBuilder)),\n        new Vector(param1.map(this.scalarBuilder)),\n      ],\n      expected: anyOf(...intervals),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateVectorPairToIntervalCases(\n    param0s: number[][],\n    param1s: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorPairToInterval[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  private makeVectorToVectorCase(\n    param: number[],\n    filter: IntervalFilter,\n    ...ops: VectorToVector[]\n  ): Case | undefined {\n    param = param.map(this.quantize);\n\n    const vectors = ops.map(o => o(param));\n    if (filter === 'finite' && vectors.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [new Vector(param.map(this.scalarBuilder))],\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  public generateVectorToVectorCases(\n    params: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorToVector[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param scalar the scalar param to pass in\n   * @param vector the vector param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  private makeScalarVectorToVectorCase(\n    scalar: number,\n    vector: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarVectorToVector[]\n  ): Case | undefined {\n    scalar = this.quantize(scalar);\n    vector = vector.map(this.quantize);\n\n    const results = ops.map(o => o(scalar, vector));\n    if (filter === 'finite' && results.some(r => r.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), new Vector(vector.map(this.scalarBuilder))],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of scalar inputs to try\n   * @param vectors array of vector inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  public generateScalarVectorToVectorCases(\n    scalars: number[],\n    vectors: number[][],\n    filter: IntervalFilter,\n    ...ops: ScalarVectorToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    scalars.forEach(scalar => {\n      vectors.forEach(vector => {\n        const c = this.makeScalarVectorToVectorCase(scalar, vector, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param vector the vector param to pass in\n   * @param scalar the scalar param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  private makeVectorScalarToVectorCase(\n    vector: number[],\n    scalar: number,\n    filter: IntervalFilter,\n    ...ops: VectorScalarToVector[]\n  ): Case | undefined {\n    vector = vector.map(this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map(o => o(vector, scalar));\n    if (filter === 'finite' && results.some(r => r.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [new Vector(vector.map(this.scalarBuilder)), this.scalarBuilder(scalar)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vectors array of vector inputs to try\n   * @param scalars array of scalar inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  public generateVectorScalarToVectorCases(\n    vectors: number[][],\n    scalars: number[],\n    filter: IntervalFilter,\n    ...ops: VectorScalarToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    vectors.forEach(vector => {\n      scalars.forEach(scalar => {\n        const c = this.makeVectorScalarToVectorCase(vector, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  private makeVectorPairToVectorCase(\n    param0: number[],\n    param1: number[],\n    filter: IntervalFilter,\n    ...ops: VectorPairToVector[]\n  ): Case | undefined {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n    const vectors = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && vectors.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [\n        new Vector(param0.map(this.scalarBuilder)),\n        new Vector(param1.map(this.scalarBuilder)),\n      ],\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  public generateVectorPairToVectorCases(\n    param0s: number[][],\n    param1s: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorPairToVector[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToVectorCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeMatrixToScalarCase(\n    param: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixToScalar[]\n  ): Case | undefined {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map(o => o(param));\n    if (filter === 'finite' && results.some(e => !e.isFinite())) {\n      return undefined;\n    }\n\n    return {\n      input: [new Matrix(map2DArray(param, this.scalarBuilder))],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateMatrixToScalarCases(\n    params: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixToScalar[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToScalarCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixToMatrixCase(\n    param: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixToMatrix[]\n  ): Case | undefined {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map(o => o(param));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n\n    return {\n      input: [new Matrix(map2DArray(param, this.scalarBuilder))],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixToMatrixCases(\n    params: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixToMatrix[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToMatrixCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixPairToMatrixCase(\n    param0: number[][],\n    param1: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixPairToMatrix[]\n  ): Case | undefined {\n    param0 = map2DArray(param0, this.quantize);\n    param1 = map2DArray(param1, this.quantize);\n\n    const results = ops.map(o => o(param0, param1));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [\n        new Matrix(map2DArray(param0, this.scalarBuilder)),\n        new Matrix(map2DArray(param1, this.scalarBuilder)),\n      ],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixPairToMatrixCases(\n    param0s: number[][][],\n    param1s: number[][][],\n    filter: IntervalFilter,\n    ...ops: MatrixPairToMatrix[]\n  ): Case[] {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeMatrixPairToMatrixCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param scalar the scalar to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeMatrixScalarToMatrixCase(\n    mat: number[][],\n    scalar: number,\n    filter: IntervalFilter,\n    ...ops: MatrixScalarToMatrix[]\n  ): Case | undefined {\n    mat = map2DArray(mat, this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map(o => o(mat, scalar));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [new Matrix(map2DArray(mat, this.scalarBuilder)), this.scalarBuilder(scalar)],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param scalars array of inputs to try for the scalar input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateMatrixScalarToMatrixCases(\n    mats: number[][][],\n    scalars: number[],\n    filter: IntervalFilter,\n    ...ops: MatrixScalarToMatrix[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      scalars.forEach(scalar => {\n        const c = this.makeMatrixScalarToMatrixCase(mat, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param scalar the scalar to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  private makeScalarMatrixToMatrixCase(\n    scalar: number,\n    mat: number[][],\n    filter: IntervalFilter,\n    ...ops: ScalarMatrixToMatrix[]\n  ): Case | undefined {\n    scalar = this.quantize(scalar);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map(o => o(scalar, mat));\n    if (filter === 'finite' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), new Matrix(map2DArray(mat, this.scalarBuilder))],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of inputs to try for the scalar input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  public generateScalarMatrixToMatrixCases(\n    scalars: number[],\n    mats: number[][][],\n    filter: IntervalFilter,\n    ...ops: ScalarMatrixToMatrix[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      scalars.forEach(scalar => {\n        const c = this.makeScalarMatrixToMatrixCase(scalar, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param vec the vector to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  private makeMatrixVectorToVectorCase(\n    mat: number[][],\n    vec: number[],\n    filter: IntervalFilter,\n    ...ops: MatrixVectorToVector[]\n  ): Case | undefined {\n    mat = map2DArray(mat, this.quantize);\n    vec = vec.map(this.quantize);\n\n    const results = ops.map(o => o(mat, vec));\n    if (filter === 'finite' && results.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [\n        new Matrix(map2DArray(mat, this.scalarBuilder)),\n        new Vector(vec.map(this.scalarBuilder)),\n      ],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param vecs array of inputs to try for the vector input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  public generateMatrixVectorToVectorCases(\n    mats: number[][][],\n    vecs: number[][],\n    filter: IntervalFilter,\n    ...ops: MatrixVectorToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    mats.forEach(mat => {\n      vecs.forEach(vec => {\n        const c = this.makeMatrixVectorToVectorCase(mat, vec, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param vec the vector to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  private makeVectorMatrixToVectorCase(\n    vec: number[],\n    mat: number[][],\n    filter: IntervalFilter,\n    ...ops: VectorMatrixToVector[]\n  ): Case | undefined {\n    vec = vec.map(this.quantize);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map(o => o(vec, mat));\n    if (filter === 'finite' && results.some(v => v.some(e => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [\n        new Vector(vec.map(this.scalarBuilder)),\n        new Matrix(map2DArray(mat, this.scalarBuilder)),\n      ],\n      expected: anyOf(...results),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vecs array of inputs to try for the vector input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  public generateVectorMatrixToVectorCases(\n    vecs: number[][],\n    mats: number[][][],\n    filter: IntervalFilter,\n    ...ops: VectorMatrixToVector[]\n  ): Case[] {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases: Case[] = [];\n    vecs.forEach(vec => {\n      mats.forEach(mat => {\n        const c = this.makeVectorMatrixToVectorCase(vec, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  // Framework - Intervals\n\n  /**\n   * Converts a point to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param n value to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarToInterval(n: number, op: ScalarToIntervalOp) {\n    assert(!Number.isNaN(n), `flush not defined for NaN`);\n    const values = this.correctlyRounded(n);\n    const inputs = this.addFlushedIfNeeded(values);\n    const results = new Set<FPInterval>(inputs.map(op.impl));\n    return this.spanIntervals(...results);\n  }\n\n  /**\n   * Converts a pair to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarPairToInterval(\n    x: number,\n    y: number,\n    op: ScalarPairToIntervalOp\n  ): FPInterval {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a triplet to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x, y & z are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param z third param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushScalarTripleToInterval(\n    x: number,\n    y: number,\n    z: number,\n    op: ScalarTripleToIntervalOp\n  ): FPInterval {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n    assert(!Number.isNaN(z), `flush not defined for NaN`);\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const z_values = this.correctlyRounded(z);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n    const z_inputs = this.addFlushedIfNeeded(z_values);\n    const intervals = new Set<FPInterval>();\n    // prettier-ignore\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        z_inputs.forEach(inner_z => {\n          intervals.add(op.impl(inner_x, inner_y, inner_z));\n        });\n      });\n    });\n\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to an acceptance interval using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushVectorToInterval(x: number[], op: VectorToIntervalOp): FPInterval {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      intervals.add(op.impl(inner_x));\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a pair of vectors to an acceptance interval using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private roundAndFlushVectorPairToInterval(\n    x: number[],\n    y: number[],\n    op: VectorPairToIntervalOp\n  ): FPInterval {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const y_rounded: number[][] = y.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed: number[][] = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n    const y_inputs = cartesianProduct<number>(...y_flushed);\n\n    const intervals = new Set<FPInterval>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to a vector of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each outputs of op.impl\n   */\n  private roundAndFlushVectorToVector(x: number[], op: VectorToVectorOp): FPVector {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n\n    const interval_vectors = new Set<FPVector>();\n    x_inputs.forEach(inner_x => {\n      interval_vectors.add(op.impl(inner_x));\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a pair of vectors to a vector of acceptance intervals using a\n   * specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each output of op.impl\n   */\n  private roundAndFlushVectorPairToVector(\n    x: number[],\n    y: number[],\n    op: VectorPairToVectorOp\n  ): FPVector {\n    assert(\n      x.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every(e => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded: number[][] = x.map(this.correctlyRounded);\n    const y_rounded: number[][] = y.map(this.correctlyRounded);\n    const x_flushed: number[][] = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed: number[][] = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct<number>(...x_flushed);\n    const y_inputs = cartesianProduct<number>(...y_flushed);\n\n    const interval_vectors = new Set<FPVector>();\n    x_inputs.forEach(inner_x => {\n      y_inputs.forEach(inner_y => {\n        interval_vectors.add(op.impl(inner_x, inner_y));\n      });\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a matrix to a matrix of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param m param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a matrix of spans for each outputs of op.impl\n   */\n  private roundAndFlushMatrixToMatrix(m: Array2D<number>, op: MatrixToMatrixOp): FPMatrix {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    assert(\n      m.every(c => c.every(r => !Number.isNaN(r))),\n      `flush not defined for NaN`\n    );\n\n    const m_flat = flatten2DArray(m);\n    const m_rounded: number[][] = m_flat.map(this.correctlyRounded);\n    const m_flushed: number[][] = m_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const m_options: number[][] = cartesianProduct<number>(...m_flushed);\n    const m_inputs: Array2D<number>[] = m_options.map(e => unflatten2DArray(e, num_cols, num_rows));\n\n    const interval_matrices = new Set<FPMatrix>();\n    m_inputs.forEach(inner_m => {\n      interval_matrices.add(op.impl(inner_m));\n    });\n\n    return this.spanMatrices(...interval_matrices);\n  }\n\n  /**\n   * Calculate the acceptance interval for a unary function over an interval\n   *\n   * If the interval is actually a point, this just decays to\n   * roundAndFlushScalarToInterval.\n   *\n   * The provided domain interval may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private runScalarToIntervalOp(x: FPInterval, op: ScalarToIntervalOp): FPInterval {\n    if (!x.isFinite()) {\n      return this.constants().anyInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      x = op.extrema(x);\n    }\n\n    const result = this.spanIntervals(\n      ...x.bounds().map(b => this.roundAndFlushScalarToInterval(b, op))\n    );\n    return result.isFinite() ? result : this.constants().anyInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a binary function over an interval\n   *\n   * The provided domain intervals may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private runScalarPairToIntervalOp(\n    x: FPInterval,\n    y: FPInterval,\n    op: ScalarPairToIntervalOp\n  ): FPInterval {\n    if (!x.isFinite() || !y.isFinite()) {\n      return this.constants().anyInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      [x, y] = op.extrema(x, y);\n    }\n\n    const outputs = new Set<FPInterval>();\n    x.bounds().forEach(inner_x => {\n      y.bounds().forEach(inner_y => {\n        outputs.add(this.roundAndFlushScalarPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().anyInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a ternary function over an interval\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param z third input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private runScalarTripleToIntervalOp(\n    x: FPInterval,\n    y: FPInterval,\n    z: FPInterval,\n    op: ScalarTripleToIntervalOp\n  ): FPInterval {\n    if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n      return this.constants().anyInterval;\n    }\n\n    const outputs = new Set<FPInterval>();\n    x.bounds().forEach(inner_x => {\n      y.bounds().forEach(inner_y => {\n        z.bounds().forEach(inner_z => {\n          outputs.add(this.roundAndFlushScalarTripleToInterval(inner_x, inner_y, inner_z, op));\n        });\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().anyInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector function over given\n   * intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private runVectorToIntervalOp(x: FPVector, op: VectorToIntervalOp): FPInterval {\n    if (x.some(e => !e.isFinite())) {\n      return this.constants().anyInterval;\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n    const outputs = new Set<FPInterval>();\n    x_values.forEach(inner_x => {\n      outputs.add(this.roundAndFlushVectorToInterval(inner_x, op));\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().anyInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector pair function over given\n   * intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  private runVectorPairToIntervalOp(\n    x: FPVector,\n    y: FPVector,\n    op: VectorPairToIntervalOp\n  ): FPInterval {\n    if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n      return this.constants().anyInterval;\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n    const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n    const outputs = new Set<FPInterval>();\n    x_values.forEach(inner_x => {\n      y_values.forEach(inner_y => {\n        outputs.add(this.roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().anyInterval;\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a pair of vector function\n   * over given intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  private runVectorToVectorOp(x: FPVector, op: VectorToVectorOp): FPVector {\n    if (x.some(e => !e.isFinite())) {\n      return this.constants().anyVector[x.length];\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n    const outputs = new Set<FPVector>();\n    x_values.forEach(inner_x => {\n      outputs.add(this.roundAndFlushVectorToVector(inner_x, op));\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every(e => e.isFinite()) ? result : this.constants().anyVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a vector.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * negation, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  private runScalarToIntervalOpComponentWise(x: FPVector, op: ScalarToIntervalOp): FPVector {\n    return this.toVector(x.map(e => this.runScalarToIntervalOp(e, op)));\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a vector function over\n   * given intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  private runVectorPairToVectorOp(x: FPVector, y: FPVector, op: VectorPairToVectorOp): FPVector {\n    if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n      return this.constants().anyVector[x.length];\n    }\n\n    const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n    const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n    const outputs = new Set<FPVector>();\n    x_values.forEach(inner_x => {\n      y_values.forEach(inner_y => {\n        outputs.add(this.roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every(e => e.isFinite()) ? result : this.constants().anyVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a pair of vectors.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * subtraction, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  private runScalarPairToIntervalOpVectorComponentWise(\n    x: FPVector,\n    y: FPVector,\n    op: ScalarPairToIntervalOp\n  ): FPVector {\n    assert(\n      x.length === y.length,\n      `runScalarPairToIntervalOpVectorComponentWise requires vectors of the same dimensions`\n    );\n\n    return this.toVector(\n      x.map((i, idx) => {\n        return this.runScalarPairToIntervalOp(i, y[idx], op);\n      })\n    );\n  }\n\n  /**\n   * Calculate the matrix of acceptance intervals for a pair of matrix function over\n   * given intervals\n   *\n   * @param m input domain intervals matrix\n   * @param op operation defining the function being run\n   * @returns a matrix of spans over all the outputs of op.impl\n   */\n  private runMatrixToMatrixOp(m: FPMatrix, op: MatrixToMatrixOp): FPMatrix {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    if (m.some(c => c.some(r => !r.isFinite()))) {\n      return this.constants().anyMatrix[num_cols][num_rows];\n    }\n\n    const m_flat: FPInterval[] = flatten2DArray(m);\n    const m_values: number[][] = cartesianProduct<number>(...m_flat.map(e => e.bounds()));\n\n    const outputs = new Set<FPMatrix>();\n    m_values.forEach(inner_m => {\n      const unflat_m = unflatten2DArray(inner_m, num_cols, num_rows);\n      outputs.add(this.roundAndFlushMatrixToMatrix(unflat_m, op));\n    });\n\n    const result = this.spanMatrices(...outputs);\n    const result_cols = result.length;\n    const result_rows = result[0].length;\n\n    // FPMatrix has to be coerced to FPInterval[][] to use .every. This should\n    // always be safe, since FPMatrix are defined as fixed length array of\n    // arrays.\n    return (result as FPInterval[][]).every(c => c.every(r => r.isFinite()))\n      ? result\n      : this.constants().anyMatrix[result_cols][result_rows];\n  }\n\n  /**\n   * Calculate the Matrix of acceptance intervals by running a scalar operation\n   * component-wise over a pair of matrices.\n   *\n   * An example of this is performing matrix addition.\n   *\n   * @param x first input domain intervals matrix\n   * @param y second input domain intervals matrix\n   * @param op scalar operation to be run component-wise\n   * @returns a matrix of intervals with the outputs of op.impl\n   */\n  private runScalarPairToIntervalOpMatrixComponentWise(\n    x: FPMatrix,\n    y: FPMatrix,\n    op: ScalarPairToIntervalOp\n  ): FPMatrix {\n    assert(\n      x.length === y.length && x[0].length === y[0].length,\n      `runScalarPairToIntervalOpMatrixComponentWise requires matrices of the same dimensions`\n    );\n\n    const cols = x.length;\n    const rows = x[0].length;\n    const flat_x = flatten2DArray(x);\n    const flat_y = flatten2DArray(y);\n\n    return this.toMatrix(\n      unflatten2DArray(\n        flat_x.map((i, idx) => {\n          return this.runScalarPairToIntervalOp(i, flat_y[idx], op);\n        }),\n        cols,\n        rows\n      )\n    );\n  }\n\n  // API - Fundamental Error Intervals\n\n  /**\n   * Defines a ScalarToIntervalOp for an interval of the correctly rounded values\n   * around the point\n   */\n  private readonly CorrectlyRoundedIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      assert(!Number.isNaN(n), `absolute not defined for NaN`);\n      return this.toInterval(n);\n    },\n  };\n\n  protected correctlyRoundedIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CorrectlyRoundedIntervalOp);\n  }\n\n  /** @returns an interval of the correctly rounded values around the point */\n  public abstract readonly correctlyRoundedInterval: (n: number | FPInterval) => FPInterval;\n\n  protected correctlyRoundedMatrixImpl(m: Array2D<number>): FPMatrix {\n    return this.toMatrix(map2DArray(m, this.correctlyRoundedInterval));\n  }\n\n  /** @returns a matrix of correctly rounded intervals for the provided matrix */\n  public abstract readonly correctlyRoundedMatrix: (m: Array2D<number>) => FPMatrix;\n\n  /** @returns a ScalarToIntervalOp for [n - error_range, n + error_range] */\n  private AbsoluteErrorIntervalOp(error_range: number): ScalarToIntervalOp {\n    const op: ScalarToIntervalOp = {\n      impl: (_: number) => {\n        return this.constants().anyInterval;\n      },\n    };\n\n    if (isFiniteF32(error_range)) {\n      op.impl = (n: number) => {\n        assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n        return this.toInterval([n - error_range, n + error_range]);\n      };\n    }\n\n    return op;\n  }\n\n  /** @returns an interval of the absolute error around the point */\n  public absoluteErrorInterval(n: number, error_range: number): FPInterval {\n    error_range = Math.abs(error_range);\n    return this.runScalarToIntervalOp(\n      this.toInterval(n),\n      this.AbsoluteErrorIntervalOp(error_range)\n    );\n  }\n\n  /** @returns a ScalarToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\n  private ULPIntervalOp(numULP: number): ScalarToIntervalOp {\n    const op: ScalarToIntervalOp = {\n      impl: (_: number) => {\n        return this.constants().anyInterval;\n      },\n    };\n\n    if (this.isFinite(numULP)) {\n      op.impl = (n: number) => {\n        assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n        const ulp = this.oneULP(n);\n        const begin = n - numULP * ulp;\n        const end = n + numULP * ulp;\n\n        return this.toInterval([\n          Math.min(begin, this.flushSubnormal(begin)),\n          Math.max(end, this.flushSubnormal(end)),\n        ]);\n      };\n    }\n\n    return op;\n  }\n\n  /** @returns an interval of N * ULP around the point */\n  public ulpInterval(n: number, numULP: number): FPInterval {\n    numULP = Math.abs(numULP);\n    return this.runScalarToIntervalOp(this.toInterval(n), this.ULPIntervalOp(numULP));\n  }\n\n  // API - Acceptance Intervals\n\n  private readonly AbsIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      return this.correctlyRoundedInterval(Math.abs(n));\n    },\n  };\n\n  protected absIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AbsIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for abs(n) */\n  public abstract readonly absInterval: (n: number) => FPInterval;\n\n  private readonly AcosIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(this.toInterval([-1.0, 1.0]), (n: number) => {\n      // acos(n) = atan2(sqrt(1.0 - n * n), n) or a polynomial approximation with absolute error\n      const y = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      return this.spanIntervals(\n        this.atan2Interval(y, n),\n        this.absoluteErrorInterval(Math.acos(n), 6.77e-5)\n      );\n    }),\n  };\n\n  protected acosIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AcosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for acos(n) */\n  public abstract readonly acosInterval: (n: number) => FPInterval;\n\n  private readonly AcoshAlternativeIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n      const inner_value = this.multiplicationInterval(\n        this.additionInterval(x, 1.0),\n        this.subtractionInterval(x, 1.0)\n      );\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected acoshAlternativeIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshAlternativeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\n  public abstract readonly acoshAlternativeInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly AcoshPrimaryIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // acosh(x) = log(x + sqrt(x * x - 1.0))\n      const inner_value = this.subtractionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected acoshPrimaryIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshPrimaryIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\n  protected abstract acoshPrimaryInterval: (x: number | FPInterval) => FPInterval;\n\n  /** All acceptance interval functions for acosh(x) */\n  public abstract readonly acoshIntervals: ScalarToInterval[];\n\n  private readonly AdditionIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x + y);\n    },\n  };\n\n  protected additionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are both scalars */\n  public abstract readonly additionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  protected additionMatrixMatrixIntervalImpl(x: Array2D<number>, y: Array2D<number>): FPMatrix {\n    return this.runScalarPairToIntervalOpMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are matrices */\n  public abstract readonly additionMatrixMatrixInterval: (\n    x: Array2D<number>,\n    y: Array2D<number>\n  ) => FPMatrix;\n\n  private readonly AsinIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(this.toInterval([-1.0, 1.0]), (n: number) => {\n      // asin(n) = atan2(n, sqrt(1.0 - n * n)) or a polynomial approximation with absolute error\n      const x = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      return this.spanIntervals(\n        this.atan2Interval(n, x),\n        this.absoluteErrorInterval(Math.asin(n), 6.77e-5)\n      );\n    }),\n  };\n\n  /** Calculate an acceptance interval for asin(n) */\n  protected asinIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for asin(n) */\n  public abstract readonly asinInterval: (n: number) => FPInterval;\n\n  private readonly AsinhIntervalOp: ScalarToIntervalOp = {\n    impl: (x: number): FPInterval => {\n      // asinh(x) = log(x + sqrt(x * x + 1.0))\n      const inner_value = this.additionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    },\n  };\n\n  protected asinhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of asinh(x) */\n  public abstract readonly asinhInterval: (n: number) => FPInterval;\n\n  private readonly AtanIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.ulpInterval(Math.atan(n), 4096);\n    },\n  };\n\n  /** Calculate an acceptance interval of atan(x) */\n  protected atanIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atan(x) */\n  public abstract readonly atanInterval: (n: number | FPInterval) => FPInterval;\n\n  private readonly Atan2IntervalOp: ScalarPairToIntervalOp = {\n    impl: this.limitScalarPairToIntervalDomain(\n      {\n        // For atan2, there params are labelled (y, x), not (x, y), so domain.x is first parameter (y), and domain.y is\n        // the second parameter (x)\n        x: [\n          this.toInterval([kValue.f32.negative.min, kValue.f32.negative.max]),\n          this.toInterval([kValue.f32.positive.min, kValue.f32.positive.max]),\n        ], // first param must be finite and normal\n        y: [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])], // inherited from division\n      },\n      (y: number, x: number): FPInterval => {\n        const atan_yx = Math.atan(y / x);\n        // x > 0, atan(y/x)\n        if (x > 0) {\n          return this.ulpInterval(atan_yx, 4096);\n        }\n\n        // x < 0, y > 0, atan(y/x) + π\n        if (y > 0) {\n          return this.ulpInterval(atan_yx + kValue.f32.positive.pi.whole, 4096);\n        }\n\n        // x < 0, y < 0, atan(y/x) - π\n        return this.ulpInterval(atan_yx - kValue.f32.positive.pi.whole, 4096);\n      }\n    ),\n    extrema: (y: FPInterval, x: FPInterval): [FPInterval, FPInterval] => {\n      // There is discontinuity + undefined behaviour at y/x = 0 that will dominate the accuracy\n      if (y.contains(0)) {\n        if (x.contains(0)) {\n          return [this.toInterval(0), this.toInterval(0)];\n        }\n        return [this.toInterval(0), x];\n      }\n      return [y, x];\n    },\n  };\n\n  protected atan2IntervalImpl(y: number | FPInterval, x: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(y),\n      this.toInterval(x),\n      this.Atan2IntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of atan2(y, x) */\n  public abstract readonly atan2Interval: (\n    y: number | FPInterval,\n    x: number | FPInterval\n  ) => FPInterval;\n\n  private readonly AtanhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number) => {\n      // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n      const numerator = this.additionInterval(1.0, n);\n      const denominator = this.subtractionInterval(1.0, n);\n      const log_interval = this.logInterval(this.divisionInterval(numerator, denominator));\n      return this.multiplicationInterval(log_interval, 0.5);\n    },\n  };\n\n  protected atanhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atanh(x) */\n  public abstract readonly atanhInterval: (n: number) => FPInterval;\n\n  private readonly CeilIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.ceil(n));\n    },\n  };\n\n  protected ceilIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CeilIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of ceil(x) */\n  public abstract readonly ceilInterval: (n: number) => FPInterval;\n\n  private readonly ClampMedianIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      return this.correctlyRoundedInterval(\n        // Default sort is string sort, so have to implement numeric comparison.\n        // Cannot use the b-a one-liner, because that assumes no infinities.\n        [x, y, z].sort((a, b) => {\n          if (a < b) {\n            return -1;\n          }\n          if (a > b) {\n            return 1;\n          }\n          return 0;\n        })[1]\n      );\n    },\n  };\n\n  protected clampMedianIntervalImpl(\n    x: number | FPInterval,\n    y: number | FPInterval,\n    z: number | FPInterval\n  ): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.ClampMedianIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\n  public abstract readonly clampMedianInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval,\n    z: number | FPInterval\n  ) => FPInterval;\n\n  private readonly ClampMinMaxIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, low: number, high: number): FPInterval => {\n      return this.minInterval(this.maxInterval(x, low), high);\n    },\n  };\n\n  protected clampMinMaxIntervalImpl(\n    x: number | FPInterval,\n    low: number | FPInterval,\n    high: number | FPInterval\n  ): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(low),\n      this.toInterval(high),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\n  public abstract readonly clampMinMaxInterval: (\n    x: number | FPInterval,\n    low: number | FPInterval,\n    high: number | FPInterval\n  ) => FPInterval;\n\n  /** All acceptance interval functions for clamp(x, y, z) */\n  public abstract readonly clampIntervals: ScalarTripleToInterval[];\n\n  private readonly CosIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().negPiToPiInterval,\n      (n: number): FPInterval => {\n        return this.absoluteErrorInterval(Math.cos(n), 2 ** -11);\n      }\n    ),\n  };\n\n  protected cosIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cos(x) */\n  public abstract readonly cosInterval: (n: number) => FPInterval;\n\n  private readonly CoshIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // cosh(x) = (exp(x) + exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.additionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    },\n  };\n\n  protected coshIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CoshIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cosh(x) */\n  public abstract readonly coshInterval: (n: number) => FPInterval;\n\n  private readonly CrossIntervalOp: VectorPairToVectorOp = {\n    impl: (x: number[], y: number[]): FPVector => {\n      assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n      assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n      // cross(x, y) = r, where\n      //   r[0] = x[1] * y[2] - x[2] * y[1]\n      //   r[1] = x[2] * y[0] - x[0] * y[2]\n      //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n      const r0 = this.subtractionInterval(\n        this.multiplicationInterval(x[1], y[2]),\n        this.multiplicationInterval(x[2], y[1])\n      );\n      const r1 = this.subtractionInterval(\n        this.multiplicationInterval(x[2], y[0]),\n        this.multiplicationInterval(x[0], y[2])\n      );\n      const r2 = this.subtractionInterval(\n        this.multiplicationInterval(x[0], y[1]),\n        this.multiplicationInterval(x[1], y[0])\n      );\n      return [r0, r1, r2];\n    },\n  };\n\n  protected crossIntervalImpl(x: number[], y: number[]): FPVector {\n    assert(x.length === 3, `Cross is only defined for vec3`);\n    assert(y.length === 3, `Cross is only defined for vec3`);\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.CrossIntervalOp);\n  }\n\n  /** Calculate a vector of acceptance intervals for cross(x, y) */\n  public abstract readonly crossInterval: (x: number[], y: number[]) => FPVector;\n\n  private readonly DegreesIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.multiplicationInterval(n, 57.295779513082322865);\n    },\n  };\n\n  protected degreesIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.DegreesIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of degrees(x) */\n  public abstract readonly degreesInterval: (n: number) => FPInterval;\n\n  /**\n   * Calculate the minor of a NxN matrix.\n   *\n   * The ijth minor of a square matrix, is the N-1xN-1 matrix created by removing\n   * the ith column and jth row from the original matrix.\n   */\n  private minorNxN(m: Array2D<number>, col: number, row: number): Array2D<number> {\n    const dim = m.length;\n    assert(m.length === m[0].length, `minorMatrix is only defined for square matrices`);\n    assert(col >= 0 && col < dim, `col ${col} needs be in [0, # of columns '${dim}')`);\n    assert(row >= 0 && row < dim, `row ${row} needs be in [0, # of rows '${dim}')`);\n\n    const result: Array2D<number> = [...Array(dim - 1)].map(_ => [...Array(dim - 1)]);\n\n    const col_indices: number[] = [...Array(dim).keys()].filter(e => e !== col);\n    const row_indices: number[] = [...Array(dim).keys()].filter(e => e !== row);\n\n    col_indices.forEach((c, i) => {\n      row_indices.forEach((r, j) => {\n        result[i][j] = m[c][r];\n      });\n    });\n    return result;\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 2x2 matrix */\n  private determinant2x2Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 2,\n      `determinant2x2Interval called on non-2x2 matrix`\n    );\n    return this.subtractionInterval(\n      this.multiplicationInterval(m[0][0], m[1][1]),\n      this.multiplicationInterval(m[0][1], m[1][0])\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 3x3 matrix */\n  private determinant3x3Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 3,\n      `determinant3x3Interval called on non-3x3 matrix`\n    );\n\n    // M is a 3x3 matrix\n    // det(M) is A + B + C, where A, B, C are three elements in a row/column times\n    // their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C are calculated as the elements of the first\n    // column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 2))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative,\n    // so A + B + C is not guaranteed to equal B + C + A, etc.\n    const permutations: FPInterval[][] = calculatePermutations([A, B, C]);\n    return this.spanIntervals(\n      ...permutations.map(p =>\n        p.reduce((prev: FPInterval, cur: FPInterval) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 4x4 matrix */\n  private determinant4x4Interval(m: Array2D<number>): FPInterval {\n    assert(\n      m.length === m[0].length && m.length === 4,\n      `determinant3x3Interval called on non-4x4 matrix`\n    );\n\n    // M is a 4x4 matrix\n    // det(M) is A + B + C + D, where A, B, C, D are four elements in a row/column\n    // times their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C, D are calculated as the elements of the\n    // first column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 2))\n    );\n    const D = this.multiplicationInterval(\n      -m[0][3],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 3))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative\n    // so A + B + C + D is not guaranteed to equal B + C + A + D, etc.\n    const permutations: FPInterval[][] = calculatePermutations([A, B, C, D]);\n    return this.spanIntervals(\n      ...permutations.map(p =>\n        p.reduce((prev: FPInterval, cur: FPInterval) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /**\n   * This code calculates 3x3 and 4x4 determinants using the textbook co-factor\n   * method, using the first column for the co-factor selection.\n   *\n   * For matrices composed of integer elements, e, with |e|^4 < 2**21, this\n   * should be fine.\n   *\n   * For e, where e is subnormal or 4*(e^4) might not be precisely expressible as\n   * a f32 values, this approach breaks down, because the rule of all co-factor\n   * definitions of determinant being equal doesn't hold in these cases.\n   *\n   * The general solution for this is to calculate all the permutations of the\n   * operations in the worked out formula for determinant.\n   * For 3x3 this is tractable, but for 4x4 this works out to ~23! permutations\n   * that need to be calculated.\n   * Thus, CTS testing and the spec definition of accuracy is restricted to the\n   * space that the simple implementation is valid.\n   */\n  protected determinantIntervalImpl(x: Array2D<number>): FPInterval {\n    const dim = x.length;\n    assert(\n      x[0].length === dim && (dim === 2 || dim === 3 || dim === 4),\n      `determinantInterval only defined for 2x2, 3x3 and 4x4 matrices`\n    );\n    switch (dim) {\n      case 2:\n        return this.determinant2x2Interval(x);\n      case 3:\n        return this.determinant3x3Interval(x);\n      case 4:\n        return this.determinant4x4Interval(x);\n    }\n    unreachable(\n      \"determinantInterval called on x, where which has an unexpected dimension of '${dim}'\"\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(x) */\n  public abstract readonly determinantInterval: (x: Array2D<number>) => FPInterval;\n\n  private readonly DistanceIntervalScalarOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.lengthInterval(this.subtractionInterval(x, y));\n    },\n  };\n\n  private readonly DistanceIntervalVectorOp: VectorPairToIntervalOp = {\n    impl: (x: number[], y: number[]): FPInterval => {\n      return this.lengthInterval(\n        this.runScalarPairToIntervalOpVectorComponentWise(\n          this.toVector(x),\n          this.toVector(y),\n          this.SubtractionIntervalOp\n        )\n      );\n    },\n  };\n\n  protected distanceIntervalImpl(x: number | number[], y: number | number[]): FPInterval {\n    if (x instanceof Array && y instanceof Array) {\n      assert(\n        x.length === y.length,\n        `distanceInterval requires both params to have the same number of elements`\n      );\n      return this.runVectorPairToIntervalOp(\n        this.toVector(x),\n        this.toVector(y),\n        this.DistanceIntervalVectorOp\n      );\n    } else if (!(x instanceof Array) && !(y instanceof Array)) {\n      return this.runScalarPairToIntervalOp(\n        this.toInterval(x),\n        this.toInterval(y),\n        this.DistanceIntervalScalarOp\n      );\n    }\n    unreachable(\n      `distanceInterval requires both params to both the same type, either scalars or vectors`\n    );\n  }\n\n  /** Calculate an acceptance interval of distance(x, y) */\n  public abstract readonly distanceInterval: (\n    x: number | number[],\n    y: number | number[]\n  ) => FPInterval;\n\n  private readonly DivisionIntervalOp: ScalarPairToIntervalOp = {\n    impl: this.limitScalarPairToIntervalDomain(\n      {\n        x: [this.toInterval([kValue.f32.negative.min, kValue.f32.positive.max])],\n        y: [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])],\n      },\n      (x: number, y: number): FPInterval => {\n        if (y === 0) {\n          return this.constants().anyInterval;\n        }\n        return this.ulpInterval(x / y, 2.5);\n      }\n    ),\n    extrema: (x: FPInterval, y: FPInterval): [FPInterval, FPInterval] => {\n      // division has a discontinuity at y = 0.\n      if (y.contains(0)) {\n        y = this.toInterval(0);\n      }\n      return [x, y];\n    },\n  };\n\n  protected divisionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.DivisionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x / y */\n  public abstract readonly divisionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly DotIntervalOp: VectorPairToIntervalOp = {\n    impl: (x: number[], y: number[]): FPInterval => {\n      // dot(x, y) = sum of x[i] * y[i]\n      const multiplications = this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        this.toVector(y),\n        this.MultiplicationIntervalOp\n      );\n\n      // vec2 doesn't require permutations, since a + b = b + a for floats\n      if (multiplications.length === 2) {\n        return this.additionInterval(multiplications[0], multiplications[1]);\n      }\n\n      // The spec does not state the ordering of summation, so all the\n      // permutations are calculated and their results spanned, since addition\n      // of more than two floats is not transitive, i.e. a + b + c is not\n      // guaranteed to equal b + a + c\n      const permutations: FPInterval[][] = calculatePermutations(multiplications);\n      return this.spanIntervals(\n        ...permutations.map(p => p.reduce((prev, cur) => this.additionInterval(prev, cur)))\n      );\n    },\n  };\n\n  protected dotIntervalImpl(x: number[] | FPInterval[], y: number[] | FPInterval[]): FPInterval {\n    assert(x.length === y.length, `dot not defined for vectors with different lengths`);\n    return this.runVectorPairToIntervalOp(this.toVector(x), this.toVector(y), this.DotIntervalOp);\n  }\n\n  /** Calculated the acceptance interval for dot(x, y) */\n  public abstract readonly dotInterval: (\n    x: number[] | FPInterval[],\n    y: number[] | FPInterval[]\n  ) => FPInterval;\n\n  private readonly ExpIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.ulpInterval(Math.exp(n), 3 + 2 * Math.abs(n));\n    },\n  };\n\n  protected expIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.ExpIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp(x) */\n  public abstract readonly expInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly Exp2IntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.ulpInterval(Math.pow(2, n), 3 + 2 * Math.abs(n));\n    },\n  };\n\n  protected exp2IntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Exp2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp2(x) */\n  public abstract readonly exp2Interval: (x: number | FPInterval) => FPInterval;\n\n  /**\n   * Calculate the acceptance intervals for faceForward(x, y, z)\n   *\n   * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n   *\n   * This builtin selects from two discrete results (delta rounding/flushing),\n   * so the majority of the framework code is not appropriate, since the\n   * framework attempts to span results.\n   *\n   * Thus, a bespoke implementation is used instead of\n   * defining an Op and running that through the framework.\n   */\n  public faceForwardIntervals(x: number[], y: number[], z: number[]): (FPVector | undefined)[] {\n    const x_vec = this.toVector(x);\n    // Running vector through this.runScalarToIntervalOpComponentWise to make\n    // sure that flushing/rounding is handled, since toVector does not perform\n    // those operations.\n    const positive_x = this.runScalarToIntervalOpComponentWise(x_vec, {\n      impl: (i: number): FPInterval => {\n        return this.toInterval(i);\n      },\n    });\n    const negative_x = this.runScalarToIntervalOpComponentWise(x_vec, this.NegationIntervalOp);\n\n    const dot_interval = this.dotInterval(z, y);\n\n    const results: (FPVector | undefined)[] = [];\n\n    if (!dot_interval.isFinite()) {\n      // dot calculation went out of bounds\n      // Inserting undefined in the result, so that the test running framework\n      // is aware of this potential OOB.\n      // For const-eval tests, it means that the test case should be skipped,\n      // since the shader will fail to compile.\n      // For non-const-eval the undefined should be stripped out of the possible\n      // results.\n\n      results.push(undefined);\n    }\n\n    // Because the result of dot can be an interval, it might span across 0, thus\n    // it is possible that both -x and x are valid responses.\n    if (dot_interval.begin < 0 || dot_interval.end < 0) {\n      results.push(positive_x);\n    }\n\n    if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n      results.push(negative_x);\n    }\n\n    assert(\n      results.length > 0 || results.every(r => r === undefined),\n      `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n    );\n    return results;\n  }\n\n  private readonly FloorIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.floor(n));\n    },\n  };\n\n  protected floorIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FloorIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of floor(x) */\n  public abstract readonly floorInterval: (n: number) => FPInterval;\n\n  private readonly FmaIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      return this.additionInterval(this.multiplicationInterval(x, y), z);\n    },\n  };\n\n  protected fmaIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.FmaIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for fma(x, y, z) */\n  public abstract readonly fmaInterval: (x: number, y: number, z: number) => FPInterval;\n\n  private readonly FractIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // fract(x) = x - floor(x) is defined in the spec.\n      // For people coming from a non-graphics background this will cause some\n      // unintuitive results. For example,\n      // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n      // This is how other shading languages operate and allows for a desirable\n      // wrap around in graphics programming.\n      const result = this.subtractionInterval(n, this.floorInterval(n));\n      if (result.contains(1)) {\n        // Very small negative numbers can lead to catastrophic cancellation,\n        // thus calculating a fract of 1.0, which is technically not a\n        // fractional part, so some implementations clamp the result to next\n        // nearest number.\n        return this.spanIntervals(result, this.toInterval(kValue.f32.positive.less_than_one));\n      }\n      return result;\n    },\n  };\n\n  protected fractIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FractIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of fract(x) */\n  public abstract readonly fractInterval: (n: number) => FPInterval;\n\n  private readonly InverseSqrtIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        return this.ulpInterval(1 / Math.sqrt(n), 2);\n      }\n    ),\n  };\n\n  protected inverseSqrtIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.InverseSqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of inverseSqrt(x) */\n  public abstract readonly inverseSqrtInterval: (n: number | FPInterval) => FPInterval;\n\n  private readonly LdexpIntervalOp: ScalarPairToIntervalOp = {\n    impl: this.limitScalarPairToIntervalDomain(\n      // Implementing SPIR-V's more restrictive domain until\n      // https://github.com/gpuweb/gpuweb/issues/3134 is resolved\n      {\n        x: [this.toInterval([kValue.f32.negative.min, kValue.f32.positive.max])],\n        y: [this.toInterval([-126, 128])],\n      },\n      (e1: number, e2: number): FPInterval => {\n        // Though the spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, the\n        // accuracy is listed as correctly rounded to the true value, so the\n        // inheritance framework does not need to be invoked to determine\n        // bounds.\n        // Instead, the value at a higher precision is calculated and passed to\n        // correctlyRoundedInterval.\n        const result = e1 * 2 ** e2;\n        if (Number.isNaN(result)) {\n          // Overflowed TS's number type, so definitely out of bounds for f32\n          return this.constants().anyInterval;\n        }\n        return this.correctlyRoundedInterval(result);\n      }\n    ),\n  };\n\n  protected ldexpIntervalImpl(e1: number, e2: number): FPInterval {\n    return this.roundAndFlushScalarPairToInterval(e1, e2, this.LdexpIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of ldexp(e1, e2) */\n  public abstract readonly ldexpInterval: (e1: number, e2: number) => FPInterval;\n\n  private readonly LengthIntervalScalarOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.sqrtInterval(this.multiplicationInterval(n, n));\n    },\n  };\n\n  private readonly LengthIntervalVectorOp: VectorToIntervalOp = {\n    impl: (n: number[]): FPInterval => {\n      return this.sqrtInterval(this.dotInterval(n, n));\n    },\n  };\n\n  protected lengthIntervalImpl(n: number | FPInterval | number[] | FPVector): FPInterval {\n    if (n instanceof Array) {\n      return this.runVectorToIntervalOp(this.toVector(n), this.LengthIntervalVectorOp);\n    } else {\n      return this.runScalarToIntervalOp(this.toInterval(n), this.LengthIntervalScalarOp);\n    }\n  }\n\n  /** Calculate an acceptance interval of length(x) */\n  public abstract readonly lengthInterval: (\n    n: number | FPInterval | number[] | FPVector\n  ) => FPInterval;\n\n  private readonly LogIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        if (n >= 0.5 && n <= 2.0) {\n          return this.absoluteErrorInterval(Math.log(n), 2 ** -21);\n        }\n        return this.ulpInterval(Math.log(n), 3);\n      }\n    ),\n  };\n\n  protected logIntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.LogIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log(x) */\n  public abstract readonly logInterval: (x: number | FPInterval) => FPInterval;\n\n  private readonly Log2IntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().greaterThanZeroInterval,\n      (n: number): FPInterval => {\n        if (n >= 0.5 && n <= 2.0) {\n          return this.absoluteErrorInterval(Math.log2(n), 2 ** -21);\n        }\n        return this.ulpInterval(Math.log2(n), 3);\n      }\n    ),\n  };\n\n  protected log2IntervalImpl(x: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Log2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log2(x) */\n  public abstract readonly log2Interval: (x: number | FPInterval) => FPInterval;\n\n  private readonly MaxIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // If both of he inputs are subnormal, then either of the inputs can be returned\n      if (isSubnormalNumberF32(x) && isSubnormalNumberF32(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.max(x, y));\n    },\n  };\n\n  protected maxIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of max(x, y) */\n  public abstract readonly maxInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly MinIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // If both of he inputs are subnormal, then either of the inputs can be returned\n      if (isSubnormalNumberF32(x) && isSubnormalNumberF32(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.min(x, y));\n    },\n  };\n\n  protected minIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MinIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of min(x, y) */\n  public abstract readonly minInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  private readonly MixImpreciseIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      // x + (y - x) * z =\n      //  x + t, where t = (y - x) * z\n      const t = this.multiplicationInterval(this.subtractionInterval(y, x), z);\n      return this.additionInterval(x, t);\n    },\n  };\n\n  protected mixImpreciseIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixImpreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\n  public abstract readonly mixImpreciseInterval: (x: number, y: number, z: number) => FPInterval;\n\n  private readonly MixPreciseIntervalOp: ScalarTripleToIntervalOp = {\n    impl: (x: number, y: number, z: number): FPInterval => {\n      // x * (1.0 - z) + y * z =\n      //   t + s, where t = x * (1.0 - z), s = y * z\n      const t = this.multiplicationInterval(x, this.subtractionInterval(1.0, z));\n      const s = this.multiplicationInterval(y, z);\n      return this.additionInterval(t, s);\n    },\n  };\n\n  protected mixPreciseIntervalImpl(x: number, y: number, z: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixPreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\n  public abstract readonly mixPreciseInterval: (x: number, y: number, z: number) => FPInterval;\n\n  /** All acceptance interval functions for mix(x, y, z) */\n  public abstract readonly mixIntervals: ScalarTripleToInterval[];\n\n  /** Calculate an acceptance interval of modf(x) */\n  public modfInterval(n: number): { fract: FPInterval; whole: FPInterval } {\n    const fract = this.correctlyRoundedInterval(n % 1.0);\n    const whole = this.correctlyRoundedInterval(n - (n % 1.0));\n    return { fract, whole };\n  }\n\n  private readonly MultiplicationInnerOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x * y);\n    },\n  };\n\n  private readonly MultiplicationIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.roundAndFlushScalarPairToInterval(x, y, this.MultiplicationInnerOp);\n    },\n  };\n\n  protected multiplicationIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MultiplicationIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y */\n  public abstract readonly multiplicationInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  /**\n   * @returns the vector result of multiplying the given vector by the given\n   *          scalar\n   */\n  private multiplyVectorByScalar(v: number[], c: number | FPInterval): FPVector {\n    return this.toVector(v.map(x => this.multiplicationInterval(x, c)));\n  }\n\n  protected multiplicationMatrixScalarIntervalImpl(mat: Array2D<number>, scalar: number): FPMatrix {\n    const cols = mat.length;\n    const rows = mat[0].length;\n    return this.toMatrix(\n      unflatten2DArray(\n        flatten2DArray(mat).map(e => this.MultiplicationIntervalOp.impl(e, scalar)),\n        cols,\n        rows\n      )\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a scalar */\n  public abstract readonly multiplicationMatrixScalarInterval: (\n    mat: Array2D<number>,\n    scalar: number\n  ) => FPMatrix;\n\n  protected multiplicationScalarMatrixIntervalImpl(scalar: number, mat: Array2D<number>): FPMatrix {\n    return this.multiplicationMatrixScalarIntervalImpl(mat, scalar);\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a scalar and y is a matrix */\n  public abstract readonly multiplicationScalarMatrixInterval: (\n    scalar: number,\n    mat: Array2D<number>\n  ) => FPMatrix;\n\n  protected multiplicationMatrixMatrixIntervalImpl(\n    mat_x: Array2D<number>,\n    mat_y: Array2D<number>\n  ): FPMatrix {\n    const x_cols = mat_x.length;\n    const x_rows = mat_x[0].length;\n    const y_cols = mat_y.length;\n    const y_rows = mat_y[0].length;\n    assert(x_cols === y_rows, `'mat${x_cols}x${x_rows} * mat${y_cols}x${y_rows}' is not defined`);\n\n    const x_transposed = this.transposeInterval(mat_x);\n\n    const result: Array2D<FPInterval> = [...Array(y_cols)].map(_ => [...Array(x_rows)]);\n    mat_y.forEach((y, i) => {\n      x_transposed.forEach((x, j) => {\n        result[i][j] = this.dotInterval(x, y);\n      });\n    });\n\n    return result as FPMatrix;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a matrix */\n  public abstract readonly multiplicationMatrixMatrixInterval: (\n    mat_x: Array2D<number>,\n    mat_y: Array2D<number>\n  ) => FPMatrix;\n\n  protected multiplicationMatrixVectorIntervalImpl(x: Array2D<number>, y: number[]): FPVector {\n    const cols = x.length;\n    const rows = x[0].length;\n    assert(y.length === cols, `'mat${cols}x${rows} * vec${y.length}' is not defined`);\n\n    return this.transposeInterval(x).map(e => this.dotInterval(e, y)) as FPVector;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a vector */\n  public abstract readonly multiplicationMatrixVectorInterval: (\n    x: Array2D<number>,\n    y: number[]\n  ) => FPVector;\n\n  protected multiplicationVectorMatrixIntervalImpl(x: number[], y: Array2D<number>): FPVector {\n    const cols = y.length;\n    const rows = y[0].length;\n    assert(x.length === rows, `'vec${x.length} * mat${cols}x${rows}' is not defined`);\n\n    return y.map(e => this.dotInterval(x, e)) as FPVector;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a vector and y is a matrix */\n  public abstract readonly multiplicationVectorMatrixInterval: (\n    x: number[],\n    y: Array2D<number>\n  ) => FPVector;\n\n  private readonly NegationIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(-n);\n    },\n  };\n\n  protected negationIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.NegationIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of -x */\n  public abstract readonly negationInterval: (n: number) => FPInterval;\n\n  private readonly NormalizeIntervalOp: VectorToVectorOp = {\n    impl: (n: number[]): FPVector => {\n      const length = this.lengthInterval(n);\n      return this.toVector(n.map(e => this.divisionInterval(e, length)));\n    },\n  };\n\n  protected normalizeIntervalImpl(n: number[]): FPVector {\n    return this.runVectorToVectorOp(this.toVector(n), this.NormalizeIntervalOp);\n  }\n\n  public abstract readonly normalizeInterval: (n: number[]) => FPVector;\n\n  private readonly PowIntervalOp: ScalarPairToIntervalOp = {\n    // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n    // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n    // enforce this, so there is no need to wrap the impl call here.\n    impl: (x: number, y: number): FPInterval => {\n      return this.exp2Interval(this.multiplicationInterval(y, this.log2Interval(x)));\n    },\n  };\n\n  protected powIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.PowIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of pow(x, y) */\n  public abstract readonly powInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  // Once a full implementation of F16Interval exists, the correctlyRounded for\n  // that can potentially be used instead of having a bespoke operation\n  // implementation.\n  private readonly QuantizeToF16IntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      const rounded = correctlyRoundedF16(n);\n      const flushed = addFlushedIfNeededF16(rounded);\n      return this.spanIntervals(...flushed.map(f => this.toInterval(f)));\n    },\n  };\n\n  protected quantizeToF16IntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.QuantizeToF16IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of quantizeToF16(x) */\n  public abstract readonly quantizeToF16Interval: (n: number) => FPInterval;\n\n  private readonly RadiansIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.multiplicationInterval(n, 0.017453292519943295474);\n    },\n  };\n\n  protected radiansIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RadiansIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of radians(x) */\n  public abstract readonly radiansInterval: (n: number) => FPInterval;\n\n  private readonly ReflectIntervalOp: VectorPairToVectorOp = {\n    impl: (x: number[], y: number[]): FPVector => {\n      assert(\n        x.length === y.length,\n        `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n      );\n\n      // reflect(x, y) = x - 2.0 * dot(x, y) * y\n      //               = x - t * y, t = 2.0 * dot(x, y)\n      // x = incident vector\n      // y = normal of reflecting surface\n      const t = this.multiplicationInterval(2.0, this.dotInterval(x, y));\n      const rhs = this.multiplyVectorByScalar(y, t);\n      return this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        rhs,\n        this.SubtractionIntervalOp\n      );\n    },\n  };\n\n  protected reflectIntervalImpl(x: number[], y: number[]): FPVector {\n    assert(\n      x.length === y.length,\n      `reflect is only defined for vectors with the same number of elements`\n    );\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.ReflectIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of reflect(x, y) */\n  public abstract readonly reflectInterval: (x: number[], y: number[]) => FPVector;\n\n  /**\n   * Calculate acceptance interval vectors of reflect(i, s, r)\n   *\n   * refract is a singular function in the sense that it is the only builtin that\n   * takes in (FPVector, FPVector, F32) and returns FPVector and is basically\n   * defined in terms of other functions.\n   *\n   * Instead of implementing all the framework code to integrate it with its\n   * own operation type, etc, it instead has a bespoke implementation that is a\n   * composition of other builtin functions that use the framework.\n   */\n  public refractInterval(i: number[], s: number[], r: number): FPVector {\n    assert(\n      i.length === s.length,\n      `refract is only defined for vectors with the same number of elements`\n    );\n\n    const r_squared = this.multiplicationInterval(r, r);\n    const dot = this.dotInterval(s, i);\n    const dot_squared = this.multiplicationInterval(dot, dot);\n    const one_minus_dot_squared = this.subtractionInterval(1, dot_squared);\n    const k = this.subtractionInterval(\n      1.0,\n      this.multiplicationInterval(r_squared, one_minus_dot_squared)\n    );\n\n    if (!k.isFinite() || k.containsZeroOrSubnormals()) {\n      // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n      return this.constants().anyVector[this.toVector(i).length];\n    }\n\n    if (k.end < 0.0) {\n      // if k is negative, then the zero vector is the valid response\n      return this.constants().zeroVector[this.toVector(i).length];\n    }\n\n    const dot_times_r = this.multiplicationInterval(dot, r);\n    const k_sqrt = this.sqrtInterval(k);\n    const t = this.additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n    return this.runScalarPairToIntervalOpVectorComponentWise(\n      this.multiplyVectorByScalar(i, r),\n      this.multiplyVectorByScalar(s, t),\n      this.SubtractionIntervalOp\n    ); // (i * r) - (s * t)\n  }\n\n  private readonly RemainderIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      // x % y = x - y * trunc(x/y)\n      return this.subtractionInterval(\n        x,\n        this.multiplicationInterval(y, this.truncInterval(this.divisionInterval(x, y)))\n      );\n    },\n  };\n\n  /** Calculate an acceptance interval for x % y */\n  protected remainderIntervalImpl(x: number, y: number): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.RemainderIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for x % y */\n  public abstract readonly remainderInterval: (x: number, y: number) => FPInterval;\n\n  private readonly RoundIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      const k = Math.floor(n);\n      const diff_before = n - k;\n      const diff_after = k + 1 - n;\n      if (diff_before < diff_after) {\n        return this.correctlyRoundedInterval(k);\n      } else if (diff_before > diff_after) {\n        return this.correctlyRoundedInterval(k + 1);\n      }\n\n      // n is in the middle of two integers.\n      // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n      if (k % 2 === 0) {\n        return this.correctlyRoundedInterval(k);\n      }\n      return this.correctlyRoundedInterval(k + 1);\n    },\n  };\n\n  protected roundIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RoundIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of round(x) */\n  public abstract readonly roundInterval: (n: number) => FPInterval;\n\n  /**\n   * The definition of saturate does not specify which version of clamp to use.\n   * Using min-max here, since it has wider acceptance intervals, that include\n   * all of median's.\n   */\n  protected saturateIntervalImpl(n: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(n),\n      this.toInterval(0.0),\n      this.toInterval(1.0),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /*** Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0) */\n  public abstract readonly saturateInterval: (n: number) => FPInterval;\n\n  private readonly SignIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      if (n > 0.0) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      if (n < 0.0) {\n        return this.correctlyRoundedInterval(-1.0);\n      }\n\n      return this.correctlyRoundedInterval(0.0);\n    },\n  };\n\n  protected signIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SignIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sign(x) */\n  public abstract readonly signInterval: (n: number) => FPInterval;\n\n  private readonly SinIntervalOp: ScalarToIntervalOp = {\n    impl: this.limitScalarToIntervalDomain(\n      this.constants().negPiToPiInterval,\n      (n: number): FPInterval => {\n        return this.absoluteErrorInterval(Math.sin(n), 2 ** -11);\n      }\n    ),\n  };\n\n  protected sinIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sin(x) */\n  public abstract readonly sinInterval: (n: number) => FPInterval;\n\n  private readonly SinhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      // sinh(x) = (exp(x) - exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.subtractionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    },\n  };\n\n  protected sinhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sinh(x) */\n  public abstract readonly sinhInterval: (n: number) => FPInterval;\n\n  private readonly SmoothStepOp: ScalarTripleToIntervalOp = {\n    impl: (low: number, high: number, x: number): FPInterval => {\n      // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n      // the same value, so arbitrarily picking the minmax version to use.\n      // t = clamp((x - low) / (high - low), 0.0, 1.0)\n      // prettier-ignore\n      const t = this.clampMedianInterval(\n        this.divisionInterval(\n          this.subtractionInterval(x, low),\n          this.subtractionInterval(high, low)),\n        0.0,\n        1.0);\n      // Inherited from t * t * (3.0 - 2.0 * t)\n      // prettier-ignore\n      return this.multiplicationInterval(\n        t,\n        this.multiplicationInterval(t,\n          this.subtractionInterval(3.0,\n            this.multiplicationInterval(2.0, t))));\n    },\n  };\n\n  protected smoothStepIntervalImpl(low: number, high: number, x: number): FPInterval {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(low),\n      this.toInterval(high),\n      this.toInterval(x),\n      this.SmoothStepOp\n    );\n  }\n\n  /** Calculate an acceptance interval of smoothStep(low, high, x) */\n  public abstract readonly smoothStepInterval: (low: number, high: number, x: number) => FPInterval;\n\n  private readonly SqrtIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(1.0, this.inverseSqrtInterval(n));\n    },\n  };\n\n  protected sqrtIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sqrt(x) */\n  public abstract readonly sqrtInterval: (n: number | FPInterval) => FPInterval;\n\n  private readonly StepIntervalOp: ScalarPairToIntervalOp = {\n    impl: (edge: number, x: number): FPInterval => {\n      if (edge <= x) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      return this.correctlyRoundedInterval(0.0);\n    },\n  };\n\n  protected stepIntervalImpl(edge: number, x: number): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(edge),\n      this.toInterval(x),\n      this.StepIntervalOp\n    );\n  }\n\n  /**\n   * Calculate an acceptance 'interval' for step(edge, x)\n   *\n   * step only returns two possible values, so its interval requires special\n   * interpretation in CTS tests.\n   * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n   * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n   * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n   * indicate either 0.0 or 1.0 are acceptable answers.\n   * [-∞, +∞] is treated as any interval, since an undefined or infinite value\n   * was passed in.\n   */\n  public abstract readonly stepInterval: (edge: number, x: number) => FPInterval;\n\n  private readonly SubtractionIntervalOp: ScalarPairToIntervalOp = {\n    impl: (x: number, y: number): FPInterval => {\n      return this.correctlyRoundedInterval(x - y);\n    },\n  };\n\n  protected subtractionIntervalImpl(x: number | FPInterval, y: number | FPInterval): FPInterval {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y */\n  public abstract readonly subtractionInterval: (\n    x: number | FPInterval,\n    y: number | FPInterval\n  ) => FPInterval;\n\n  protected subtractionMatrixMatrixIntervalImpl(x: Array2D<number>, y: Array2D<number>): FPMatrix {\n    return this.runScalarPairToIntervalOpMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y, when x and y are matrices */\n  public abstract readonly subtractionMatrixMatrixInterval: (\n    x: Array2D<number>,\n    y: Array2D<number>\n  ) => FPMatrix;\n\n  private readonly TanIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(this.sinInterval(n), this.cosInterval(n));\n    },\n  };\n\n  protected tanIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tan(x) */\n  public abstract readonly tanInterval: (n: number) => FPInterval;\n\n  private readonly TanhIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.divisionInterval(this.sinhInterval(n), this.coshInterval(n));\n    },\n  };\n\n  protected tanhIntervalImpl(n: number): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tanh(x) */\n  public abstract readonly tanhInterval: (n: number) => FPInterval;\n\n  private readonly TransposeIntervalOp: MatrixToMatrixOp = {\n    impl: (m: Array2D<number>): FPMatrix => {\n      const num_cols = m.length;\n      const num_rows = m[0].length;\n      const result: Array2D<FPInterval> = [...Array(num_rows)].map(_ => [...Array(num_cols)]);\n\n      for (let i = 0; i < num_cols; i++) {\n        for (let j = 0; j < num_rows; j++) {\n          result[j][i] = this.correctlyRoundedInterval(m[i][j]);\n        }\n      }\n      return this.toMatrix(result);\n    },\n  };\n\n  protected transposeIntervalImpl(m: Array2D<number>): FPMatrix {\n    return this.runMatrixToMatrixOp(this.toMatrix(m), this.TransposeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of transpose(m) */\n  public abstract readonly transposeInterval: (m: Array2D<number>) => FPMatrix;\n\n  private readonly TruncIntervalOp: ScalarToIntervalOp = {\n    impl: (n: number): FPInterval => {\n      return this.correctlyRoundedInterval(Math.trunc(n));\n    },\n  };\n\n  protected truncIntervalImpl(n: number | FPInterval): FPInterval {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TruncIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of trunc(x) */\n  public abstract readonly truncInterval: (n: number | FPInterval) => FPInterval;\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kF32AnyInterval = new FPInterval('f32', Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\nconst kF32ZeroInterval = new FPInterval('f32', 0);\n\nclass F32Traits extends FPTraits {\n  private static _constants: FPConstants = {\n    positive: {\n      min: kValue.f32.positive.min,\n      max: kValue.f32.positive.max,\n      infinity: kValue.f32.infinity.positive,\n      nearest_max: kValue.f32.positive.nearest_max,\n      less_than_one: kValue.f32.positive.less_than_one,\n      subnormal: {\n        min: kValue.f32.subnormal.positive.min,\n        max: kValue.f32.subnormal.positive.max,\n      },\n      pi: {\n        whole: kValue.f32.positive.pi.whole,\n        three_quarters: kValue.f32.positive.pi.three_quarters,\n        half: kValue.f32.positive.pi.half,\n        third: kValue.f32.positive.pi.third,\n        quarter: kValue.f32.positive.pi.quarter,\n        sixth: kValue.f32.positive.pi.sixth,\n      },\n      e: kValue.f32.positive.e,\n    },\n    negative: {\n      min: kValue.f32.negative.min,\n      max: kValue.f32.negative.max,\n      infinity: kValue.f32.infinity.negative,\n      nearest_min: kValue.f32.negative.nearest_min,\n      less_than_one: kValue.f32.negative.less_than_one,\n      subnormal: {\n        min: kValue.f32.subnormal.negative.min,\n        max: kValue.f32.subnormal.negative.max,\n      },\n      pi: {\n        whole: kValue.f32.negative.pi.whole,\n        three_quarters: kValue.f32.negative.pi.three_quarters,\n        half: kValue.f32.negative.pi.half,\n        third: kValue.f32.negative.pi.third,\n        quarter: kValue.f32.negative.pi.quarter,\n        sixth: kValue.f32.negative.pi.sixth,\n      },\n    },\n    anyInterval: kF32AnyInterval,\n    zeroInterval: kF32ZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'f32',\n      kValue.f32.negative.pi.whole,\n      kValue.f32.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'f32',\n      kValue.f32.subnormal.positive.min,\n      kValue.f32.positive.max\n    ),\n    zeroVector: {\n      2: [kF32ZeroInterval, kF32ZeroInterval],\n      3: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval],\n      4: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval],\n    },\n    anyVector: {\n      2: [kF32AnyInterval, kF32AnyInterval],\n      3: [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n      4: [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n    },\n    anyMatrix: {\n      2: {\n        2: [\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n        ],\n        3: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n        4: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n      },\n      3: {\n        2: [\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n        ],\n        3: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n        4: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n      },\n      4: {\n        2: [\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval],\n        ],\n        3: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n        4: [\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n          [kF32AnyInterval, kF32AnyInterval, kF32AnyInterval, kF32AnyInterval],\n        ],\n      },\n    },\n  };\n\n  public constructor() {\n    super('f32');\n  }\n\n  public constants(): FPConstants {\n    return F32Traits._constants;\n  }\n\n  // Utilities - Overrides\n  public readonly quantize = quantizeToF32;\n  public readonly correctlyRounded = correctlyRoundedF32;\n  public readonly isFinite = isFiniteF32;\n  public readonly isSubnormal = isSubnormalNumberF32;\n  public readonly flushSubnormal = flushSubnormalNumberF32;\n  public readonly oneULP = oneULPF32;\n  public readonly scalarBuilder = f32;\n\n  // Framework - API - Overrides\n  public readonly absInterval = this.absIntervalImpl.bind(this);\n  public readonly acosInterval = this.acosIntervalImpl.bind(this);\n  public readonly acoshAlternativeInterval = this.acoshAlternativeIntervalImpl.bind(this);\n  public readonly acoshPrimaryInterval = this.acoshPrimaryIntervalImpl.bind(this);\n  public readonly acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  public readonly additionInterval = this.additionIntervalImpl.bind(this);\n  public readonly additionMatrixMatrixInterval = this.additionMatrixMatrixIntervalImpl.bind(this);\n  public readonly asinInterval = this.asinIntervalImpl.bind(this);\n  public readonly asinhInterval = this.asinhIntervalImpl.bind(this);\n  public readonly atanInterval = this.atanIntervalImpl.bind(this);\n  public readonly atan2Interval = this.atan2IntervalImpl.bind(this);\n  public readonly atanhInterval = this.atanhIntervalImpl.bind(this);\n  public readonly ceilInterval = this.ceilIntervalImpl.bind(this);\n  public readonly clampMedianInterval = this.clampMedianIntervalImpl.bind(this);\n  public readonly clampMinMaxInterval = this.clampMinMaxIntervalImpl.bind(this);\n  public readonly clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  public readonly correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  public readonly correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  public readonly cosInterval = this.cosIntervalImpl.bind(this);\n  public readonly coshInterval = this.coshIntervalImpl.bind(this);\n  public readonly crossInterval = this.crossIntervalImpl.bind(this);\n  public readonly degreesInterval = this.degreesIntervalImpl.bind(this);\n  public readonly determinantInterval = this.determinantIntervalImpl.bind(this);\n  public readonly distanceInterval = this.distanceIntervalImpl.bind(this);\n  public readonly divisionInterval = this.divisionIntervalImpl.bind(this);\n  public readonly dotInterval = this.dotIntervalImpl.bind(this);\n  public readonly expInterval = this.expIntervalImpl.bind(this);\n  public readonly exp2Interval = this.exp2IntervalImpl.bind(this);\n  public readonly floorInterval = this.floorIntervalImpl.bind(this);\n  public readonly fmaInterval = this.fmaIntervalImpl.bind(this);\n  public readonly fractInterval = this.fractIntervalImpl.bind(this);\n  public readonly inverseSqrtInterval = this.inverseSqrtIntervalImpl.bind(this);\n  public readonly ldexpInterval = this.ldexpIntervalImpl.bind(this);\n  public readonly lengthInterval = this.lengthIntervalImpl.bind(this);\n  public readonly logInterval = this.logIntervalImpl.bind(this);\n  public readonly log2Interval = this.log2IntervalImpl.bind(this);\n  public readonly maxInterval = this.maxIntervalImpl.bind(this);\n  public readonly minInterval = this.minIntervalImpl.bind(this);\n  public readonly mixImpreciseInterval = this.mixImpreciseIntervalImpl.bind(this);\n  public readonly mixPreciseInterval = this.mixPreciseIntervalImpl.bind(this);\n  public readonly mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  public readonly multiplicationInterval = this.multiplicationIntervalImpl.bind(this);\n  public readonly multiplicationMatrixMatrixInterval = this.multiplicationMatrixMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationMatrixScalarInterval = this.multiplicationMatrixScalarIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationScalarMatrixInterval = this.multiplicationScalarMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationMatrixVectorInterval = this.multiplicationMatrixVectorIntervalImpl.bind(\n    this\n  );\n  public readonly multiplicationVectorMatrixInterval = this.multiplicationVectorMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly negationInterval = this.negationIntervalImpl.bind(this);\n  public readonly normalizeInterval = this.normalizeIntervalImpl.bind(this);\n  public readonly powInterval = this.powIntervalImpl.bind(this);\n  public readonly quantizeToF16Interval = this.quantizeToF16IntervalImpl.bind(this);\n  public readonly radiansInterval = this.radiansIntervalImpl.bind(this);\n  public readonly reflectInterval = this.reflectIntervalImpl.bind(this);\n  public readonly remainderInterval = this.remainderIntervalImpl.bind(this);\n  public readonly roundInterval = this.roundIntervalImpl.bind(this);\n  public readonly saturateInterval = this.saturateIntervalImpl.bind(this);\n  public readonly signInterval = this.signIntervalImpl.bind(this);\n  public readonly sinInterval = this.sinIntervalImpl.bind(this);\n  public readonly sinhInterval = this.sinhIntervalImpl.bind(this);\n  public readonly smoothStepInterval = this.smoothStepIntervalImpl.bind(this);\n  public readonly sqrtInterval = this.sqrtIntervalImpl.bind(this);\n  public readonly stepInterval = this.stepIntervalImpl.bind(this);\n  public readonly subtractionInterval = this.subtractionIntervalImpl.bind(this);\n  public readonly subtractionMatrixMatrixInterval = this.subtractionMatrixMatrixIntervalImpl.bind(\n    this\n  );\n  public readonly tanInterval = this.tanIntervalImpl.bind(this);\n  public readonly tanhInterval = this.tanhIntervalImpl.bind(this);\n  public readonly transposeInterval = this.transposeIntervalImpl.bind(this);\n  public readonly truncInterval = this.truncIntervalImpl.bind(this);\n\n  // Framework - Cases\n\n  // U32 -> Interval is used for testing f32 specific unpack* functions\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  private makeU32ToVectorCase(\n    param: number,\n    filter: IntervalFilter,\n    ...ops: ScalarToVector[]\n  ): Case | undefined {\n    param = Math.trunc(param);\n\n    const vectors = ops.map(o => o(param));\n    if (filter === 'finite' && vectors.some(v => !v.every(e => e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: u32(param),\n      expected: anyOf(...vectors),\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  public generateU32ToIntervalCases(\n    params: number[],\n    filter: IntervalFilter,\n    ...ops: ScalarToVector[]\n  ): Case[] {\n    return params.reduce((cases, e) => {\n      const c = this.makeU32ToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array<Case>());\n  }\n\n  // Framework - API\n\n  /**\n   * Once-allocated ArrayBuffer/views to avoid overhead of allocation when\n   * converting between numeric formats\n   *\n   * unpackData* is shared between all the unpack*Interval functions, so to\n   * avoid re-entrancy problems, they should not call each other or themselves\n   * directly or indirectly.\n   */\n  private readonly unpackData = new ArrayBuffer(4);\n  private readonly unpackDataU32 = new Uint32Array(this.unpackData);\n  private readonly unpackDataU16 = new Uint16Array(this.unpackData);\n  private readonly unpackDataU8 = new Uint8Array(this.unpackData);\n  private readonly unpackDataI16 = new Int16Array(this.unpackData);\n  private readonly unpackDataI8 = new Int8Array(this.unpackData);\n  private readonly unpackDataF16 = new Float16Array(this.unpackData);\n\n  private unpack2x16floatIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16floatInterval only accepts values on the bounds of u32'\n    );\n    this.unpackDataU32[0] = n;\n    if (this.unpackDataF16.some(f => !isFiniteF16(f))) {\n      return [this.constants().anyInterval, this.constants().anyInterval];\n    }\n\n    const result: FPVector = [\n      this.quantizeToF16Interval(this.unpackDataF16[0]),\n      this.quantizeToF16Interval(this.unpackDataF16[1]),\n    ];\n\n    if (result.some(r => !r.isFinite())) {\n      return [this.constants().anyInterval, this.constants().anyInterval];\n    }\n    return result;\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16float(x) */\n  public readonly unpack2x16floatInterval = this.unpack2x16floatIntervalImpl.bind(this);\n\n  private unpack2x16snormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16snormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.maxInterval(this.divisionInterval(n, 32767), -1);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataI16[0]), op(this.unpackDataI16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16snorm(x) */\n  public readonly unpack2x16snormInterval = this.unpack2x16snormIntervalImpl.bind(this);\n\n  private unpack2x16unormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16unormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.divisionInterval(n, 65535);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataU16[0]), op(this.unpackDataU16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16unorm(x) */\n  public readonly unpack2x16unormInterval = this.unpack2x16unormIntervalImpl.bind(this);\n\n  private unpack4x8snormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8snormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.maxInterval(this.divisionInterval(n, 127), -1);\n    };\n    this.unpackDataU32[0] = n;\n    return [\n      op(this.unpackDataI8[0]),\n      op(this.unpackDataI8[1]),\n      op(this.unpackDataI8[2]),\n      op(this.unpackDataI8[3]),\n    ];\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8snorm(x) */\n  public readonly unpack4x8snormInterval = this.unpack4x8snormIntervalImpl.bind(this);\n\n  private unpack4x8unormIntervalImpl(n: number): FPVector {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8unormInterval only accepts values on the bounds of u32'\n    );\n    const op = (n: number): FPInterval => {\n      return this.divisionInterval(n, 255);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [\n      op(this.unpackDataU8[0]),\n      op(this.unpackDataU8[1]),\n      op(this.unpackDataU8[2]),\n      op(this.unpackDataU8[3]),\n    ];\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8unorm(x) */\n  public readonly unpack4x8unormInterval = this.unpack4x8unormIntervalImpl.bind(this);\n}\n\nexport const FP = {\n  f32: new F32Traits(),\n};\n"],"mappings":"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"}