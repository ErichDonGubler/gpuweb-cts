{"version":3,"file":"builtin.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kTests","pos","src","pass","trailing_comma","newline_in_attr","whitespace_in_attr","invalid_name","no_params","missing_param","missing_parens","missing_lparen","missing_rparen","multiple_params","ident_param","number_param","test","desc","params","u","combine","fn","t","builtin","code","expectCompileResult"],"sources":["../../../../../src/webgpu/shader/validation/parse/builtin.spec.ts"],"sourcesContent":["export const description = `Validation tests for @builtin`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kTests = {\n  pos: {\n    src: `@builtin(position)`,\n    pass: true,\n  },\n  trailing_comma: {\n    src: `@builtin(position,)`,\n    pass: true,\n  },\n  newline_in_attr: {\n    src: `@ \\n builtin(position)`,\n    pass: true,\n  },\n  whitespace_in_attr: {\n    src: `@/* comment */builtin/* comment */\\n\\n(\\t/*comment*/position/*comment*/)`,\n    pass: true,\n  },\n  invalid_name: {\n    src: `@abuiltin(position)`,\n    pass: false,\n  },\n  no_params: {\n    src: `@builtin`,\n    pass: false,\n  },\n  missing_param: {\n    src: `@builtin()`,\n    pass: false,\n  },\n  missing_parens: {\n    src: `@builtin position`,\n    pass: false,\n  },\n  missing_lparen: {\n    src: `@builtin position)`,\n    pass: false,\n  },\n  missing_rparen: {\n    src: `@builtin(position`,\n    pass: false,\n  },\n  multiple_params: {\n    src: `@builtin(position, frag_depth)`,\n    pass: false,\n  },\n  ident_param: {\n    src: `@builtin(identifier)`,\n    pass: false,\n  },\n  number_param: {\n    src: `@builtin(2)`,\n    pass: false,\n  },\n};\n\ng.test('parse')\n  .desc(`Test that @builtin is parsed correctly.`)\n  .params(u => u.combine('builtin', keysOf(kTests)))\n  .fn(t => {\n    const src = kTests[t.params.builtin].src;\n    const code = `\n@vertex\nfn main() -> ${src} vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}`;\n    t.expectCompileResult(kTests[t.params.builtin].pass, code);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI,+BAA8B,CAE1D,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,MAAM,QAAQ,wCAAwC;AAC/D,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,oBAAoB,CAAC;;AAEpD,MAAME,MAAM,GAAG;EACbC,GAAG,EAAE;IACHC,GAAG,EAAG,oBAAmB;IACzBC,IAAI,EAAE;EACR,CAAC;EACDC,cAAc,EAAE;IACdF,GAAG,EAAG,qBAAoB;IAC1BC,IAAI,EAAE;EACR,CAAC;EACDE,eAAe,EAAE;IACfH,GAAG,EAAG,wBAAuB;IAC7BC,IAAI,EAAE;EACR,CAAC;EACDG,kBAAkB,EAAE;IAClBJ,GAAG,EAAG,0EAAyE;IAC/EC,IAAI,EAAE;EACR,CAAC;EACDI,YAAY,EAAE;IACZL,GAAG,EAAG,qBAAoB;IAC1BC,IAAI,EAAE;EACR,CAAC;EACDK,SAAS,EAAE;IACTN,GAAG,EAAG,UAAS;IACfC,IAAI,EAAE;EACR,CAAC;EACDM,aAAa,EAAE;IACbP,GAAG,EAAG,YAAW;IACjBC,IAAI,EAAE;EACR,CAAC;EACDO,cAAc,EAAE;IACdR,GAAG,EAAG,mBAAkB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDQ,cAAc,EAAE;IACdT,GAAG,EAAG,oBAAmB;IACzBC,IAAI,EAAE;EACR,CAAC;EACDS,cAAc,EAAE;IACdV,GAAG,EAAG,mBAAkB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDU,eAAe,EAAE;IACfX,GAAG,EAAG,gCAA+B;IACrCC,IAAI,EAAE;EACR,CAAC;EACDW,WAAW,EAAE;IACXZ,GAAG,EAAG,sBAAqB;IAC3BC,IAAI,EAAE;EACR,CAAC;EACDY,YAAY,EAAE;IACZb,GAAG,EAAG,aAAY;IAClBC,IAAI,EAAE;EACR;AACF,CAAC;;AAEDJ,CAAC,CAACiB,IAAI,CAAC,OAAO,CAAC;AACZC,IAAI,CAAE,yCAAwC,CAAC;AAC/CC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,SAAS,EAAEvB,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC;AACjDqB,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMpB,GAAG,GAAGF,MAAM,CAACsB,CAAC,CAACJ,MAAM,CAACK,OAAO,CAAC,CAACrB,GAAG;EACxC,MAAMsB,IAAI,GAAI;AAClB;AACA,eAAetB,GAAI;AACnB;AACA,EAAE;EACEoB,CAAC,CAACG,mBAAmB,CAACzB,MAAM,CAACsB,CAAC,CAACJ,MAAM,CAACK,OAAO,CAAC,CAACpB,IAAI,EAAEqB,IAAI,CAAC;AAC5D,CAAC,CAAC"}