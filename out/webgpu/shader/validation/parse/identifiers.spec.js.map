{"version":3,"sources":["../../../../../src/webgpu/shader/validation/parse/identifiers.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","kValidIdentifiers","Set","kInvalidIdentifiers","test","desc","params","u","combine","beginSubcases","fn","t","code","ident","expectCompileResult","has"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,mCAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEP,MAAME,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,EAAwB,OAAxB,EAAiC,QAAjC,CAAR,CAA1B;AACA,MAAMC,mBAAmB,GAAG,IAAID,GAAJ,CAAQ;AAClC,GADkC,EAC7B;AACL,OAFkC,EAEzB;AACT,MAHkC,EAG1B;AACR;AACA,SALkC;AAMlC,SANkC;AAOlC,SAPkC;AAQlC,SARkC;AASlC,SATkC;AAUlC,UAVkC;AAWlC,SAXkC;AAYlC,SAZkC;AAalC,SAbkC;AAclC,UAdkC;AAelC;AACA,OAhBkC;AAiBlC,QAjBkC;AAkBlC,SAlBkC;AAmBlC,MAnBkC;AAoBlC,OApBkC;AAqBlC,MArBkC;AAsBlC,UAtBkC;AAuBlC,YAvBkC;AAwBlC,SAxBkC;AAyBlC,SAzBkC;AA0BlC,QA1BkC;AA2BlC,MA3BkC;AA4BlC,KA5BkC;AA6BlC,aA7BkC;AA8BlC,OA9BkC;AA+BlC,IA/BkC;AAgClC,KAhCkC;AAiClC,UAjCkC;AAkClC,KAlCkC;AAmClC,IAnCkC;AAoClC,KApCkC;AAqClC,MArCkC;AAsClC,QAtCkC;AAuClC,QAvCkC;AAwClC,QAxCkC;AAyClC,QAzCkC;AA0ClC,QA1CkC;AA2ClC,QA3CkC;AA4ClC,QA5CkC;AA6ClC,QA7CkC;AA8ClC,QA9CkC;AA+ClC,UA/CkC;AAgDlC,SAhDkC;AAiDlC,KAjDkC;AAkDlC,QAlDkC;AAmDlC,SAnDkC;AAoDlC,oBApDkC;AAqDlC,SArDkC;AAsDlC,QAtDkC;AAuDlC,QAvDkC;AAwDlC,YAxDkC;AAyDlC,YAzDkC;AA0DlC,kBA1DkC;AA2DlC,YA3DkC;AA4DlC,cA5DkC;AA6DlC,oBA7DkC;AA8DlC,kBA9DkC;AA+DlC,wBA/DkC;AAgElC,oBAhEkC;AAiElC,0BAjEkC;AAkElC,+BAlEkC;AAmElC,yBAnEkC;AAoElC,oBApEkC;AAqElC,oBArEkC;AAsElC,0BAtEkC;AAuElC,oBAvEkC;AAwElC,MAxEkC;AAyElC,MAzEkC;AA0ElC,KA1EkC;AA2ElC,SA3EkC;AA4ElC,KA5EkC;AA6ElC,MA7EkC;AA8ElC,MA9EkC;AA+ElC,MA/EkC;AAgFlC,OAhFkC;AAiFlC,WAjFkC,CAAR,CAA5B;;AAmFAF,CAAC,CAACI,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL;AACA,qDAJA;;AAMGC,MANH,CAMU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,IAAIN,GAAJ,CAAQ,CAAC,GAAGD,iBAAJ,EAAuB,GAAGE,mBAA1B,CAAR,CAAnB,EAA4EM,aAA5E,EAPJ;;AASGC,EATH,CASM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI,gBAAeD,CAAC,CAACL,MAAF,CAASO,KAAM,SAA5C;AACAF,EAAAA,CAAC,CAACG,mBAAF,CAAsBb,iBAAiB,CAACc,GAAlB,CAAsBJ,CAAC,CAACL,MAAF,CAASO,KAA/B,CAAtB,EAA6DD,IAA7D;AACD,CAZH","sourcesContent":["export const description = `Validation tests for tokenization`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidIdentifiers = new Set(['foo', 'Foo', '_foo0', '_0foo', 'foo__0']);\nconst kInvalidIdentifiers = new Set([\n  '_', // Single underscore is a syntactic token for phony assignment.\n  '__foo', // Leading double underscore is reserved.\n  '0foo', // Must start with single underscore or a letter.\n  // No punctuation:\n  'foo.bar',\n  'foo-bar',\n  'foo+bar',\n  'foo#bar',\n  'foo!bar',\n  'foo\\\\bar',\n  'foo/bar',\n  'foo,bar',\n  'foo@bar',\n  'foo::bar',\n  // Keywords:\n  'array',\n  'atomic',\n  'bitcast',\n  'bool',\n  'break',\n  'case',\n  'continue',\n  'continuing',\n  'default',\n  'discard',\n  'enable',\n  'else',\n  'f32',\n  'fallthrough',\n  'false',\n  'fn',\n  'for',\n  'function',\n  'i32',\n  'if',\n  'let',\n  'loop',\n  'mat2x2',\n  'mat2x3',\n  'mat2x4',\n  'mat3x2',\n  'mat3x3',\n  'mat3x4',\n  'mat4x2',\n  'mat4x3',\n  'mat4x4',\n  'override',\n  'private',\n  'ptr',\n  'return',\n  'sampler',\n  'sampler_comparison',\n  'storage',\n  'struct',\n  'switch',\n  'texture_1d',\n  'texture_2d',\n  'texture_2d_array',\n  'texture_3d',\n  'texture_cube',\n  'texture_cube_array',\n  'texture_depth_2d',\n  'texture_depth_2d_array',\n  'texture_depth_cube',\n  'texture_depth_cube_array',\n  'texture_depth_multisampled_2d',\n  'texture_multisampled_2d',\n  'texture_storage_1d',\n  'texture_storage_2d',\n  'texture_storage_2d_array',\n  'texture_storage_3d',\n  'true',\n  'type',\n  'u32',\n  'uniform',\n  'var',\n  'vec2',\n  'vec3',\n  'vec4',\n  'while',\n  'workgroup',\n]);\ng.test('identifiers')\n  .desc(\n    `Test that valid identifiers are accepted, and invalid identifiers are rejected.\n\nTODO: Add reserved words, when they've been refined.`\n  )\n  .params(u =>\n    u.combine('ident', new Set([...kValidIdentifiers, ...kInvalidIdentifiers])).beginSubcases()\n  )\n  .fn(t => {\n    const code = `var<private> ${t.params.ident} : i32;`;\n    t.expectCompileResult(kValidIdentifiers.has(t.params.ident), code);\n  });\n"],"file":"identifiers.spec.js"}