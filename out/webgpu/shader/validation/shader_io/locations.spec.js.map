{"version":3,"sources":["../../../../../src/webgpu/shader/validation/shader_io/locations.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","kTestTypes","type","_valid","generateShader","attribute","stage","io","use_struct","code","param","retType","retVal","test","desc","params","u","combine","beginSubcases","fn","t","target_stage","target_io","expectation","expectCompileResult","combineWithParams","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,kDAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEP;AACA,MAAME,UAAU,GAAG;AACjB,EAAEC,IAAI,EAAE,MAAR,EAAgBC,MAAM,EAAE,KAAxB,EADiB;AAEjB,EAAED,IAAI,EAAE,KAAR,EAAeC,MAAM,EAAE,IAAvB,EAFiB;AAGjB,EAAED,IAAI,EAAE,KAAR,EAAeC,MAAM,EAAE,IAAvB,EAHiB;AAIjB,EAAED,IAAI,EAAE,KAAR,EAAeC,MAAM,EAAE,IAAvB,EAJiB;AAKjB,EAAED,IAAI,EAAE,YAAR,EAAsBC,MAAM,EAAE,KAA9B,EALiB;AAMjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EANiB;AAOjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAPiB;AAQjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EARiB;AASjB,EAAED,IAAI,EAAE,YAAR,EAAsBC,MAAM,EAAE,KAA9B,EATiB;AAUjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAViB;AAWjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAXiB;AAYjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAZiB;AAajB,EAAED,IAAI,EAAE,YAAR,EAAsBC,MAAM,EAAE,KAA9B,EAbiB;AAcjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAdiB;AAejB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAfiB;AAgBjB,EAAED,IAAI,EAAE,WAAR,EAAqBC,MAAM,EAAE,IAA7B,EAhBiB;AAiBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAjBiB;AAkBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAlBiB;AAmBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAnBiB;AAoBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EApBiB;AAqBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EArBiB;AAsBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAtBiB;AAuBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAvBiB;AAwBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAxBiB;AAyBjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EAzBiB;AA0BjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EA1BiB;AA2BjB,EAAED,IAAI,EAAE,aAAR,EAAuBC,MAAM,EAAE,KAA/B,EA3BiB;AA4BjB,EAAED,IAAI,EAAE,eAAR,EAAyBC,MAAM,EAAE,KAAjC,EA5BiB;AA6BjB,EAAED,IAAI,EAAE,cAAR,EAAwBC,MAAM,EAAE,KAAhC,EA7BiB;AA8BjB,EAAED,IAAI,EAAE,cAAR,EAAwBC,MAAM,EAAE,KAAhC,EA9BiB;AA+BjB,EAAED,IAAI,EAAE,cAAR,EAAwBC,MAAM,EAAE,KAAhC,EA/BiB;AAgCjB,EAAED,IAAI,EAAE,UAAR,EAAoBC,MAAM,EAAE,KAA5B,EAhCiB,CAAnB;;;AAmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAT,CAAwB;AACtBC,EAAAA,SADsB;AAEtBH,EAAAA,IAFsB;AAGtBI,EAAAA,KAHsB;AAItBC,EAAAA,EAJsB;AAKtBC,EAAAA,UALsB,EAAxB;;;;;;;AAYG;AACD,MAAIC,IAAI,GAAG,EAAX;;AAEA,MAAID,UAAJ,EAAgB;AACd;AACAC,IAAAA,IAAI,IAAI,cAAR;AACAA,IAAAA,IAAI,IAAK,KAAIJ,SAAU,YAAWH,IAAK,KAAvC;AACA,QAAII,KAAK,KAAK,QAAV,IAAsBC,EAAE,KAAK,KAAjC,EAAwC;AACtC;AACAE,MAAAA,IAAI,IAAK,iDAAT;AACD;AACDA,IAAAA,IAAI,IAAI,QAAR;AACD;;AAED,MAAIH,KAAK,KAAK,EAAd,EAAkB;AAChB;AACAG,IAAAA,IAAI,IAAK,WAAUH,KAAM,KAAzB;AACA,QAAIA,KAAK,KAAK,SAAd,EAAyB;AACvBG,MAAAA,IAAI,IAAI,wBAAR;AACD;AACF;;AAED;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,OAAO,GAAG,EAAd;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIL,EAAE,KAAK,IAAX,EAAiB;AACf,QAAIC,UAAJ,EAAgB;AACdE,MAAAA,KAAK,GAAI,QAAT;AACD,KAFD,MAEO;AACLA,MAAAA,KAAK,GAAI,GAAEL,SAAU,YAAWH,IAAK,EAArC;AACD;;AAED;AACA,QAAII,KAAK,KAAK,QAAd,EAAwB;AACtBK,MAAAA,OAAO,GAAI,oCAAX;AACAC,MAAAA,MAAM,GAAI,qBAAV;AACD;AACF,GAZD,MAYO,IAAIL,EAAE,KAAK,KAAX,EAAkB;AACvB,QAAIC,UAAJ,EAAgB;AACdG,MAAAA,OAAO,GAAG,MAAV;AACAC,MAAAA,MAAM,GAAI,aAAV;AACD,KAHD,MAGO;AACLD,MAAAA,OAAO,GAAI,MAAKN,SAAU,IAAGH,IAAK,EAAlC;AACAU,MAAAA,MAAM,GAAI,UAASV,IAAK,KAAxB;AACD;AACF;;AAEDO,EAAAA,IAAI,IAAK;AACX,cAAcC,KAAM,KAAIC,OAAQ;AAChC,QAAQC,MAAO;AACf;AACA,GAJE;;AAMA,SAAOH,IAAP;AACD;;AAEDT,CAAC,CAACa,IAAF,CAAO,aAAP;AACGC,IADH,CACS,2DADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,YADX,EACyB,CAAC,IAAD,EAAO,KAAP,CADzB;AAEGA,OAFH,CAEW,cAFX,EAE2B,CAAC,QAAD,EAAW,UAAX,EAAuB,SAAvB,CAF3B;AAGGA,OAHH,CAGW,WAHX,EAGwB,CAAC,IAAD,EAAO,KAAP,CAHxB;AAIGC,aAJH,EAHJ;;AASGC,EATH,CASMC,CAAC,IAAI;AACP,QAAMX,IAAI,GAAGL,cAAc,CAAC;AAC1BC,IAAAA,SAAS,EAAE,iBADe;AAE1BH,IAAAA,IAAI,EAAE,KAFoB;AAG1BI,IAAAA,KAAK,EAAEc,CAAC,CAACL,MAAF,CAASM,YAHU;AAI1Bd,IAAAA,EAAE,EAAEa,CAAC,CAACL,MAAF,CAASO,SAJa;AAK1Bd,IAAAA,UAAU,EAAEY,CAAC,CAACL,MAAF,CAASP,UALK,EAAD,CAA3B;;;AAQA;AACA;AACA,QAAMe,WAAW;AACfH,EAAAA,CAAC,CAACL,MAAF,CAASM,YAAT,KAA0B,UAA1B;AACCD,EAAAA,CAAC,CAACL,MAAF,CAASM,YAAT,KAA0B,QAA1B,KAAuCD,CAAC,CAACL,MAAF,CAASO,SAAT,KAAuB,IAAvB,IAA+BF,CAAC,CAACL,MAAF,CAASP,UAA/E,CAFH;AAGAY,EAAAA,CAAC,CAACI,mBAAF,CAAsBD,WAAtB,EAAmCd,IAAnC;AACD,CAxBH;;AA0BAT,CAAC,CAACa,IAAF,CAAO,MAAP;AACGC,IADH,CACS,0CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,YADX,EACyB,CAAC,IAAD,EAAO,KAAP,CADzB;AAEGQ,iBAFH,CAEqBxB,UAFrB;AAGGiB,aAHH,EAHJ;;AAQGC,EARH,CAQMC,CAAC,IAAI;AACP,MAAIX,IAAI,GAAG,EAAX;;AAEA,MAAIW,CAAC,CAACL,MAAF,CAASb,IAAT,KAAkB,UAAtB,EAAkC;AAChC;AACAO,IAAAA,IAAI,IAAI,qBAAR;AACAA,IAAAA,IAAI,IAAK,kBAAT;AACAA,IAAAA,IAAI,IAAI,QAAR;AACD;;AAEDA,EAAAA,IAAI,IAAIL,cAAc,CAAC;AACrBC,IAAAA,SAAS,EAAE,iBADU;AAErBH,IAAAA,IAAI,EAAEkB,CAAC,CAACL,MAAF,CAASb,IAFM;AAGrBI,IAAAA,KAAK,EAAE,UAHc;AAIrBC,IAAAA,EAAE,EAAE,IAJiB;AAKrBC,IAAAA,UAAU,EAAEY,CAAC,CAACL,MAAF,CAASP,UALA,EAAD,CAAtB;;;AAQA;AACAY,EAAAA,CAAC,CAACI,mBAAF,CAAsBJ,CAAC,CAACL,MAAF,CAASZ,MAA/B,EAAuCM,IAAvC;AACD,CA5BH;;AA8BAT,CAAC,CAACa,IAAF,CAAO,SAAP;AACGC,IADH,CACS,2CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,QAAD,EAAW,UAAX,EAAuB,EAAvB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAAC,IAAD,EAAO,KAAP,CAFxB;AAGGC,aAHH,EAHJ;;AAQGC,EARH,CAQMC,CAAC,IAAI;AACP,MAAIX,IAAI,GAAG,EAAX;;AAEA;AACAA,EAAAA,IAAI,IAAI,kBAAR;AACAA,EAAAA,IAAI,IAAK,kCAAT;AACAA,EAAAA,IAAI,IAAI,QAAR;AACAA,EAAAA,IAAI,IAAI,kBAAR;AACAA,EAAAA,IAAI,IAAK,oBAAT;AACAA,EAAAA,IAAI,IAAI,QAAR;;AAEAA,EAAAA,IAAI,IAAIL,cAAc,CAAC;AACrBC,IAAAA,SAAS,EAAE,EADU;AAErBH,IAAAA,IAAI,EAAE,OAFe;AAGrBI,IAAAA,KAAK,EAAEc,CAAC,CAACL,MAAF,CAASM,YAHK;AAIrBd,IAAAA,EAAE,EAAEa,CAAC,CAACL,MAAF,CAASO,SAJQ;AAKrBd,IAAAA,UAAU,EAAE,KALS,EAAD,CAAtB;;;AAQA;AACAY,EAAAA,CAAC,CAACI,mBAAF,CAAsBJ,CAAC,CAACL,MAAF,CAASM,YAAT,KAA0B,EAAhD,EAAoDZ,IAApD;AACD,CA7BH;;AA+BAT,CAAC,CAACa,IAAF,CAAO,YAAP;AACGC,IADH,CACS,yDADT;AAEGY,aAFH","sourcesContent":["export const description = `Validation tests for entry point user-defined IO`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// List of types to test against.\nconst kTestTypes = [\n  { type: 'bool', _valid: false },\n  { type: 'u32', _valid: true },\n  { type: 'i32', _valid: true },\n  { type: 'f32', _valid: true },\n  { type: 'vec2<bool>', _valid: false },\n  { type: 'vec2<u32>', _valid: true },\n  { type: 'vec2<i32>', _valid: true },\n  { type: 'vec2<f32>', _valid: true },\n  { type: 'vec3<bool>', _valid: false },\n  { type: 'vec3<u32>', _valid: true },\n  { type: 'vec3<i32>', _valid: true },\n  { type: 'vec3<f32>', _valid: true },\n  { type: 'vec4<bool>', _valid: false },\n  { type: 'vec4<u32>', _valid: true },\n  { type: 'vec4<i32>', _valid: true },\n  { type: 'vec4<f32>', _valid: true },\n  { type: 'mat2x2<f32>', _valid: false },\n  { type: 'mat2x3<f32>', _valid: false },\n  { type: 'mat2x4<f32>', _valid: false },\n  { type: 'mat3x2<f32>', _valid: false },\n  { type: 'mat3x3<f32>', _valid: false },\n  { type: 'mat3x4<f32>', _valid: false },\n  { type: 'mat4x2<f32>', _valid: false },\n  { type: 'mat4x3<f32>', _valid: false },\n  { type: 'mat4x4<f32>', _valid: false },\n  { type: 'atomic<u32>', _valid: false },\n  { type: 'atomic<i32>', _valid: false },\n  { type: 'array<bool,4>', _valid: false },\n  { type: 'array<u32,4>', _valid: false },\n  { type: 'array<i32,4>', _valid: false },\n  { type: 'array<f32,4>', _valid: false },\n  { type: 'MyStruct', _valid: false },\n] as const;\n\n/**\n * Generate an entry point that uses a user-defined IO variable.\n *\n * @param attribute The attribute to use for the user-defined IO.\n * @param type The type to use for the user-defined IO.\n * @param stage The shader stage.\n * @param io An \"in|out\" string specifying whether the user-defined IO is an input or an output.\n * @param use_struct True to wrap the user-defined IO in a struct.\n * @returns The generated shader code.\n */\nfunction generateShader({\n  attribute,\n  type,\n  stage,\n  io,\n  use_struct,\n}: {\n  attribute: string;\n  type: string;\n  stage: string;\n  io: string;\n  use_struct: boolean;\n}) {\n  let code = '';\n\n  if (use_struct) {\n    // Generate a struct that wraps the location attribute variable.\n    code += 'struct S {\\n';\n    code += `  ${attribute} value : ${type};\\n`;\n    if (stage === 'vertex' && io === 'out') {\n      // Add position builtin for vertex outputs.\n      code += `  [[builtin(position)]] position : vec4<f32>;\\n`;\n    }\n    code += '};\\n\\n';\n  }\n\n  if (stage !== '') {\n    // Generate the entry point attributes.\n    code += `[[stage(${stage})]]`;\n    if (stage === 'compute') {\n      code += ' [[workgroup_size(1)]]';\n    }\n  }\n\n  // Generate the entry point parameter and return type.\n  let param = '';\n  let retType = '';\n  let retVal = '';\n  if (io === 'in') {\n    if (use_struct) {\n      param = `in : S`;\n    } else {\n      param = `${attribute} value : ${type}`;\n    }\n\n    // Vertex shaders must always return `builtin(position)`.\n    if (stage === 'vertex') {\n      retType = `-> [[builtin(position)]] vec4<f32>`;\n      retVal = `return vec4<f32>();`;\n    }\n  } else if (io === 'out') {\n    if (use_struct) {\n      retType = '-> S';\n      retVal = `return S();`;\n    } else {\n      retType = `-> ${attribute} ${type}`;\n      retVal = `return ${type}();`;\n    }\n  }\n\n  code += `\n    fn main(${param}) ${retType} {\n      ${retVal}\n    }\n  `;\n\n  return code;\n}\n\ng.test('stage_inout')\n  .desc(`Test validation of user-defined IO stage and in/out usage`)\n  .params(u =>\n    u\n      .combine('use_struct', [true, false] as const)\n      .combine('target_stage', ['vertex', 'fragment', 'compute'] as const)\n      .combine('target_io', ['in', 'out'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const code = generateShader({\n      attribute: '[[location(0)]]',\n      type: 'f32',\n      stage: t.params.target_stage,\n      io: t.params.target_io,\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to fail for compute shaders or when used as a non-struct vertex output (since the\n    // position built-in must also be specified).\n    const expectation =\n      t.params.target_stage === 'fragment' ||\n      (t.params.target_stage === 'vertex' && (t.params.target_io === 'in' || t.params.use_struct));\n    t.expectCompileResult(expectation, code);\n  });\n\ng.test('type')\n  .desc(`Test validation of user-defined IO types`)\n  .params(u =>\n    u\n      .combine('use_struct', [true, false] as const)\n      .combineWithParams(kTestTypes)\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n\n    if (t.params.type === 'MyStruct') {\n      // Generate a struct that contains a valid type.\n      code += 'struct MyStruct {\\n';\n      code += `  value : f32;\\n`;\n      code += '};\\n\\n';\n    }\n\n    code += generateShader({\n      attribute: '[[location(0)]]',\n      type: t.params.type,\n      stage: 'fragment',\n      io: 'in',\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to pass iff a valid type is used.\n    t.expectCompileResult(t.params._valid, code);\n  });\n\ng.test('nesting')\n  .desc(`Test validation of nested user-defined IO`)\n  .params(u =>\n    u\n      .combine('target_stage', ['vertex', 'fragment', ''] as const)\n      .combine('target_io', ['in', 'out'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n\n    // Generate a struct that contains a valid type.\n    code += 'struct Inner {\\n';\n    code += `  [[location(0)]] value : f32;\\n`;\n    code += '};\\n\\n';\n    code += 'struct Outer {\\n';\n    code += `  inner : Inner;\\n`;\n    code += '};\\n\\n';\n\n    code += generateShader({\n      attribute: '',\n      type: 'Outer',\n      stage: t.params.target_stage,\n      io: t.params.target_io,\n      use_struct: false,\n    });\n\n    // Expect to fail pass only if the struct is not used for entry point IO.\n    t.expectCompileResult(t.params.target_stage === '', code);\n  });\n\ng.test('duplicates')\n  .desc(`Test validation of duplicate user-defined IO attributes`)\n  .unimplemented();\n"],"file":"locations.spec.js"}