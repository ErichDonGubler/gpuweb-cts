{"version":3,"sources":["../../../../../src/webgpu/shader/validation/shader_io/locations.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","generateShader","g","kTestTypes","type","_valid","test","desc","params","u","combine","beginSubcases","fn","t","code","attribute","stage","target_stage","io","target_io","use_struct","expectation","expectCompileResult","combineWithParams","unimplemented"],"mappings":"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","sourcesContent":["export const description = `Validation tests for entry point user-defined IO`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { generateShader } from './util.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// List of types to test against.\nconst kTestTypes = [\n  { type: 'bool', _valid: false },\n  { type: 'u32', _valid: true },\n  { type: 'i32', _valid: true },\n  { type: 'f32', _valid: true },\n  { type: 'vec2<bool>', _valid: false },\n  { type: 'vec2<u32>', _valid: true },\n  { type: 'vec2<i32>', _valid: true },\n  { type: 'vec2<f32>', _valid: true },\n  { type: 'vec3<bool>', _valid: false },\n  { type: 'vec3<u32>', _valid: true },\n  { type: 'vec3<i32>', _valid: true },\n  { type: 'vec3<f32>', _valid: true },\n  { type: 'vec4<bool>', _valid: false },\n  { type: 'vec4<u32>', _valid: true },\n  { type: 'vec4<i32>', _valid: true },\n  { type: 'vec4<f32>', _valid: true },\n  { type: 'mat2x2<f32>', _valid: false },\n  { type: 'mat2x3<f32>', _valid: false },\n  { type: 'mat2x4<f32>', _valid: false },\n  { type: 'mat3x2<f32>', _valid: false },\n  { type: 'mat3x3<f32>', _valid: false },\n  { type: 'mat3x4<f32>', _valid: false },\n  { type: 'mat4x2<f32>', _valid: false },\n  { type: 'mat4x3<f32>', _valid: false },\n  { type: 'mat4x4<f32>', _valid: false },\n  { type: 'atomic<u32>', _valid: false },\n  { type: 'atomic<i32>', _valid: false },\n  { type: 'array<bool,4>', _valid: false },\n  { type: 'array<u32,4>', _valid: false },\n  { type: 'array<i32,4>', _valid: false },\n  { type: 'array<f32,4>', _valid: false },\n  { type: 'MyStruct', _valid: false },\n] as const;\n\ng.test('stage_inout')\n  .desc(`Test validation of user-defined IO stage and in/out usage`)\n  .params(u =>\n    u\n      .combine('use_struct', [true, false] as const)\n      .combine('target_stage', ['vertex', 'fragment', 'compute'] as const)\n      .combine('target_io', ['in', 'out'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const code = generateShader({\n      attribute: '[[location(0)]]',\n      type: 'f32',\n      stage: t.params.target_stage,\n      io: t.params.target_io,\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to fail for compute shaders or when used as a non-struct vertex output (since the\n    // position built-in must also be specified).\n    const expectation =\n      t.params.target_stage === 'fragment' ||\n      (t.params.target_stage === 'vertex' && (t.params.target_io === 'in' || t.params.use_struct));\n    t.expectCompileResult(expectation, code);\n  });\n\ng.test('type')\n  .desc(`Test validation of user-defined IO types`)\n  .params(u =>\n    u\n      .combine('use_struct', [true, false] as const)\n      .combineWithParams(kTestTypes)\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n\n    if (t.params.type === 'MyStruct') {\n      // Generate a struct that contains a valid type.\n      code += 'struct MyStruct {\\n';\n      code += `  value : f32;\\n`;\n      code += '};\\n\\n';\n    }\n\n    code += generateShader({\n      attribute: '[[location(0)]]',\n      type: t.params.type,\n      stage: 'fragment',\n      io: 'in',\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to pass iff a valid type is used.\n    t.expectCompileResult(t.params._valid, code);\n  });\n\ng.test('nesting')\n  .desc(`Test validation of nested user-defined IO`)\n  .params(u =>\n    u\n      .combine('target_stage', ['vertex', 'fragment', ''] as const)\n      .combine('target_io', ['in', 'out'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n\n    // Generate a struct that contains a valid type.\n    code += 'struct Inner {\\n';\n    code += `  [[location(0)]] value : f32;\\n`;\n    code += '};\\n\\n';\n    code += 'struct Outer {\\n';\n    code += `  inner : Inner;\\n`;\n    code += '};\\n\\n';\n\n    code += generateShader({\n      attribute: '',\n      type: 'Outer',\n      stage: t.params.target_stage,\n      io: t.params.target_io,\n      use_struct: false,\n    });\n\n    // Expect to fail pass only if the struct is not used for entry point IO.\n    t.expectCompileResult(t.params.target_stage === '', code);\n  });\n\ng.test('duplicates')\n  .desc(`Test validation of duplicate user-defined IO attributes`)\n  .unimplemented();\n"],"file":"locations.spec.js"}