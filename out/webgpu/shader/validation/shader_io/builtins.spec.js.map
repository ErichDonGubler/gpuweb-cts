{"version":3,"sources":["../../../../../src/webgpu/shader/validation/shader_io/builtins.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","generateShader","g","kBuiltins","name","stage","io","type","kTestTypes","test","desc","params","u","combineWithParams","combine","beginSubcases","fn","t","code","attribute","target_stage","target_io","use_struct","expectation","some","x","expectCompileResult","target_type"],"mappings":"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","sourcesContent":["export const description = `Validation tests for entry point built-in variables`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { generateShader } from './util.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// List of all built-in variables and their stage, in|out usage, and type.\n// Taken from table in Section 15:\n// https://www.w3.org/TR/2021/WD-WGSL-20211013/#builtin-variables\nconst kBuiltins = [\n  { name: 'vertex_index', stage: 'vertex', io: 'in', type: 'u32' },\n  { name: 'instance_index', stage: 'vertex', io: 'in', type: 'u32' },\n  { name: 'position', stage: 'vertex', io: 'out', type: 'vec4<f32>' },\n  { name: 'position', stage: 'fragment', io: 'in', type: 'vec4<f32>' },\n  { name: 'front_facing', stage: 'fragment', io: 'in', type: 'bool' },\n  { name: 'local_invocation_id', stage: 'compute', io: 'in', type: 'vec3<u32>' },\n  { name: 'local_invocation_index', stage: 'compute', io: 'in', type: 'u32' },\n  { name: 'global_invocation_id', stage: 'compute', io: 'in', type: 'vec3<u32>' },\n  { name: 'workgroup_id', stage: 'compute', io: 'in', type: 'vec3<u32>' },\n  { name: 'num_workgroups', stage: 'compute', io: 'in', type: 'vec3<u32>' },\n  { name: 'sample_index', stage: 'fragment', io: 'in', type: 'u32' },\n  { name: 'sample_mask', stage: 'fragment', io: 'in', type: 'u32' },\n  { name: 'sample_mask', stage: 'fragment', io: 'out', type: 'u32' },\n] as const;\n\n// List of types to test against.\nconst kTestTypes = [\n  'bool',\n  'u32',\n  'i32',\n  'f32',\n  'vec2<bool>',\n  'vec2<u32>',\n  'vec2<i32>',\n  'vec2<f32>',\n  'vec3<bool>',\n  'vec3<u32>',\n  'vec3<i32>',\n  'vec3<f32>',\n  'vec4<bool>',\n  'vec4<u32>',\n  'vec4<i32>',\n  'vec4<f32>',\n  'mat2x2<f32>',\n  'mat2x3<f32>',\n  'mat2x4<f32>',\n  'mat3x2<f32>',\n  'mat3x3<f32>',\n  'mat3x4<f32>',\n  'mat4x2<f32>',\n  'mat4x3<f32>',\n  'mat4x4<f32>',\n  'atomic<u32>',\n  'atomic<i32>',\n  'array<bool,4>',\n  'array<u32,4>',\n  'array<i32,4>',\n  'array<f32,4>',\n  'MyStruct',\n] as const;\n\ng.test('stage_inout')\n  .desc(\n    `Test that each [[builtin]] attribute is validated against the required stage and in/out usage for that built-in variable.`\n  )\n  .params(u =>\n    u\n      .combineWithParams(kBuiltins)\n      .combine('use_struct', [true, false] as const)\n      .combine('target_stage', ['vertex', 'fragment', 'compute'] as const)\n      .combine('target_io', ['in', 'out'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const code = generateShader({\n      attribute: `[[builtin(${t.params.name})]]`,\n      type: t.params.type,\n      stage: t.params.target_stage,\n      io: t.params.target_io,\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to pass iff the built-in table contains an entry that matches.\n    const expectation = kBuiltins.some(\n      x =>\n        x.name === t.params.name &&\n        x.stage === t.params.target_stage &&\n        x.io === t.params.target_io &&\n        x.type === t.params.type\n    );\n    t.expectCompileResult(expectation, code);\n  });\n\ng.test('type')\n  .desc(\n    `Test that each [[builtin]] attribute is validated against the required type of that built-in variable.`\n  )\n  .params(u =>\n    u\n      .combineWithParams(kBuiltins)\n      .combine('use_struct', [true, false] as const)\n      .combine('target_type', kTestTypes)\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n\n    if (t.params.target_type === 'MyStruct') {\n      // Generate a struct that contains the correct built-in type.\n      code += 'struct MyStruct {\\n';\n      code += `  value : ${t.params.type};\\n`;\n      code += '};\\n\\n';\n    }\n\n    code += generateShader({\n      attribute: `[[builtin(${t.params.name})]]`,\n      type: t.params.target_type,\n      stage: t.params.stage,\n      io: t.params.io,\n      use_struct: t.params.use_struct,\n    });\n\n    // Expect to pass iff the built-in table contains an entry that matches.\n    const expectation = kBuiltins.some(\n      x =>\n        x.name === t.params.name &&\n        x.stage === t.params.stage &&\n        x.io === t.params.io &&\n        x.type === t.params.target_type\n    );\n    t.expectCompileResult(expectation, code);\n  });\n"],"file":"builtins.spec.js"}