{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/isinf.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeBool","TypeF32","f32","f32Bits","False","True","subnormalF32Examples","normalF32Examples","run","kBit","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cases","input","expected","Infinity","infinity","positive","negative","NaN","nan","s","q","concat","map","n"],"mappings":"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","sourcesContent":["export const description = `WGSL execution test. Section: Value-testing built-in functions Function: isInf`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TypeBool, TypeF32, f32, f32Bits, False, True } from '../../../util/conversion.js';\nimport { subnormalF32Examples, normalF32Examples } from '../../values.js';\n\nimport { run, kBit } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('value_testing_builtin_functions,isInf')\n  .uniqueId('3591ae3f3daa3871')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#value-testing-builtin-functions')\n  .desc(\n    `\nisInf:\nisInf(e: I ) -> T Test for infinity according to IEEE-754. Component-wise when I is a vector. (OpIsInf)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = [\n      // Non-infinity\n      { input: f32(0.0), expected: False },\n      { input: f32(10.0), expected: False },\n      { input: f32(-10.0), expected: False },\n      // Infinities\n      { input: f32(Infinity), expected: True },\n      { input: f32(-Infinity), expected: True },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: True },\n      { input: f32Bits(kBit.f32.infinity.negative), expected: True },\n      // NaNs\n      { input: f32(NaN), expected: False },\n      { input: f32(-NaN), expected: False },\n      { input: f32Bits(kBit.f32.nan.positive.s), expected: False },\n      { input: f32Bits(kBit.f32.nan.positive.q), expected: False },\n      { input: f32Bits(kBit.f32.nan.negative.s), expected: False },\n      { input: f32Bits(kBit.f32.nan.negative.q), expected: False },\n    ]\n      // Normal values are not infinite.\n      .concat(\n        normalF32Examples().map(n => {\n          return { input: f32(n), expected: False };\n        })\n      )\n      // Subnormal values are not infinite.\n      .concat(\n        subnormalF32Examples().map(n => {\n          return { input: f32(n), expected: False };\n        })\n      );\n\n    run(t, 'isInf', [TypeF32], TypeBool, t.params, cases);\n  });\n"],"file":"isinf.spec.js"}