{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/atan.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","TypeF32","kBit","run","ulpThreshold","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","x","Math","atan","manual","input","infinity","negative","expected","PI","sqrt","positive","automatic","Array","f32Min","min","value","f32Max","max","increment","length","i","cfg","cmpFloats","concat"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'atan' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, f32Bits, TypeF32 } from '../../../util/conversion.js';\n\nimport { Case, Config, kBit, run, ulpThreshold } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,atan')\n  .uniqueId('b13828d6243d13dd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\natan:\nT is f32 or vecN<f32> atan(e: T ) -> T Returns the arc tangent of e. Component-wise when T is a vector. (GLSLstd450Atan)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // TODO(https://github.com/gpuweb/cts/issues/792): Decide what the ground-truth is for these tests.\n    const truthFunc = (x: number): number => {\n      return Math.atan(x);\n    };\n\n    // Well defined/border cases\n    const manual: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.negative), expected: f32(-Math.PI / 2) },\n      { input: f32(-Math.sqrt(3)), expected: f32(-Math.PI / 3) },\n      { input: f32(-1), expected: f32(-Math.PI / 4) },\n      { input: f32(-Math.sqrt(3) / 3), expected: f32(-Math.PI / 6) },\n      { input: f32(0), expected: f32(0) },\n      { input: f32(Math.sqrt(3) / 3), expected: f32(Math.PI / 6) },\n      { input: f32(1), expected: f32(Math.PI / 4) },\n      { input: f32(Math.sqrt(3)), expected: f32(Math.PI / 3) },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(Math.PI / 2) },\n    ];\n\n    // Spread of cases over wide domain\n    const automatic = new Array<Case>(1000);\n    const f32Min = f32Bits(kBit.f32.positive.min).value as number;\n    const f32Max = f32Bits(kBit.f32.positive.max).value as number;\n    const increment = (f32Max - f32Min) / automatic.length;\n    for (let i = 0; i < automatic.length; i++) {\n      const x = f32Min + increment * i;\n      automatic[i] = { input: f32(x), expected: f32(truthFunc(x)) };\n    }\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(4096);\n    run(t, 'atan', [TypeF32], TypeF32, cfg, manual.concat(automatic));\n  });\n"],"file":"atan.spec.js"}