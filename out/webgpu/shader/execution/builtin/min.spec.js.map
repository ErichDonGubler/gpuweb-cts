{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/min.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","isSubnormalScalar","anyOf","correctlyRoundedThreshold","kBit","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","input","expected","test_values","infinity","negative","min","max","subnormal","positive","cases","Array","forEach","e","ei","f","fi","precise_expected","push"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'min' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  f32,\n  f32Bits,\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n} from '../../../util/conversion.js';\nimport { isSubnormalScalar } from '../../../util/math.js';\n\nimport { anyOf, Case, Config, correctlyRoundedThreshold, kBit, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('integer_builtin_functions,unsigned_min')\n  .uniqueId('29aba7ede5b93cdd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nunsigned min:\nT is u32 or vecN<u32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd450UMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    run(t, 'min', [TypeU32, TypeU32], TypeU32, cfg, [\n      { input: [u32(1), u32(1)], expected: u32(1) },\n      { input: [u32(0), u32(0)], expected: u32(0) },\n      { input: [u32(0xffffffff), u32(0xffffffff)], expected: u32(0xffffffff) },\n      { input: [u32(1), u32(2)], expected: u32(1) },\n      { input: [u32(2), u32(1)], expected: u32(1) },\n      { input: [u32(0x70000000), u32(0x80000000)], expected: u32(0x70000000) },\n      { input: [u32(0x80000000), u32(0x70000000)], expected: u32(0x70000000) },\n      { input: [u32(0), u32(0xffffffff)], expected: u32(0) },\n      { input: [u32(0xffffffff), u32(0)], expected: u32(0) },\n      { input: [u32(0), u32(0xffffffff)], expected: u32(0) },\n    ]);\n  });\n\ng.test('integer_builtin_functions,signed_min')\n  .uniqueId('60c8ecdf409b45fc')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nsigned min:\nT is i32 or vecN<i32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd45SUMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    run(t, 'min', [TypeI32, TypeI32], TypeI32, cfg, [\n      { input: [i32(1), i32(1)], expected: i32(1) },\n      { input: [i32(0), i32(0)], expected: i32(0) },\n      { input: [i32(-1), i32(-1)], expected: i32(-1) },\n      { input: [i32(1), i32(2)], expected: i32(1) },\n      { input: [i32(2), i32(1)], expected: i32(1) },\n      { input: [i32(-1), i32(-2)], expected: i32(-2) },\n      { input: [i32(-2), i32(-1)], expected: i32(-2) },\n      { input: [i32(1), i32(-1)], expected: i32(-1) },\n      { input: [i32(-1), i32(1)], expected: i32(-1) },\n      { input: [i32Bits(0x70000000), i32Bits(0x80000000)], expected: i32Bits(0x80000000) },\n      { input: [i32Bits(0x80000000), i32Bits(0x70000000)], expected: i32Bits(0x80000000) },\n      { input: [i32Bits(0xffffffff), i32(0)], expected: i32Bits(0xffffffff) },\n      { input: [i32(0), i32Bits(0xffffffff)], expected: i32Bits(0xffffffff) },\n    ]);\n  });\n\ng.test('float_builtin_functions,min')\n  .uniqueId('53efc46faad0f380')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nmin:\nT is f32 or vecN<f32> min(e1: T ,e2: T ) -> T Returns e2 if e2 is less than e1, and e1 otherwise. If one operand is a NaN, the other is returned. If both operands are NaNs, a NaN is returned. Component-wise when T is a vector. (GLSLstd450NMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      f32Bits(kBit.f32.infinity.negative),\n      f32Bits(kBit.f32.negative.min),\n      f32(-10.0),\n      f32(-1.0),\n      f32Bits(kBit.f32.negative.max),\n      f32Bits(kBit.f32.subnormal.negative.min),\n      f32Bits(kBit.f32.subnormal.negative.max),\n      f32(0.0),\n      f32Bits(kBit.f32.subnormal.positive.min),\n      f32Bits(kBit.f32.subnormal.positive.max),\n      f32Bits(kBit.f32.positive.min),\n      f32(1.0),\n      f32(10.0),\n      f32Bits(kBit.f32.positive.max),\n      f32Bits(kBit.f32.infinity.positive),\n    ];\n\n    const cases = new Array<Case>();\n    test_values.forEach((e, ei) => {\n      test_values.forEach((f, fi) => {\n        const precise_expected = ei <= fi ? e : f;\n        const expected = isSubnormalScalar(precise_expected)\n          ? anyOf(precise_expected, f32(0.0))\n          : precise_expected;\n        cases.push({ input: [e, f], expected });\n      });\n    });\n\n    run(t, 'min', [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"min.spec.js"}