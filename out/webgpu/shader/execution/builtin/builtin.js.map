{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/builtin.ts"],"names":["makeTestGroup","GPUTest","float32ToInt32","float32ToUint32","uint32ToFloat32","uint32ToInt32","g","OperandType","createInputBuffer","numberType","cases","length","inputData","Float","Float32Array","Hex","Uint","Uint32Array","Int","Int32Array","i","j","input","submitComputeShader","source","t","inputBuffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","outputBuffer","module","device","createShaderModule","code","pipeline","createComputePipeline","compute","entryPoint","group","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","createBuiltinCall","baseType","arrayLength","builtin","outputDataAsF32","inputDataAsF32","inputDataAsU32","inputDataAsI32","outputDataAsU32","outputDataAsI32","errs","output","expected","matched","idx","caseExpected","e","expectedDataAsU32","expectedDataAsF32","expectedDataAsI32","push","toString","join","runShaderTest","storageClass","storageMode","type","checkExpectation","Error","undefined","expectGPUBufferValuesPassCheck","typedLength"],"mappings":"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","sourcesContent":["import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  float32ToInt32,\n  float32ToUint32,\n  uint32ToFloat32,\n  uint32ToInt32,\n} from '../../../util/conversion.js';\nimport { ScalarType } from '../../types.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport enum OperandType {\n  Float,\n  Int,\n  Uint,\n  Hex,\n}\n\nexport type Case = {\n  input: number;\n  expected: Array<number>;\n};\ntype Cases = Array<Case>;\n\nexport function createInputBuffer(\n  numberType: OperandType,\n  cases: Cases,\n  length: number\n): TypedArrayBufferView {\n  let inputData: TypedArrayBufferView;\n  switch (numberType) {\n    case OperandType.Float: {\n      inputData = new Float32Array(4 * cases.length);\n      break;\n    }\n    case OperandType.Hex:\n    case OperandType.Uint: {\n      inputData = new Uint32Array(4 * cases.length);\n      break;\n    }\n    case OperandType.Int: {\n      inputData = new Int32Array(4 * cases.length);\n      break;\n    }\n  }\n  for (let i = 0; i < cases.length; i++) {\n    for (let j = 0; j < length; j++) {\n      inputData[i * 4 + j] = cases[i].input;\n    }\n  }\n  return inputData;\n}\n\nexport function submitComputeShader(\n  source: string,\n  t: GPUTest,\n  inputData: TypedArrayBufferView\n): GPUBuffer {\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const outputBuffer = t.makeBufferWithContents(\n    new Float32Array(inputData.length),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const module = t.device.createShaderModule({ code: source });\n  const pipeline = t.device.createComputePipeline({\n    compute: { module, entryPoint: 'main' },\n  });\n\n  const group = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: { buffer: inputBuffer } },\n      { binding: 1, resource: { buffer: outputBuffer } },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatch(1);\n  pass.endPass();\n\n  t.queue.submit([encoder.finish()]);\n  return outputBuffer;\n}\n\nexport function createBuiltinCall(\n  baseType: ScalarType,\n  arrayLength: number,\n  builtin: string,\n  outputDataAsF32: Float32Array,\n  inputData: TypedArrayBufferView,\n  cases: Cases,\n  numberType: OperandType\n): string[] {\n  let inputDataAsF32: Float32Array;\n  let inputDataAsU32: Uint32Array;\n  let inputDataAsI32: Int32Array;\n  if (numberType === OperandType.Float) {\n    inputDataAsF32 = inputData as Float32Array;\n    inputDataAsU32 = new Uint32Array(inputData.buffer);\n    inputDataAsI32 = new Int32Array(inputData.buffer);\n  } else {\n    inputDataAsF32 = new Float32Array(inputData.buffer);\n    inputDataAsU32 = inputData as Uint32Array;\n    inputDataAsI32 = new Int32Array(inputData.buffer);\n  }\n\n  const outputDataAsU32 = new Uint32Array(outputDataAsF32.buffer);\n  const outputDataAsI32 = new Int32Array(outputDataAsF32.buffer);\n\n  const errs: string[] = [];\n  for (let i = 0; i < cases.length; i++) {\n    const input: string[] = [];\n    const output: string[] = [];\n    const expected: string[] = [];\n    let matched = true;\n    for (let j = 0; j < arrayLength; j++) {\n      const idx = i * 4 + j;\n      const caseExpected: string[] = [];\n      for (const e of cases[i].expected) {\n        const expectedDataAsU32 = numberType === OperandType.Float ? float32ToUint32(e) : e;\n        const expectedDataAsF32 = numberType === OperandType.Float ? e : uint32ToFloat32(e);\n        const expectedDataAsI32 =\n          numberType === OperandType.Float ? float32ToInt32(e) : uint32ToInt32(e);\n\n        switch (baseType) {\n          case 'u32': {\n            caseExpected.push(expectedDataAsU32 + ' (0x' + expectedDataAsU32.toString(16) + ')');\n            if (outputDataAsU32[idx] !== expectedDataAsU32) {\n              matched = false;\n            }\n            break;\n          }\n          case 'i32': {\n            caseExpected.push(expectedDataAsI32 + ' (0x' + expectedDataAsU32.toString(16) + ')');\n            if (outputDataAsI32[idx] !== expectedDataAsI32) {\n              matched = false;\n            }\n            break;\n          }\n          case 'f32': {\n            caseExpected.push(expectedDataAsF32 + ' (0x' + expectedDataAsU32.toString(16) + ')');\n            if (outputDataAsF32[idx] !== expectedDataAsF32) {\n              matched = false;\n            }\n            break;\n          }\n        }\n      }\n\n      switch (baseType) {\n        case 'u32': {\n          input.push(inputDataAsU32[idx] + ' (0x' + inputDataAsU32[idx].toString(16) + ')');\n          output.push(outputDataAsU32[idx] + ' (0x' + outputDataAsU32[idx].toString(16) + ')');\n          expected.push(caseExpected.join(' or '));\n          break;\n        }\n        case 'i32': {\n          input.push(inputDataAsI32[idx] + ' (0x' + inputDataAsU32[idx].toString(16) + ')');\n          output.push(outputDataAsI32[idx] + ' (0x' + outputDataAsU32[idx].toString(16) + ')');\n          expected.push(caseExpected.join(' or '));\n          break;\n        }\n        case 'f32': {\n          input.push(inputDataAsF32[idx] + ' (0x' + inputDataAsU32[idx].toString(16) + ')');\n          output.push(outputDataAsF32[idx] + ' (0x' + outputDataAsU32[idx].toString(16) + ')');\n          expected.push(caseExpected.join(' or '));\n          break;\n        }\n      }\n    }\n\n    if (matched) {\n      continue;\n    }\n\n    if (arrayLength > 1) {\n      errs.push(\n        `${builtin}(${baseType}(${input.join(', ')}))\\n` +\n          `    returned: ${baseType}(${output.join(', ')})\\n` +\n          `    expected: ${baseType}(${expected.join(', ')})`\n      );\n    } else {\n      errs.push(\n        `${builtin}(${input.join(', ')})\\n` +\n          `    returned: ${output.join(', ')}\\n` +\n          `    expected: ${expected.join(', ')}`\n      );\n    }\n  }\n\n  return errs;\n}\n\nexport function runShaderTest(\n  t: GPUTest,\n  storageClass: string,\n  storageMode: string,\n  baseType: ScalarType,\n  type: string,\n  arrayLength: number,\n  builtin: string,\n  numberType: OperandType,\n  cases: Cases\n): void {\n  const source = `\n  [[block]]\n  struct Data {\n    values : [[stride(16)]] array<${type}, ${cases.length}>;\n  };\n\n  [[group(0), binding(0)]] var<${storageClass}, ${storageMode}> inputs : Data;\n  [[group(0), binding(1)]] var<${storageClass}, write> outputs : Data;\n\n  [[stage(compute), workgroup_size(1)]]\n  fn main() {\n    for(var i = 0; i < ${cases.length}; i = i + 1) {\n        let input : ${type} = inputs.values[i];\n        let result : ${type} = ${builtin}(input);\n        outputs.values[i] = result;\n    }\n  }\n`;\n\n  const inputData = createInputBuffer(numberType, cases, arrayLength);\n  const outputBuffer = submitComputeShader(source, t, inputData);\n\n  const checkExpectation = (outputDataAsF32: Float32Array) => {\n    const errs = createBuiltinCall(\n      baseType,\n      arrayLength,\n      builtin,\n      outputDataAsF32,\n      inputData,\n      cases,\n      numberType\n    );\n    if (errs.length > 0) {\n      return new Error(errs.join('\\n\\n'));\n    }\n    return undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n    type: Float32Array,\n    typedLength: inputData.length,\n  });\n}\n"],"file":"builtin.js"}