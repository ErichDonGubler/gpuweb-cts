{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/builtin.ts"],"names":["Colors","ScalarType","Scalar","Vector","TypeVec","TypeU32","VectorType","diff","got","expected","gTy","type","eTy","matched","red","toString","g","e","value","green","gLen","elements","length","eLen","gElements","Array","eElements","i","Math","max","d","join","Error","anyOf","values","failed","push","toComparator","input","undefined","storageType","ty","kind","width","elementType","fromStorage","expr","toStorage","run","t","builtin","parameterTypes","returnType","cfg","storageClass","cases","vectorize","packScalarsToVector","kValueStride","paramExpr","map","source","inputData","Uint8Array","caseStride","caseIdx","caseBase","paramIdx","offset","params","copyTo","inputBuffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","UNIFORM","STORAGE","outputBufferSize","outputBuffer","device","createBuffer","size","usage","COPY_DST","module","createShaderModule","code","pipeline","createComputePipeline","compute","entryPoint","group","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","checkExpectation","outputData","outputs","read","errs","c","cmp","expectGPUBufferValuesPassCheck","typedLength","vectorWidth","asScalar","val","clampCaseIdx","idx","min","packed","inputElements","comparators","vec","kBit","i32","positive","negative","u32","f32","zero","subnormal","nan","s","q","infinity","powTwo","toMinus1","toMinus2","toMinus3","toMinus4","toMinus5","toMinus6","toMinus7","toMinus8","toMinus9","toMinus10","toMinus11","toMinus12","toMinus13","toMinus14","toMinus15","toMinus16","toMinus17","toMinus18","toMinus19","toMinus20","toMinus21","toMinus22","toMinus23","toMinus24","toMinus25","toMinus26","toMinus27","toMinus28","toMinus29","toMinus30","toMinus31","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","kValue","pow","to32","toMinus32"],"mappings":"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","sourcesContent":["import { Colors } from '../../../../common/util/colors.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  ScalarType,\n  Scalar,\n  Vector,\n  Value,\n  Type,\n  TypeVec,\n  TypeU32,\n  VectorType,\n} from '../../../util/conversion.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  (got: Value): Comparison;\n}\n\n// diff compares 'got' to 'expected, returning the Comparison information.\nfunction diff(got: Value, expected: Value): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    if (gTy !== eTy) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    if (g.value === e.value) {\n      return {\n        matched: true,\n        got: g.toString(),\n        expected: Colors.green(e.toString()),\n      };\n    }\n    return {\n      matched: false,\n      got: g.toString(),\n      expected: Colors.red(e.toString()),\n    };\n  }\n  if (got instanceof Vector) {\n    const gLen = got.elements.length;\n    const eLen = (expected as Vector).elements.length;\n    let matched = gLen === eLen;\n    const gElements = new Array<string>(gLen);\n    const eElements = new Array<string>(eLen);\n    for (let i = 0; i < Math.max(gLen, eLen); i++) {\n      if (i < gLen && i < eLen) {\n        const g = got.elements[i];\n        const e = (expected as Vector).elements[i];\n        const d = diff(g, e);\n        matched = matched && d.matched;\n        gElements[i] = d.got;\n        eElements[i] = d.expected;\n        continue;\n      }\n      matched = false;\n      if (i < gLen) {\n        gElements[i] = got.elements[i].toString();\n      }\n      if (i < eLen) {\n        eElements[i] = (expected as Vector).elements[i].toString();\n      }\n    }\n    return {\n      matched,\n      got: `${got.type}(${gElements.join(', ')})`,\n      expected: `${expected.type}(${eElements.join(', ')})`,\n    };\n  }\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided values */\nexport function anyOf(...values: Value[]): Comparator {\n  return got => {\n    const failed: Array<string> = [];\n    for (const e of values) {\n      const d = diff(got, e);\n      if (d.matched) {\n        return d;\n      }\n      failed.push(d.expected);\n    }\n    return { matched: false, got: got.toString(), expected: failed.join(' or ') };\n  };\n}\n\n// Helper for converting Values to Comparators.\nfunction toComparator(input: Value | Comparator): Comparator {\n  if ((input as Value).type !== undefined) {\n    return got => diff(got, input as Value);\n  }\n  return input as Comparator;\n}\n\n/** Case is a single builtin test case. */\nexport type Case = {\n  // The input value to the builtin\n  input: Value | Array<Value>;\n  // The expected value, or comparator\n  expected: Value | Comparator;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** Configuration for running a builtin test */\nexport type Config = {\n  // Where the input values are read from\n  storageClass: 'uniform' | 'storage_r' | 'storage_rw';\n  // If defined, scalar test cases will be packed into vectors of the given width.\n  // Requires that all input cases are of a single scalar parameter type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(0u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n/**\n * Runs a builtin test\n * @param t the GPUTest\n * @param builtin the builtin being tested\n * @param parameterTypes the list of builtin parameter types\n * @param returnType the return type for the builtin overload\n * @param cfg test configuration values\n * @param cases list of test cases\n */\nexport function run(\n  t: GPUTest,\n  builtin: string,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cfg: Config = { storageClass: 'storage_r' },\n  cases: CaseList\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    cases = packScalarsToVector(cases, cfg.vectorize);\n    // Note: packScalarsToVector() would have thrown if parameters aren't of a single scalar type\n    parameterTypes = [TypeVec(cfg.vectorize, parameterTypes[0] as ScalarType)];\n    returnType = TypeVec(cfg.vectorize, returnType as ScalarType);\n  }\n\n  // Currently all values are packed into buffers of 16 byte strides\n  const kValueStride = 16;\n\n  // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n  const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs.test[i].param${i}`);\n\n  // resolves to the expression that calls the builtin\n  const expr = toStorage(\n    returnType,\n    builtin + '(' + parameterTypes.map(paramExpr).join(', ') + ')'\n  );\n\n  // the full WGSL shader source\n  const source = `\nstruct Parameters {\n${parameterTypes\n  .map((ty, i) => `  [[size(${kValueStride})]] param${i} : ${storageType(ty)};`)\n  .join('\\n')}\n};\n\n[[block]]\nstruct Inputs {\n  test : array<Parameters, ${cases.length}>;\n};\n\n[[block]]\nstruct Outputs {\n  test : [[stride(${kValueStride})]] array<${storageType(returnType)}, ${cases.length}>;\n};\n\n${\n  cfg.storageClass === 'uniform'\n    ? `[[group(0), binding(0)]] var<uniform> inputs : Inputs;`\n    : `[[group(0), binding(0)]] var<storage, ${\n        cfg.storageClass === 'storage_r' ? 'read' : 'read_write'\n      }> inputs : Inputs;`\n}\n[[group(0), binding(1)]] var<storage, write> outputs : Outputs;\n\n[[stage(compute), workgroup_size(1)]]\nfn main() {\n  for(var i = 0; i < ${cases.length}; i = i + 1) {\n    outputs.test[i] = ${expr};\n  }\n}\n`;\n\n  // Holds all the parameter values for all cases\n  const inputData = new Uint8Array(cases.length * parameterTypes.length * kValueStride);\n\n  // Pack all the input parameter values into the inputData buffer\n  {\n    const caseStride = kValueStride * parameterTypes.length;\n    for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n      const caseBase = caseIdx * caseStride;\n      for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n        const offset = caseBase + paramIdx * kValueStride;\n        const params = cases[caseIdx].input;\n        if (params instanceof Array) {\n          params[paramIdx].copyTo(inputData, offset);\n        } else {\n          params.copyTo(inputData, offset);\n        }\n      }\n    }\n  }\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC |\n      (cfg.storageClass === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n  );\n\n  // Construct a buffer to hold the results of the builtin tests\n  const outputBufferSize = cases.length * kValueStride;\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const module = t.device.createShaderModule({ code: source });\n  const pipeline = t.device.createComputePipeline({\n    compute: { module, entryPoint: 'main' },\n  });\n\n  const group = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: { buffer: inputBuffer } },\n      { binding: 1, resource: { buffer: outputBuffer } },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatch(1);\n  pass.endPass();\n\n  t.queue.submit([encoder.finish()]);\n\n  const checkExpectation = (outputData: Uint8Array) => {\n    // Read the outputs from the output buffer\n    const outputs = new Array<Value>(cases.length);\n    for (let i = 0; i < cases.length; i++) {\n      outputs[i] = returnType.read(outputData, i * kValueStride);\n    }\n\n    // The list of expectation failures\n    const errs: string[] = [];\n\n    // For each case...\n    for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n      const c = cases[caseIdx];\n      const got = outputs[caseIdx];\n      const cmp = toComparator(c.expected)(got);\n      if (!cmp.matched) {\n        errs.push(`${builtin}(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n      }\n    }\n\n    return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n    type: Uint8Array,\n    typedLength: outputBufferSize,\n  });\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all input cases are of a single scalar parameter type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(cases: CaseList, vectorWidth: number): CaseList {\n  const asScalar = function (val: Array<Value> | Value): Scalar {\n    if (val instanceof Scalar) {\n      return val;\n    }\n    if (val instanceof Array && val.length === 1) {\n      return asScalar(val[0]);\n    }\n    throw new Error('packScalarsToVector() requires all Case values to be a single scalar Value');\n  };\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n  const packed: Array<Case> = [];\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    const inputElements = new Array<Scalar>(vectorWidth);\n    const comparators = new Array<Comparator>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      const c = cases[clampCaseIdx(caseIdx + i)];\n      inputElements[i] = asScalar(c.input);\n      comparators[i] = toComparator(c.expected);\n    }\n    const vec = new Vector(inputElements);\n    packed.push({\n      input: [vec],\n      expected: (got: Value) => {\n        let matched = true;\n        const gElements = new Array<string>(vectorWidth);\n        const eElements = new Array<string>(vectorWidth);\n        for (let i = 0; i < vectorWidth; i++) {\n          const d = comparators[i]((got as Vector).elements[i]);\n          matched = matched && d.matched;\n          gElements[i] = d.got;\n          eElements[i] = d.expected;\n        }\n        return {\n          matched,\n          got: `${vec.type}(${gElements.join(', ')})`,\n          expected: `${vec.type}(${eElements.join(', ')})`,\n        };\n      },\n    });\n    caseIdx += vectorWidth;\n  }\n  return packed;\n}\n\n// TODO(sarahM0): Perhaps instead of kBit and kValue tables we could have one table\n// where every value is a Scalar instead of either bits or value?\n// Then tests wouldn't need most of the Scalar.fromX calls,\n// and you would probably need fewer table entries in total\n// (since each Scalar has both bits and value).\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n    },\n    subnormal: {\n      positive: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n    },\n    nan: {\n      negative: {\n        s: 0xff80_0001,\n        q: 0xffc0_0001,\n      },\n      positive: {\n        s: 0x7f80_0001,\n        q: 0x7fc0_0001,\n      },\n    },\n    infinity: {\n      positive: 0x7f80_0000,\n      negative: 0xff80_0000,\n    },\n  },\n\n  // 32-bit representation of power(2, n) n = {-31, ..., 31}\n  // A uint32 representation as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  powTwo: {\n    toMinus1: 0x3f00_0000,\n    toMinus2: 0x3e80_0000,\n    toMinus3: 0x3e00_0000,\n    toMinus4: 0x3d80_0000,\n    toMinus5: 0x3d00_0000,\n    toMinus6: 0x3c80_0000,\n    toMinus7: 0x3c00_0000,\n    toMinus8: 0x3b80_0000,\n    toMinus9: 0x3b00_0000,\n    toMinus10: 0x3a80_0000,\n    toMinus11: 0x3a00_0000,\n    toMinus12: 0x3980_0000,\n    toMinus13: 0x3900_0000,\n    toMinus14: 0x3880_0000,\n    toMinus15: 0x3800_0000,\n    toMinus16: 0x3780_0000,\n    toMinus17: 0x3700_0000,\n    toMinus18: 0x3680_0000,\n    toMinus19: 0x3600_0000,\n    toMinus20: 0x3580_0000,\n    toMinus21: 0x3500_0000,\n    toMinus22: 0x3480_0000,\n    toMinus23: 0x3400_0000,\n    toMinus24: 0x3380_0000,\n    toMinus25: 0x3300_0000,\n    toMinus26: 0x3280_0000,\n    toMinus27: 0x3200_0000,\n    toMinus28: 0x3180_0000,\n    toMinus29: 0x3100_0000,\n    toMinus30: 0x3080_0000,\n    toMinus31: 0x3000_0000,\n\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // 32-bit representation of  of -1 * power(2, n) n = {-31, ..., 31}\n  // An int32 represented as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  negPowTwo: {\n    toMinus1: 0xbf00_0000,\n    toMinus2: 0xbe80_0000,\n    toMinus3: 0xbe00_0000,\n    toMinus4: 0xbd80_0000,\n    toMinus5: 0xbd00_0000,\n    toMinus6: 0xbc80_0000,\n    toMinus7: 0xbc00_0000,\n    toMinus8: 0xbb80_0000,\n    toMinus9: 0xbb00_0000,\n    toMinus10: 0xba80_0000,\n    toMinus11: 0xba00_0000,\n    toMinus12: 0xb980_0000,\n    toMinus13: 0xb900_0000,\n    toMinus14: 0xb880_0000,\n    toMinus15: 0xb800_0000,\n    toMinus16: 0xb780_0000,\n    toMinus17: 0xb700_0000,\n    toMinus18: 0xb680_0000,\n    toMinus19: 0xb600_0000,\n    toMinus20: 0xb580_0000,\n    toMinus21: 0xb500_0000,\n    toMinus22: 0xb480_0000,\n    toMinus23: 0xb400_0000,\n    toMinus24: 0xb380_0000,\n    toMinus25: 0xb300_0000,\n    toMinus26: 0xb280_0000,\n    toMinus27: 0xb200_0000,\n    toMinus28: 0xb180_0000,\n    toMinus29: 0xb100_0000,\n    toMinus30: 0xb080_0000,\n    toMinus31: 0xb000_0000,\n\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\nexport const kValue = {\n  powTwo: {\n    to0: Math.pow(2, 0),\n    to1: Math.pow(2, 1),\n    to2: Math.pow(2, 2),\n    to3: Math.pow(2, 3),\n    to4: Math.pow(2, 4),\n    to5: Math.pow(2, 5),\n    to6: Math.pow(2, 6),\n    to7: Math.pow(2, 7),\n    to8: Math.pow(2, 8),\n    to9: Math.pow(2, 9),\n    to10: Math.pow(2, 10),\n    to11: Math.pow(2, 11),\n    to12: Math.pow(2, 12),\n    to13: Math.pow(2, 13),\n    to14: Math.pow(2, 14),\n    to15: Math.pow(2, 15),\n    to16: Math.pow(2, 16),\n    to17: Math.pow(2, 17),\n    to18: Math.pow(2, 18),\n    to19: Math.pow(2, 19),\n    to20: Math.pow(2, 20),\n    to21: Math.pow(2, 21),\n    to22: Math.pow(2, 22),\n    to23: Math.pow(2, 23),\n    to24: Math.pow(2, 24),\n    to25: Math.pow(2, 25),\n    to26: Math.pow(2, 26),\n    to27: Math.pow(2, 27),\n    to28: Math.pow(2, 28),\n    to29: Math.pow(2, 29),\n    to30: Math.pow(2, 30),\n    to31: Math.pow(2, 31),\n    to32: Math.pow(2, 32),\n\n    toMinus1: Math.pow(2, -1),\n    toMinus2: Math.pow(2, -2),\n    toMinus3: Math.pow(2, -3),\n    toMinus4: Math.pow(2, -4),\n    toMinus5: Math.pow(2, -5),\n    toMinus6: Math.pow(2, -6),\n    toMinus7: Math.pow(2, -7),\n    toMinus8: Math.pow(2, -8),\n    toMinus9: Math.pow(2, -9),\n    toMinus10: Math.pow(2, -10),\n    toMinus11: Math.pow(2, -11),\n    toMinus12: Math.pow(2, -12),\n    toMinus13: Math.pow(2, -13),\n    toMinus14: Math.pow(2, -14),\n    toMinus15: Math.pow(2, -15),\n    toMinus16: Math.pow(2, -16),\n    toMinus17: Math.pow(2, -17),\n    toMinus18: Math.pow(2, -18),\n    toMinus19: Math.pow(2, -19),\n    toMinus20: Math.pow(2, -20),\n    toMinus21: Math.pow(2, -21),\n    toMinus22: Math.pow(2, -22),\n    toMinus23: Math.pow(2, -23),\n    toMinus24: Math.pow(2, -24),\n    toMinus25: Math.pow(2, -25),\n    toMinus26: Math.pow(2, -26),\n    toMinus27: Math.pow(2, -27),\n    toMinus28: Math.pow(2, -28),\n    toMinus29: Math.pow(2, -29),\n    toMinus30: Math.pow(2, -30),\n    toMinus31: Math.pow(2, -31),\n    toMinus32: Math.pow(2, -32),\n  },\n  negPowTwo: {\n    to0: -Math.pow(2, 0),\n    to1: -Math.pow(2, 1),\n    to2: -Math.pow(2, 2),\n    to3: -Math.pow(2, 3),\n    to4: -Math.pow(2, 4),\n    to5: -Math.pow(2, 5),\n    to6: -Math.pow(2, 6),\n    to7: -Math.pow(2, 7),\n    to8: -Math.pow(2, 8),\n    to9: -Math.pow(2, 9),\n    to10: -Math.pow(2, 10),\n    to11: -Math.pow(2, 11),\n    to12: -Math.pow(2, 12),\n    to13: -Math.pow(2, 13),\n    to14: -Math.pow(2, 14),\n    to15: -Math.pow(2, 15),\n    to16: -Math.pow(2, 16),\n    to17: -Math.pow(2, 17),\n    to18: -Math.pow(2, 18),\n    to19: -Math.pow(2, 19),\n    to20: -Math.pow(2, 20),\n    to21: -Math.pow(2, 21),\n    to22: -Math.pow(2, 22),\n    to23: -Math.pow(2, 23),\n    to24: -Math.pow(2, 24),\n    to25: -Math.pow(2, 25),\n    to26: -Math.pow(2, 26),\n    to27: -Math.pow(2, 27),\n    to28: -Math.pow(2, 28),\n    to29: -Math.pow(2, 29),\n    to30: -Math.pow(2, 30),\n    to31: -Math.pow(2, 31),\n    to32: -Math.pow(2, 32),\n\n    toMinus1: -Math.pow(2, -1),\n    toMinus2: -Math.pow(2, -2),\n    toMinus3: -Math.pow(2, -3),\n    toMinus4: -Math.pow(2, -4),\n    toMinus5: -Math.pow(2, -5),\n    toMinus6: -Math.pow(2, -6),\n    toMinus7: -Math.pow(2, -7),\n    toMinus8: -Math.pow(2, -8),\n    toMinus9: -Math.pow(2, -9),\n    toMinus10: -Math.pow(2, -10),\n    toMinus11: -Math.pow(2, -11),\n    toMinus12: -Math.pow(2, -12),\n    toMinus13: -Math.pow(2, -13),\n    toMinus14: -Math.pow(2, -14),\n    toMinus15: -Math.pow(2, -15),\n    toMinus16: -Math.pow(2, -16),\n    toMinus17: -Math.pow(2, -17),\n    toMinus18: -Math.pow(2, -18),\n    toMinus19: -Math.pow(2, -19),\n    toMinus20: -Math.pow(2, -20),\n    toMinus21: -Math.pow(2, -21),\n    toMinus22: -Math.pow(2, -22),\n    toMinus23: -Math.pow(2, -23),\n    toMinus24: -Math.pow(2, -24),\n    toMinus25: -Math.pow(2, -25),\n    toMinus26: -Math.pow(2, -26),\n    toMinus27: -Math.pow(2, -27),\n    toMinus28: -Math.pow(2, -28),\n    toMinus29: -Math.pow(2, -29),\n    toMinus30: -Math.pow(2, -30),\n    toMinus31: -Math.pow(2, -31),\n    toMinus32: -Math.pow(2, -32),\n  },\n} as const;\n"],"file":"builtin.js"}