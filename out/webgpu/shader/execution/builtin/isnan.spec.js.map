{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/isnan.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeBool","TypeF32","f32","f32Bits","False","True","subnormalF32Examples","normalF32Examples","nanF32BitsExamples","anyOf","kBit","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cases","input","expected","infinity","positive","negative","nan","s","q","concat","map","n"],"mappings":"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","sourcesContent":["export const description = `WGSL execution test. Section: Value-testing built-in functions. Function: isNan`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TypeBool, TypeF32, f32, f32Bits, False, True } from '../../../util/conversion.js';\nimport { subnormalF32Examples, normalF32Examples, nanF32BitsExamples } from '../../values.js';\n\nimport { anyOf, kBit, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('value_testing_builtin_functions,isNan')\n  .uniqueId('fdd1e7105af70b74')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#value-testing-builtin-functions')\n  .desc(\n    `\nisNan:\nI is f32 or vecN<f32> T is bool if I is a scalar, or vecN<bool> if I is a vector isNan(e: I ) -> T Test for NaN according to IEEE-754. Component-wise when I is a vector. (OpIsNan)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  // https://gpuweb.github.io/gpuweb/wgsl/#floating-point-evaluation says:\n  //\n  //    Implementations may assume that NaNs, inifinities are not present\n  //\n  //       Note: This means some functions (e.g. isInf, isNan, min and max) may not return\n  //       the expected result due to optimizations about the presence of NaNs and infinities.\n  //\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = [\n      // Simple non-NaN\n      { input: f32(0.0), expected: False },\n      { input: f32(10.0), expected: False },\n      { input: f32(-10.0), expected: False },\n      // Infinities\n      { input: f32Bits(kBit.f32.infinity.positive), expected: False },\n      { input: f32Bits(kBit.f32.infinity.negative), expected: False },\n      // NaNs\n      { input: f32Bits(kBit.f32.nan.positive.s), expected: anyOf(True, False) },\n      { input: f32Bits(kBit.f32.nan.positive.q), expected: anyOf(True, False) },\n      { input: f32Bits(kBit.f32.nan.negative.s), expected: anyOf(True, False) },\n      { input: f32Bits(kBit.f32.nan.negative.q), expected: anyOf(True, False) },\n    ]\n      // Try exotic NaN patterns.\n      .concat(\n        nanF32BitsExamples().map(n => {\n          return { input: f32Bits(n), expected: anyOf(True, False) };\n        })\n      )\n      // Normals are not Nan\n      .concat(\n        normalF32Examples().map(n => {\n          return { input: f32(n), expected: False };\n        })\n      )\n      // Subnormals are not Nan\n      .concat(\n        subnormalF32Examples().map(n => {\n          return { input: f32(n), expected: False };\n        })\n      );\n\n    run(t, 'isNan', [TypeF32], TypeBool, t.params, cases);\n  });\n"],"file":"isnan.spec.js"}