{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/all.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","NumberRepr","generateTypes","runShaderTestImpl","g","runShaderTest","t","storageClass","storageMode","type","arrayLength","builtin","arrayType","cases","source","length","test","uniqueId","specURL","desc","params","u","combineWithParams","combine","expandWithParams","fn","_kTypeInfo","undefined","Uint32Array","input","fromU32","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'all' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, TypedArrayBufferViewConstructor } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { NumberRepr, NumberType } from '../../../util/conversion.js';\nimport { generateTypes } from '../../types.js';\n\nimport { Case, runShaderTestImpl } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\nexport function runShaderTest<F extends NumberType>(\n  t: GPUTest,\n  storageClass: string,\n  storageMode: string,\n  type: string,\n  arrayLength: number,\n  builtin: string,\n  arrayType: TypedArrayBufferViewConstructor,\n  cases: Array<Case<F>>\n): void {\n  const source = `\n    [[block]]\n    struct Data {\n      values : [[stride(16)]] array<${type}, ${cases.length}>;\n    };\n\n    [[group(0), binding(0)]] var<${storageClass}, ${storageMode}> inputs : Data;\n    [[group(0), binding(1)]] var<${storageClass}, write> outputs : Data;\n\n    let dim_mask = 0x000Fu; // bits 0 through 3\n    let pos0_field = 0x0010u; // bit 4\n    let pos1_field = 0x0020u; // bit 5\n    let pos2_field = 0x0040u; // bit 6\n    let pos3_field = 0x0080u; // bit 7\n\n    fn get_val(input: u32, field: u32) -> bool {\n      return field == (input & field);\n    }\n\n    fn test_scalar(input: u32) -> u32 {\n      let bool_input = get_val(input, pos0_field);\n      if (${builtin}(bool_input)) {\n        return 1u;\n      }\n      return 0u;\n    }\n    \n     fn test_vec2(input: u32) -> u32 {\n      let bool_input = vec2<bool>(get_val(input, pos0_field), \n                                  get_val(input, pos1_field));\n      if (${builtin}(bool_input)) {\n        return 1u;\n      }\n      return 0u;\n    }\n\n     fn test_vec3(input: u32) -> u32 {\n      let bool_input = vec3<bool>(get_val(input, pos0_field), \n                                  get_val(input, pos1_field),\n                                  get_val(input, pos2_field));\n      if (${builtin}(bool_input)) {\n        return 1u;\n      }\n      return 0u;\n    }\n    \n    fn test_vec4(input: u32) -> u32 {\n      let bool_input = vec4<bool>(get_val(input, pos0_field),\n                                  get_val(input, pos1_field),\n                                  get_val(input, pos2_field),\n                                  get_val(input, pos3_field));\n      if (${builtin}(bool_input)) {\n        return 1u;\n      }\n      return 0u;\n    }\n    \n    [[stage(compute), workgroup_size(1)]]\n    fn main() {\n      for(var i = 0; i < ${cases.length}; i = i + 1) {\n        let input : ${type} = inputs.values[i];\n        let dim : ${type} = input & dim_mask;\n        if (dim == 0u || dim == 1u) {\n          outputs.values[i] = test_scalar(inputs.values[i]);\n        } \n        if (dim == 2u) {\n          outputs.values[i] = test_vec2(inputs.values[i]);\n        }\n        if (dim == 3u) {\n          outputs.values[i] = test_vec3(inputs.values[i]);\n        }\n        if (dim == 4u) {\n          outputs.values[i] = test_vec4(inputs.values[i]);\n        }\n      }\n    }\n  `;\n  runShaderTestImpl(\n    t,\n    storageClass,\n    storageMode,\n    type,\n    arrayLength,\n    builtin,\n    arrayType,\n    cases,\n    source\n  );\n}\n\ng.test('logical_builtin_functions,vector_all')\n  .uniqueId('d140d173a2acf981')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#logical-builtin-functions')\n  .desc(\n    `\nvector all:\ne: vecN<bool> all(e): bool Returns true if each component of e is true. (OpAll)\n`\n  )\n  .params(u =>\n    u\n      .combineWithParams([{ storageClass: 'storage', storageMode: 'read_write' }] as const)\n      .combine('containerType', ['scalar'] as const)\n      .combine('isAtomic', [false])\n      .combine('baseType', ['u32'] as const)\n      .expandWithParams(generateTypes)\n  )\n  .fn(async t => {\n    assert(t.params._kTypeInfo !== undefined, 'generated type is undefined');\n    runShaderTest(\n      t,\n      t.params.storageClass,\n      t.params.storageMode,\n      t.params.type,\n      t.params._kTypeInfo.arrayLength,\n      'all',\n      Uint32Array,\n      /*\n       * Since bools are not host shareable, bit packing to/from u32s is\n       * required.\n       * Input format:\n       *   bits 0 to 3: number of dimensions of the vector to be passed in,\n       *                1 indicates use a scalar. Not all of the space is\n       *                needed, but makes it easier to read, since things are\n       *                aligned on hex digits.\n       *   bit 5: value for scalar or position 0 in vector\n       *   bit 6: value for position 1 in vector\n       *   bit 7: value for position 2 in vector\n       *   bit 8: value for position 3 in vector\n       * Output format:\n       *   bit 0: return value of all\n       */\n      /* prettier-ignore */ [\n        // Scalars\n        { input: NumberRepr.fromU32(0x01), expected: [NumberRepr.fromU32(0)] }, // F -> F\n        { input: NumberRepr.fromU32(0x11), expected: [NumberRepr.fromU32(1)] }, // T -> T\n        // vec2\n        { input: NumberRepr.fromU32(0x02), expected: [NumberRepr.fromU32(0)] }, // [ F, F ] -> F\n        { input: NumberRepr.fromU32(0x12), expected: [NumberRepr.fromU32(0)] }, // [ T, F ] -> F\n        { input: NumberRepr.fromU32(0x22), expected: [NumberRepr.fromU32(0)] }, // [ F, T ] -> F\n        { input: NumberRepr.fromU32(0x32), expected: [NumberRepr.fromU32(1)] }, // [ T, T ] -> T\n        // vec3\n        { input: NumberRepr.fromU32(0x03), expected: [NumberRepr.fromU32(0)] }, // [ F, F, F ] -> F\n        { input: NumberRepr.fromU32(0x13), expected: [NumberRepr.fromU32(0)] }, // [ T, F, F ] -> F\n        { input: NumberRepr.fromU32(0x23), expected: [NumberRepr.fromU32(0)] }, // [ F, T, F ] -> F\n        { input: NumberRepr.fromU32(0x33), expected: [NumberRepr.fromU32(0)] }, // [ T, T, F ] -> F\n        { input: NumberRepr.fromU32(0x43), expected: [NumberRepr.fromU32(0)] }, // [ F, F, T ] -> F\n        { input: NumberRepr.fromU32(0x53), expected: [NumberRepr.fromU32(0)] }, // [ T, F, T ] -> F\n        { input: NumberRepr.fromU32(0x63), expected: [NumberRepr.fromU32(0)] }, // [ F, T, T ] -> F\n        { input: NumberRepr.fromU32(0x73), expected: [NumberRepr.fromU32(1)] }, // [ T, T, T ] -> T\n        // vec4\n        { input: NumberRepr.fromU32(0x04), expected: [NumberRepr.fromU32(0)] }, // [ F, F, F, F ] -> F\n        { input: NumberRepr.fromU32(0x14), expected: [NumberRepr.fromU32(0)] }, // [ F, T, F, F ] -> F\n        { input: NumberRepr.fromU32(0x24), expected: [NumberRepr.fromU32(0)] }, // [ F, F, T, F ] -> F\n        { input: NumberRepr.fromU32(0x34), expected: [NumberRepr.fromU32(0)] }, // [ F, T, T, F ] -> F\n        { input: NumberRepr.fromU32(0x44), expected: [NumberRepr.fromU32(0)] }, // [ F, F, F, T ] -> F\n        { input: NumberRepr.fromU32(0x54), expected: [NumberRepr.fromU32(0)] }, // [ F, T, F, T ] -> F\n        { input: NumberRepr.fromU32(0x64), expected: [NumberRepr.fromU32(0)] }, // [ F, F, T, T ] -> F\n        { input: NumberRepr.fromU32(0x74), expected: [NumberRepr.fromU32(0)] }, // [ F, T, T, T ] -> F\n        { input: NumberRepr.fromU32(0x84), expected: [NumberRepr.fromU32(0)] }, // [ T, F, F, F ] -> F\n        { input: NumberRepr.fromU32(0x94), expected: [NumberRepr.fromU32(0)] }, // [ T, F, F, T ] -> F\n        { input: NumberRepr.fromU32(0xA4), expected: [NumberRepr.fromU32(0)] }, // [ T, F, T, F ] -> F\n        { input: NumberRepr.fromU32(0xB4), expected: [NumberRepr.fromU32(0)] }, // [ T, F, T, T ] -> F\n        { input: NumberRepr.fromU32(0xC4), expected: [NumberRepr.fromU32(0)] }, // [ T, T, F, F ] -> F\n        { input: NumberRepr.fromU32(0xD4), expected: [NumberRepr.fromU32(0)] }, // [ T, T, F, T ] -> F\n        { input: NumberRepr.fromU32(0xE4), expected: [NumberRepr.fromU32(0)] }, // [ T, T, T, F ] -> F\n        { input: NumberRepr.fromU32(0xF4), expected: [NumberRepr.fromU32(1)] }, // [ T, T, T, T ] -> T\n      ]\n    );\n  });\n"],"file":"all.spec.js"}