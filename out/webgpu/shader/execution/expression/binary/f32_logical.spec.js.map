{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_logical.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","bool","f32","TypeBool","TypeF32","flushSubnormalScalarF32","vectorTestValues","makeCaseCache","allInputSources","run","binary","g","makeCase","lhs","rhs","truthFunc","f32_lhs","f32_rhs","lhs_options","Set","rhs_options","expected","forEach","l","r","result","includes","push","input","d","equals_non_const","value","map","v","equals_const","not_equals_non_const","not_equals_const","less_than_non_const","less_than_const","less_equals_non_const","less_equals_const","greater_than_non_const","greater_than_const","greater_equals_non_const","greater_equals_const","test","specURL","desc","params","u","combine","undefined","fn","t","cases","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 logical binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf } from '../../../../util/compare.js';\nimport { bool, f32, Scalar, TypeBool, TypeF32 } from '../../../../util/conversion.js';\nimport { flushSubnormalScalarF32, vectorTestValues } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\nimport { allInputSources, Case, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * @returns a test case for the provided left hand & right hand values and truth function.\n * Handles quantization and subnormals.\n */\nfunction makeCase(\n  lhs: number,\n  rhs: number,\n  truthFunc: (lhs: Scalar, rhs: Scalar) => boolean\n): Case {\n  const f32_lhs = f32(lhs);\n  const f32_rhs = f32(rhs);\n  const lhs_options = new Set([f32_lhs, flushSubnormalScalarF32(f32_lhs)]);\n  const rhs_options = new Set([f32_rhs, flushSubnormalScalarF32(f32_rhs)]);\n  const expected: Array<Scalar> = [];\n  lhs_options.forEach(l => {\n    rhs_options.forEach(r => {\n      const result = bool(truthFunc(l, r));\n      if (!expected.includes(result)) {\n        expected.push(result);\n      }\n    });\n  });\n\n  return { input: [f32_lhs, f32_rhs], expected: anyOf(...expected) };\n}\n\nexport const d = makeCaseCache('binary/f32_logical', {\n  equals_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  equals_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  not_equals_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  not_equals_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_than_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_than_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_equals_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_equals_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_than_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_than_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_equals_non_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_equals_const: () => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n});\n\ng.test('equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x == y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'equals_const' : 'equals_non_const'\n    );\n    await run(t, binary('=='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('not_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x != y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'not_equals_const' : 'not_equals_non_const'\n    );\n    await run(t, binary('!='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_than')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x < y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'less_than_const' : 'less_than_non_const'\n    );\n    await run(t, binary('<'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x <= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'less_equals_const' : 'less_equals_non_const'\n    );\n    await run(t, binary('<='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_than')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x > y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'greater_than_const' : 'greater_than_non_const'\n    );\n    await run(t, binary('>'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x >= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'greater_equals_const' : 'greater_equals_non_const'\n    );\n    await run(t, binary('>='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n"],"file":"f32_logical.spec.js"}