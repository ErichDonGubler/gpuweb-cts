{"version":3,"file":"bitwise_shift.spec.js","names":["description","makeTestGroup","GPUTest","i32","scalarType","TypeU32","u32","allInputSources","run","binary","g","is_unsiged","type","bitwidth","is_valid_const_shift_left","e1","e1Type","e2","must_be_zero_msb","mask","must_match_msb","is_valid_const_shift_right","generate_shift_left_cases","is_const","V","cases","shift","expected","push","input","generate_shift_right_cases","test","specURL","desc","params","u","combine","undefined","fn","t","inputSource","add_unsigned_overflow_cases","add_signed_overflow_cases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise_shift.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the bitwise shift binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { i32, scalarType, TypeU32, u32 } from '../../../../util/conversion.js';\nimport { allInputSources, CaseList, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction is_unsiged(type: string) {\n  return type === 'u32';\n}\n\nconst bitwidth = 32;\n\n// Returns true if e1 << e2 is valid for const evaluation\nfunction is_valid_const_shift_left(e1: number, e1Type: string, e2: number) {\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  // Cannot shift by bitwidth or greater\n  if (e2 >= bitwidth) {\n    return false;\n  }\n\n  if (is_unsiged(e1Type)) {\n    // If T is an unsigned integer type, and any of the e2 most significant bits of e1 are 1, then invalid.\n    const must_be_zero_msb = e2;\n    const mask = ~0 << (bitwidth - must_be_zero_msb);\n    if ((e1 & mask) !== 0) {\n      return false;\n    }\n  } else {\n    // If T is a signed integer type, and the e2+1 most significant bits of e1 do\n    // not have the same bit value, then error.\n    const must_match_msb = e2 + 1;\n    const mask = ~0 << (bitwidth - must_match_msb);\n    if ((e1 & mask) !== 0 && (e1 & mask) !== mask) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Returns true if e1 >> e2 is valid for const evaluation\nfunction is_valid_const_shift_right(e1: number, e1Type: string, e2: number) {\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  // Cannot shift by bitwidth or greater\n  if (e2 >= bitwidth) {\n    return false;\n  }\n\n  return true;\n}\n\n// Returns all cases of shifting e1 left by [0,63]. If `is_const` is true, cases that are\n// invalid for const eval are not returned.\nfunction generate_shift_left_cases(e1: number, e1Type: string, is_const: boolean): CaseList {\n  const V = e1Type === 'i32' ? i32 : u32;\n  const cases: CaseList = [];\n  for (let shift = 0; shift < 64; ++shift) {\n    const e2 = shift;\n    if (is_const && !is_valid_const_shift_left(e1, e1Type, e2)) {\n      continue;\n    }\n    const expected = e1 << e2 % bitwidth;\n    cases.push({ input: [V(e1), u32(e2)], expected: V(expected) });\n  }\n  return cases;\n}\n\n// Returns all cases of shifting e1 right by [0,63]. If `is_const` is true, cases that are\n// invalid for const eval are not returned.\nfunction generate_shift_right_cases(e1: number, e1Type: string, is_const: boolean): CaseList {\n  const V = e1Type === 'i32' ? i32 : u32;\n  const cases: CaseList = [];\n  for (let shift = 0; shift < 64; ++shift) {\n    const e2 = shift;\n    if (is_const && !is_valid_const_shift_right(e1, e1Type, e2)) {\n      continue;\n    }\n\n    let expected: number = 0;\n    if (is_unsiged(e1Type)) {\n      // zero-fill right shift\n      expected = e1 >>> e2;\n    } else {\n      // arithmetic right shift\n      expected = e1 >> e2;\n    }\n    cases.push({ input: [V(e1), u32(e2)], expected: V(expected) });\n  }\n  return cases;\n}\n\ng.test('shift_left_concrete')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 << e2\n\nShift left (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const V = t.params.type === 'i32' ? i32 : u32;\n    const is_const = t.params.inputSource === 'const';\n\n    const cases: CaseList = [\n      {\n        input: /*  */ [V(0b00000000000000000000000000000001), u32(1)],\n        expected: /**/ V(0b00000000000000000000000000000010),\n      },\n      {\n        input: /*  */ [V(0b00000000000000000000000000000011), u32(1)],\n        expected: /**/ V(0b00000000000000000000000000000110),\n      },\n    ];\n\n    const add_unsigned_overflow_cases = !is_const || is_unsiged(t.params.type);\n    const add_signed_overflow_cases = !is_const || !is_unsiged(t.params.type);\n\n    if (add_unsigned_overflow_cases) {\n      // Cases that are fine for unsigned values, but would overflow (sign change) signed\n      // values when const evaluated.\n      cases.push(\n        ...[\n          {\n            input: [/*  */ V(0b01000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b10000000000000000000000000000000),\n          },\n          {\n            input: [/*  */ V(0b01111111111111111111111111111111), u32(1)],\n            expected: /**/ V(0b11111111111111111111111111111110),\n          },\n          {\n            input: [/*  */ V(0b00000000000000000000000000000001), u32(31)],\n            expected: /**/ V(0b10000000000000000000000000000000),\n          },\n        ]\n      );\n    }\n    if (add_signed_overflow_cases) {\n      // Cases that are fine for signed values (no sign change), but would overflow\n      // unsigned values when const evaluated.\n      cases.push(\n        ...[\n          {\n            input: [/*  */ V(0b11000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b10000000000000000000000000000000),\n          },\n          {\n            input: [/*  */ V(0b11111111111111111111111111111111), u32(1)],\n            expected: /**/ V(0b11111111111111111111111111111110),\n          },\n          {\n            input: [/*  */ V(0b11111111111111111111111111111111), u32(31)],\n            expected: /**/ V(0b10000000000000000000000000000000),\n          },\n        ]\n      );\n    }\n\n    // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n    cases.push(\n      ...generate_shift_left_cases(0b00000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b00000000000000000000000000000001, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b00000000000000000000000000000010, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b00000000000000000000000000000011, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b10000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b01000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b11000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b00010000001000001000010001010101, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_left_cases(0b11101111110111110111101110101010, t.params.type, is_const)\n    );\n    await run(t, binary('<<'), [type, TypeU32], type, t.params, cases);\n  });\n\ng.test('shift_right_concrete')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 >> e2\n\nShift right (shifted value is concrete)\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('inputSource', allInputSources)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const V = t.params.type === 'i32' ? i32 : u32;\n    const is_const = t.params.inputSource === 'const';\n\n    const cases: CaseList = [\n      {\n        input: /*  */ [V(0b00000000000000000000000000000001), u32(1)],\n        expected: /**/ V(0b00000000000000000000000000000000),\n      },\n      {\n        input: /*  */ [V(0b00000000000000000000000000000011), u32(1)],\n        expected: /**/ V(0b00000000000000000000000000000001),\n      },\n      {\n        input: /*  */ [V(0b01000000000000000000000000000000), u32(1)],\n        expected: /**/ V(0b00100000000000000000000000000000),\n      },\n      {\n        input: /*  */ [V(0b01100000000000000000000000000000), u32(1)],\n        expected: /**/ V(0b00110000000000000000000000000000),\n      },\n    ];\n    if (is_unsiged(t.params.type)) {\n      // No sign extension\n      cases.push(\n        ...[\n          {\n            input: /*  */ [V(0b10000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b01000000000000000000000000000000),\n          },\n          {\n            input: /*  */ [V(0b11000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b01100000000000000000000000000000),\n          },\n        ]\n      );\n    } else {\n      cases.push(\n        // Sign extension if msb is 1\n        ...[\n          {\n            input: /*  */ [V(0b10000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b11000000000000000000000000000000),\n          },\n          {\n            input: /*  */ [V(0b11000000000000000000000000000000), u32(1)],\n            expected: /**/ V(0b11100000000000000000000000000000),\n          },\n        ]\n      );\n    }\n\n    // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n    cases.push(\n      ...generate_shift_right_cases(0b00000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b00000000000000000000000000000001, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b00000000000000000000000000000010, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b00000000000000000000000000000011, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b10000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b01000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b11000000000000000000000000000000, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b00010000001000001000010001010101, t.params.type, is_const)\n    );\n    cases.push(\n      ...generate_shift_right_cases(0b11101111110111110111101110101010, t.params.type, is_const)\n    );\n    await run(t, binary('>>'), [type, TypeU32], type, t.params, cases);\n  });\n"],"mappings":"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"}