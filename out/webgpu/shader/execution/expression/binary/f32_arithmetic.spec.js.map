{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","additionInterval","divisionInterval","multiplicationInterval","remainderInterval","subtractionInterval","vectorTestValues","makeCaseCache","allInputSources","makeBinaryToF32IntervalCase","run","binary","g","d","addition_non_const","makeCase","lhs","rhs","map","v","addition_const","subtraction_non_const","subtraction_const","multiplication_non_const","multiplication_const","division_non_const","division_const","remainder_non_const","remainder_const","test","specURL","desc","params","u","combine","undefined","fn","t","cases","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../util/conversion.js';\nimport {\n  additionInterval,\n  divisionInterval,\n  multiplicationInterval,\n  remainderInterval,\n  subtractionInterval,\n} from '../../../../util/f32_interval.js';\nimport { vectorTestValues } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('binary/f32_arithmetic', {\n  addition_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  addition_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  subtraction_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, subtractionInterval);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  subtraction_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, subtractionInterval);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  multiplication_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, multiplicationInterval);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  multiplication_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, multiplicationInterval);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  division_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, divisionInterval);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  division_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, divisionInterval);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  remainder_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, remainderInterval);\n    };\n\n    return vectorTestValues(2, false).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n  remainder_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, remainderInterval);\n    };\n\n    return vectorTestValues(2, true).map(v => {\n      return makeCase(v[0], v[1]);\n    });\n  },\n});\n\ng.test('addition')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'addition_const' : 'addition_non_const'\n    );\n    await run(t, binary('+'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('subtraction')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'subtraction_const' : 'subtraction_non_const'\n    );\n    await run(t, binary('-'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('multiplication')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'multiplication_const' : 'multiplication_non_const'\n    );\n    await run(t, binary('*'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('division')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'division_const' : 'division_non_const'\n    );\n    await run(t, binary('/'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('remainder')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'remainder_const' : 'remainder_non_const'\n    );\n    await run(t, binary('%'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n"],"file":"f32_arithmetic.spec.js"}