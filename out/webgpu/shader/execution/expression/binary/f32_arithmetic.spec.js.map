{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedMatch","ulpMatch","TypeF32","additionInterval","biasedRange","fullF32Range","allInputSources","makeBinaryF32Case","makeBinaryF32IntervalCase","run","binary","g","test","specURL","desc","params","u","combine","undefined","fn","t","makeCase","lhs","rhs","cases","numeric_range","forEach","push","cfg","cmpFloats","l","r","lhs_numeric_range","rhs_numeric_range","filter","value","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { correctlyRoundedMatch, ulpMatch } from '../../../../util/compare.js';\nimport { TypeF32 } from '../../../../util/conversion.js';\nimport { additionInterval } from '../../../../util/f32_interval.js';\nimport { biasedRange, fullF32Range } from '../../../../util/math.js';\nimport {\n  allInputSources,\n  Case,\n  Config,\n  makeBinaryF32Case,\n  makeBinaryF32IntervalCase,\n  run,\n} from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('addition')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('+'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('subtraction')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryF32Case(lhs, rhs, (l: number, r: number): number => {\n        return l - r;\n      });\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('-'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('multiplication')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryF32Case(lhs, rhs, (l: number, r: number): number => {\n        return l * r;\n      });\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('*'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('division')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpMatch(2.5);\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryF32Case(\n        lhs,\n        rhs,\n        (l: number, r: number): number => {\n          return l / r;\n        },\n        true\n      );\n    };\n\n    const cases: Array<Case> = [];\n    const lhs_numeric_range = fullF32Range();\n    const rhs_numeric_range = biasedRange(2 ** -126, 2 ** 126, 200).filter(value => {\n      return value !== 0.0;\n    });\n    lhs_numeric_range.forEach(lhs => {\n      rhs_numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('/'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\n// Will be implemented as part larger derived accuracy task\ng.test('modulus')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n"],"file":"f32_arithmetic.spec.js"}