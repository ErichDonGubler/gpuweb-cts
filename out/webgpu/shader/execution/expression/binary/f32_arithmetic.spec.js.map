{"version":3,"file":"f32_arithmetic.spec.js","names":["description","makeTestGroup","GPUTest","TypeF32","additionInterval","divisionInterval","multiplicationInterval","remainderInterval","subtractionInterval","fullF32Range","makeCaseCache","allInputSources","makeBinaryToF32IntervalCase","run","binary","g","d","addition_non_const","makeCase","lhs","rhs","flatMap","x","map","y","addition_const","subtraction_non_const","subtraction_const","multiplication_non_const","multiplication_const","division_non_const","division_const","remainder_non_const","remainder_const","test","specURL","desc","params","u","combine","undefined","fn","t","cases","get","inputSource"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../util/conversion.js';\nimport {\n  additionInterval,\n  divisionInterval,\n  multiplicationInterval,\n  remainderInterval,\n  subtractionInterval,\n} from '../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('binary/f32_arithmetic', {\n  addition_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  addition_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, additionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  subtraction_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, subtractionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  subtraction_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, subtractionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  multiplication_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, multiplicationInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  multiplication_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, multiplicationInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  division_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, divisionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  division_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, divisionInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  remainder_non_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, remainderInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n  remainder_const: () => {\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeBinaryToF32IntervalCase(lhs, rhs, remainderInterval);\n    };\n\n    return fullF32Range().flatMap(x => {\n      return fullF32Range().map(y => {\n        return makeCase(x, y);\n      });\n    });\n  },\n});\n\ng.test('addition')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'addition_const' : 'addition_non_const'\n    );\n    await run(t, binary('+'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('subtraction')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'subtraction_const' : 'subtraction_non_const'\n    );\n    await run(t, binary('-'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('multiplication')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'multiplication_const' : 'multiplication_non_const'\n    );\n    await run(t, binary('*'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('division')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'division_const' : 'division_non_const'\n    );\n    await run(t, binary('/'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('remainder')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'remainder_const' : 'remainder_non_const'\n    );\n    await run(t, binary('%'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n"],"mappings":"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"}