{"version":3,"sources":["../../../../../src/webgpu/shader/execution/expression/case_cache.ts"],"names":["dataCache","deserializeComparator","Scalar","Vector","serializeValue","deserializeValue","deserializeF32Interval","F32Interval","serializeF32Interval","serializeExpectation","e","kind","value","Array","map","i","Function","comp","undefined","data","deserializeExpectation","serializeCase","c","input","v","expected","deserializeCase","CaseCache","constructor","name","builders","path","get","fetch","build","built","cases","Promise","resolve","serialize","serialized","JSON","stringify","deserialize","parse","casesByName","caseData","makeCaseCache"],"mappings":"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","sourcesContent":["import { Cacheable, dataCache } from '../../../../common/framework/data_cache.js';\nimport { SerializedComparator, deserializeComparator } from '../../../util/compare.js';\nimport {\n  Scalar,\n  Vector,\n  serializeValue,\n  SerializedValue,\n  deserializeValue,\n} from '../../../util/conversion.js';\nimport {\n  deserializeF32Interval,\n  F32Interval,\n  SerializedF32Interval,\n  serializeF32Interval,\n} from '../../../util/f32_interval.js';\n\nimport { Case, CaseList, Expectation } from './expression.js';\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Value\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationValue = {\n  kind: 'value';\n  value: SerializedValue;\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is an Interval\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationInterval = {\n  kind: 'interval';\n  value: SerializedF32Interval;\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a list of Intervals\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationIntervals = {\n  kind: 'intervals';\n  value: SerializedF32Interval[];\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Comparator\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationComparator = {\n  kind: 'comparator';\n  value: SerializedComparator;\n};\n\n/**\n * SerializedExpectation holds the serialized form of an Expectation.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedExpectation =\n  | SerializedExpectationValue\n  | SerializedExpectationInterval\n  | SerializedExpectationIntervals\n  | SerializedExpectationComparator;\n\n/** serializeExpectation() converts an Expectation to a SerializedExpectation */\nexport function serializeExpectation(e: Expectation): SerializedExpectation {\n  if (e instanceof Scalar || e instanceof Vector) {\n    return { kind: 'value', value: serializeValue(e) };\n  }\n  if (e instanceof F32Interval) {\n    return { kind: 'interval', value: serializeF32Interval(e) };\n  }\n  if (e instanceof Array) {\n    return { kind: 'intervals', value: e.map(i => serializeF32Interval(i)) };\n  }\n  if (e instanceof Function) {\n    const comp = (e as unknown) as SerializedComparator;\n    if (comp.kind !== undefined && comp.data !== undefined) {\n      return { kind: 'comparator', value: { kind: comp.kind, data: comp.data } };\n    }\n    throw 'cannot serialize comparator';\n  }\n  throw 'cannot serialize expectation';\n}\n\n/** deserializeExpectation() converts a SerializedExpectation to a Expectation */\nexport function deserializeExpectation(data: SerializedExpectation): Expectation {\n  switch (data.kind) {\n    case 'value':\n      return deserializeValue(data.value);\n    case 'interval':\n      return deserializeF32Interval(data.value);\n    case 'intervals':\n      return data.value.map(i => deserializeF32Interval(i));\n    case 'comparator':\n      return deserializeComparator(data.value);\n  }\n}\n\n/**\n * SerializedCase holds the serialized form of a Case.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedCase = {\n  input: SerializedValue | SerializedValue[];\n  expected: SerializedExpectation;\n};\n\n/** serializeCase() converts an Case to a SerializedCase */\nexport function serializeCase(c: Case): SerializedCase {\n  return {\n    input: c.input instanceof Array ? c.input.map(v => serializeValue(v)) : serializeValue(c.input),\n    expected: serializeExpectation(c.expected),\n  };\n}\n\n/** serializeCase() converts an SerializedCase to a Case */\nexport function deserializeCase(data: SerializedCase): Case {\n  return {\n    input:\n      data.input instanceof Array\n        ? data.input.map(v => deserializeValue(v))\n        : deserializeValue(data.input),\n    expected: deserializeExpectation(data.expected),\n  };\n}\n\n/** CaseListBuilder is a function that builds a CaseList */\nexport type CaseListBuilder = () => CaseList;\n\n/**\n * CaseCache is a cache of CaseList.\n * CaseCache implements the Cacheable interface, so the cases can be pre-built\n * and stored in the data cache, reducing computation costs at CTS runtime.\n */\nexport class CaseCache implements Cacheable<Record<string, CaseList>> {\n  /**\n   * Constructor\n   * @param name the name of the cache. This must be globally unique.\n   * @param builders a Record of case-list name to case-list builder.\n   */\n  constructor(name: string, builders: Record<string, CaseListBuilder>) {\n    this.path = `webgpu/shader/execution/case-cache/${name}.json`;\n    this.builders = builders;\n  }\n\n  /** get() returns the list of cases with the given name */\n  public async get(name: string): Promise<CaseList> {\n    const data = await dataCache.fetch(this);\n    return data[name];\n  }\n\n  /**\n   * build() implements the Cacheable.build interface.\n   * @returns the data.\n   */\n  build(): Promise<Record<string, CaseList>> {\n    const built: Record<string, CaseList> = {};\n    for (const name in this.builders) {\n      const cases = this.builders[name]();\n      built[name] = cases;\n    }\n    return Promise.resolve(built);\n  }\n\n  /**\n   * serialize() implements the Cacheable.serialize interface.\n   * @returns the serialized data.\n   */\n  serialize(data: Record<string, CaseList>): string {\n    const serialized: Record<string, SerializedCase[]> = {};\n    for (const name in data) {\n      serialized[name] = data[name].map(c => serializeCase(c));\n    }\n    return JSON.stringify(serialized);\n  }\n\n  /**\n   * deserialize() implements the Cacheable.deserialize interface.\n   * @returns the deserialize data.\n   */\n  deserialize(serialized: string): Record<string, CaseList> {\n    const data = JSON.parse(serialized) as Record<string, SerializedCase[]>;\n    const casesByName: Record<string, CaseList> = {};\n    for (const name in data) {\n      const cases = data[name].map(caseData => deserializeCase(caseData));\n      casesByName[name] = cases;\n    }\n    return casesByName;\n  }\n\n  public readonly path: string;\n  private readonly builders: Record<string, CaseListBuilder>;\n}\n\nexport function makeCaseCache(name: string, builders: Record<string, CaseListBuilder>): CaseCache {\n  return new CaseCache(name, builders);\n}\n"],"file":"case_cache.js"}