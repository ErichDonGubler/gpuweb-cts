{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/exp.spec.ts"],"names":["description","makeTestGroup","GPUTest","compare","ulpThreshold","kBit","kValue","f32","f32Bits","TypeF32","biasedRange","run","builtin","g","test","specURL","desc","unimplemented","params","u","combine","undefined","fn","t","cmp","x","target","got","_","c","Math","abs","ulpMatch","matched","toString","expected","makeCase","exp","input","cases","negative","min","infinity","positive","max","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'exp' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Comparator, compare, ulpThreshold } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, Scalar, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange } from '../../../../../util/math.js';\nimport { Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp(e1: T ) -> T\nReturns the natural exponentiation of e1 (e.g. e^e1). Component-wise when T is a vector.\n`\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp(e1: T ) -> T\nReturns the natural exponentiation of e1 (e.g. e^e1). Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cmp = (x: number, target: Scalar): Comparator => {\n      return (got, _) => {\n        const c = 3 + 2 * Math.abs(x);\n        const ulpMatch = ulpThreshold(c);\n        const cmp = compare(got, target, ulpMatch);\n        if (cmp.matched) {\n          return cmp;\n        }\n        return {\n          matched: false,\n          got: got.toString(),\n          expected: `within 3 + 2 * |${x}| ULP of ${target}`,\n        };\n      };\n    };\n\n    const makeCase = (x: number): Case => {\n      const expected = f32(Math.exp(x));\n      return { input: f32(x), expected: cmp(x, expected) };\n    };\n\n    // ln(max f32 value) ~ 88, so exp(88) will be within range of a f32, but exp(89) will not\n    const cases: Array<Case> = [\n      makeCase(0), // Returns 1 by definition\n      makeCase(-89), // Returns subnormal value\n      makeCase(kValue.f32.negative.min), // Closest to returning 0 as possible\n      { input: f32(89), expected: f32Bits(kBit.f32.infinity.positive) }, // Overflows\n      ...biasedRange(kValue.f32.negative.max, -88, 100).map(x => makeCase(x)),\n      ...biasedRange(kValue.f32.positive.min, 88, 100).map(x => makeCase(x)),\n    ];\n\n    run(t, builtin('exp'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp(e1: T ) -> T\nReturns the natural exponentiation of e1 (e.g. e^e1). Component-wise when T is a vector.\n`\n  )\n  .unimplemented();\n"],"file":"exp.spec.js"}