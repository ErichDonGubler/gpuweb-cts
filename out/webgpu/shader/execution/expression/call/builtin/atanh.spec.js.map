{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atanh.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","atanhInterval","biasedRange","sourceFilteredF32Range","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32_const","makeCase","n","f32","negative","less_than_one","positive","map","f32_non_const","cases","edgeCases","push","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'atanh' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn atanh(e: T ) -> T\nReturns the hyperbolic arc tangent of e. The result is 0 when abs(e) â‰¥ 1.\nComputes the functional inverse of tanh.\nComponent-wise when T is a vector.\nNote: The result is not mathematically meaningful when abs(e) >= 1.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { atanhInterval } from '../../../../../util/f32_interval.js';\nimport { biasedRange, sourceFilteredF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('atanh', {\n  f32_const: () => {\n    const makeCase = (n: number): Case => {\n      return makeUnaryToF32IntervalCase(n, atanhInterval);\n    };\n\n    return [\n      ...biasedRange(kValue.f32.negative.less_than_one, -0.9, 20), // discontinuity at x = -1\n      ...biasedRange(kValue.f32.positive.less_than_one, 0.9, 20), // discontinuity at x = 1\n      ...sourceFilteredF32Range(\n        'const',\n        kValue.f32.negative.less_than_one,\n        kValue.f32.positive.less_than_one\n      ),\n    ].map(makeCase);\n  },\n  f32_non_const: () => {\n    const makeCase = (n: number): Case => {\n      return makeUnaryToF32IntervalCase(n, atanhInterval);\n    };\n\n    const cases = [\n      ...biasedRange(kValue.f32.negative.less_than_one, -0.9, 20), // discontinuity at x = -1\n      ...biasedRange(kValue.f32.positive.less_than_one, 0.9, 20), // discontinuity at x = 1\n      ...sourceFilteredF32Range(\n        'storage',\n        kValue.f32.negative.less_than_one,\n        kValue.f32.positive.less_than_one\n      ),\n    ].map(makeCase);\n\n    // Handle the edge case of -1 and 1 when not doing const-eval\n    const edgeCases = [-1, 1].map(makeCase);\n    cases.push(...edgeCases);\n\n    return cases;\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('atanh'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atanh.spec.js"}