{"version":3,"file":"degrees.spec.js","names":["description","makeTestGroup","GPUTest","TypeF32","degreesInterval","fullF32Range","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32","makeCase","n","map","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/degrees.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'degrees' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<T>\n@const fn degrees(e1: T ) -> T\nConverts radians to degrees, approximating e1 × 180 ÷ π. Component-wise when T is a vector\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { degreesInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('degrees', {\n  f32: () => {\n    const makeCase = (n: number): Case => {\n      return makeUnaryToF32IntervalCase(n, degreesInterval);\n    };\n    return fullF32Range().map(makeCase);\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('degrees'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAASC,eAAe,QAAQ,qCAAqC;AACrE,SAASC,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,eAAe,EAAQC,0BAA0B,EAAEC,GAAG,QAAQ,qBAAqB;;AAE5F,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACC,OAAO,CAAC;;AAEvC,OAAO,MAAMU,CAAC,GAAGN,aAAa,CAAC,SAAS,EAAE;EACxCO,GAAG,EAAE,MAAM;IACT,MAAMC,QAAQ,GAAG,CAACC,CAAS,KAAW;MACpC,OAAOP,0BAA0B,CAACO,CAAC,EAAEX,eAAe,CAAC;IACvD,CAAC;IACD,OAAOC,YAAY,EAAE,CAACW,GAAG,CAACF,QAAQ,CAAC;EACrC;AACF,CAAC,CAAC;;AAEFH,CAAC,CAACM,IAAI,CAAC,gBAAgB,CAAC;AACrBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,sBAAqB,CAAC;AAC5BC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEf,eAAe,CAAC,CAACe,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAC,aAAa,EAAE;;AAElBb,CAAC,CAACM,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEf,eAAe,CAAC,CAACe,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAMC,KAAK,GAAG,MAAMf,CAAC,CAACgB,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMnB,GAAG,CAACiB,CAAC,EAAEhB,OAAO,CAAC,SAAS,CAAC,EAAE,CAACP,OAAO,CAAC,EAAEA,OAAO,EAAEuB,CAAC,CAACN,MAAM,EAAEO,KAAK,CAAC;AACvE,CAAC,CAAC;;AAEJhB,CAAC,CAACM,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEf,eAAe,CAAC,CAACe,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAC,aAAa,EAAE"}