{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reflect.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","reflectInterval","kVectorSparseTestValues","makeCaseCache","allInputSources","makeVectorPairToVectorIntervalCase","run","builtin","g","d","f32_vec2","flatMap","i","map","j","makeCaseVecF32","f32_vec3","f32_vec4","x","y","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","get"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'reflect' builtin function\n\nT is vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn reflect(e1: T, e2: T ) -> T\nFor the incident vector e1 and surface orientation e2, returns the reflection\ndirection e1-2*dot(e2,e1)*e2.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { reflectInterval } from '../../../../../util/f32_interval.js';\nimport { kVectorSparseTestValues } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport {\n  allInputSources,\n  Case,\n  makeVectorPairToVectorIntervalCase,\n  run,\n} from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('reflect', {\n  f32_vec2: () => {\n    return kVectorSparseTestValues[2].flatMap(i =>\n      kVectorSparseTestValues[2].map(j => makeCaseVecF32(i, j))\n    );\n  },\n  f32_vec3: () => {\n    return kVectorSparseTestValues[3].flatMap(i =>\n      kVectorSparseTestValues[3].map(j => makeCaseVecF32(i, j))\n    );\n  },\n  f32_vec4: () => {\n    return kVectorSparseTestValues[4].flatMap(i =>\n      kVectorSparseTestValues[4].map(j => makeCaseVecF32(i, j))\n    );\n  },\n});\n\n/** @returns a `reflect` Case for a pair of vectors of f32s input */\nconst makeCaseVecF32 = (x: number[], y: number[]): Case => {\n  return makeVectorPairToVectorIntervalCase(x, y, reflectInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2');\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32)],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3');\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32)],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4');\n    await run(\n      t,\n      builtin('reflect'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32)],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"file":"reflect.spec.js"}