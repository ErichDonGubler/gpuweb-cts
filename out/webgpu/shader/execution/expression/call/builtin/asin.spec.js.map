{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/asin.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","asinInterval","sourceFilteredF32Range","linearRange","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32_const","makeCase","n","map","f32_non_const","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'asin' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn asin(e: T ) -> T\nReturns the arc sine of e. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { asinInterval } from '../../../../../util/f32_interval.js';\nimport { sourceFilteredF32Range, linearRange } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('asin', {\n  f32_const: () => {\n    const makeCase = (n: number): Case => {\n      return makeUnaryToF32IntervalCase(n, asinInterval);\n    };\n\n    return [\n      ...linearRange(-1, 1, 100), // asin is defined on [-1, 1]\n      ...sourceFilteredF32Range('const', -1, 1),\n    ].map(makeCase);\n  },\n  f32_non_const: () => {\n    const makeCase = (n: number): Case => {\n      return makeUnaryToF32IntervalCase(n, asinInterval);\n    };\n\n    return [\n      ...linearRange(-1, 1, 100), // asin is defined on [-1, 1]\n      ...sourceFilteredF32Range('storage', -1, 1),\n    ].map(makeCase);\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('asin'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"asin.spec.js"}