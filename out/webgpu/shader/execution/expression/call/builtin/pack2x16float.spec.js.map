{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack2x16float.spec.ts"],"names":["description","makeTestGroup","assert","Float16Array","GPUTest","anyOf","f32","Scalar","TypeF32","TypeU32","TypeVec","u32","vec2","cartesianProduct","correctlyRoundedF16","fullF32Range","isFiniteF16","quantizeToF32","allInputSources","run","builtin","g","pack2x16float","x","y","undefined","f16_pairs","results","Array","forEach","p","buf","ArrayBuffer","buf_f16","length","push","Uint32Array","valueOf","cmp","expectation","got","matched","value","expected","test","specURL","desc","params","u","combine","fn","t","makeCase","input","map","numeric_range","cases"],"mappings":"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","sourcesContent":["export const description = `\nConverts two floating point values to half-precision floating point numbers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to a IEEE-754 binary16 value,\nwhich is then placed in bits 16 × i through 16 × i + 15 of the result.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { Float16Array } from '../../../../../../external/petamoriken/float16/float16.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf, Comparator } from '../../../../../util/compare.js';\nimport {\n  f32,\n  Scalar,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  vec2,\n} from '../../../../../util/conversion.js';\nimport {\n  cartesianProduct,\n  correctlyRoundedF16,\n  fullF32Range,\n  isFiniteF16,\n  quantizeToF32,\n} from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Quantize two f32s to f16 and then packs them in a u32\n *\n * This should implement the same behaviour as the builtin `pack2x16float` from\n * WGSL.\n * Caller is responsible to ensuring inputs are f32s\n *\n * @param x first f32 to be packed\n * @param y second f32 to be packed\n * @returns an array of possible results for pack2x16float. Elements are either\n *          a number or undefined.\n *          undefined indicates that any value is valid, since the input went\n *          out of bounds.\n */\nexport function pack2x16float(x: number, y: number): (number | undefined)[] {\n  if (!isFiniteF16(x) || !isFiniteF16(y)) {\n    // This indicates any value is valid, so it isn't worth bothering\n    // calculating the more restrictive possibilities.\n    return [undefined];\n  }\n\n  // f32s are not guaranteed to be precisely expressible as a f16, so quantizing\n  // down may have two possible options, which are returned by\n  // correctlyRounded16.\n  const f16_pairs = cartesianProduct(correctlyRoundedF16(x), correctlyRoundedF16(y));\n  const results = new Array<number>();\n  f16_pairs.forEach(p => {\n    const buf = new ArrayBuffer(4);\n    const buf_f16 = new Float16Array(buf);\n    assert(p.length === 2, 'cartesianProduct of 2 arrays returned an entry with not 2 elements');\n    buf_f16[0] = p[0];\n    buf_f16[1] = p[1];\n\n    results.push(new Uint32Array(buf)[0].valueOf());\n  });\n  return results;\n}\n\n/**\n * @returns a custom comparator for a possible result from pack2x16float\n * @param expectation element of the array generated by pack2x16float\n */\nexport function cmp(expectation: number | undefined): Comparator {\n  return got => {\n    assert(got instanceof Scalar, `Received non-Scalar Value in pack2x16float comparator`);\n    let matched = true;\n    if (expectation !== undefined) {\n      matched = (got.value as number) === expectation;\n    }\n\n    return {\n      matched,\n      got: `${got}`,\n      expected: `${expectation !== undefined ? u32(expectation) : 'Any'}`,\n    };\n  };\n}\n\ng.test('pack')\n  .specURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions')\n  .desc(\n    `\n@const fn pack2x16float(e: vec2<f32>) -> u32\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      x = quantizeToF32(x);\n      y = quantizeToF32(y);\n      const results = pack2x16float(x, y);\n      return { input: [vec2(f32(x), f32(y))], expected: anyOf(...results.map(cmp)) };\n    };\n\n    const numeric_range = fullF32Range();\n    const cases: Array<Case> = [];\n    numeric_range.forEach(x => {\n      numeric_range.forEach(y => {\n        cases.push(makeCase(x, y));\n      });\n    });\n\n    await run(t, builtin('pack2x16float'), [TypeVec(2, TypeF32)], TypeU32, t.params, cases);\n  });\n"],"file":"pack2x16float.spec.js"}