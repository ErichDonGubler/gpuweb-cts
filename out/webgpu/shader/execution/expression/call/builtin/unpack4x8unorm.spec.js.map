{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/unpack4x8unorm.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeU32","TypeVec","unpack4x8unormInterval","fullU32Range","makeCaseCache","allInputSources","makeU32ToVectorIntervalCase","run","builtin","g","d","u32","makeCase","n","map","test","specURL","desc","params","u","combine","fn","t","cases","get"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,OAA3B,QAA0C,mCAA1C;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,eAAT,EAAgCC,2BAAhC,EAA6DC,GAA7D,QAAwE,qBAAxE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGZ,aAAa,CAACC,OAAD,CAAvB;;AAEP,OAAO,MAAMY,CAAC,GAAGN,aAAa,CAAC,gBAAD,EAAmB;AAC/CO,EAAAA,GAAG,EAAE,MAAM;AACT,UAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,aAAOP,2BAA2B,CAACO,CAAD,EAAIX,sBAAJ,CAAlC;AACD,KAFD;;AAIA,WAAOC,YAAY,GAAGW,GAAf,CAAmBF,QAAnB,CAAP;AACD,GAP8C,EAAnB,CAAvB;;;AAUPH,CAAC,CAACM,IAAF,CAAO,QAAP;AACGC,OADH,CACW,sDADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBf,eAAzB,CAPf;AAQGgB,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAF,CAAM,KAAN,CAApB;AACA,QAAMjB,GAAG,CAACe,CAAD,EAAId,OAAO,CAAC,gBAAD,CAAX,EAA+B,CAACR,OAAD,CAA/B,EAA0CC,OAAO,CAAC,CAAD,EAAIF,OAAJ,CAAjD,EAA+DuB,CAAC,CAACJ,MAAjE,EAAyEK,KAAzE,CAAT;AACD,CAXH","sourcesContent":["export const description = `\nDecomposes a 32-bit value into four 8-bit chunks, then reinterprets each chunk\nas an unsigned normalized floating point value.\nComponent i of the result is v ÷ 255, where v is the interpretation of bits 8×i\nthrough 8×i+7 of e as an unsigned integer.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeU32, TypeVec } from '../../../../../util/conversion.js';\nimport { unpack4x8unormInterval } from '../../../../../util/f32_interval.js';\nimport { fullU32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeU32ToVectorIntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('unpack4x8unorm', {\n  u32: () => {\n    const makeCase = (n: number): Case => {\n      return makeU32ToVectorIntervalCase(n, unpack4x8unormInterval);\n    };\n\n    return fullU32Range().map(makeCase);\n  },\n});\n\ng.test('unpack')\n  .specURL('https://www.w3.org/TR/WGSL/#unpack-builtin-functions')\n  .desc(\n    `\n@const fn unpack4x8unorm(e: u32) -> vec4<f32>\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, builtin('unpack4x8unorm'), [TypeU32], TypeVec(4, TypeF32), t.params, cases);\n  });\n"],"file":"unpack4x8unorm.spec.js"}