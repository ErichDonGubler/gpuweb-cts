{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/unpack2x16unorm.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","f32","TypeF32","TypeU32","TypeVec","u32","unpack2x16unorm","vec2","fullU32Range","quantizeToF32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","n","results","input","expected","map","r","cases"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,KAAT,QAAsB,gCAAtB;AACA;AACEC,GADF;AAEEC,OAFF;AAGEC,OAHF;AAIEC,OAJF;AAKEC,GALF;AAMEC,eANF;AAOEC,IAPF;AAQO,mCARP;AASA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,6BAA5C;AACA,SAASC,eAAT,EAAgCC,GAAhC,QAA2C,qBAA3C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACC,OAAD,CAAvB;;AAEPc,CAAC,CAACC,IAAF,CAAO,QAAP;AACGC,OADH,CACW,sDADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyB,CAACT,eAAe,CAAC,CAAD,CAAhB,CAAzB,CAPf;AAQGU,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpCA,IAAAA,CAAC,GAAGd,aAAa,CAACc,CAAD,CAAjB;AACA,UAAMC,OAAO,GAAGlB,eAAe,CAACiB,CAAD,CAA/B;AACA,WAAO;AACLE,MAAAA,KAAK,EAAE,CAACpB,GAAG,CAACkB,CAAD,CAAJ,CADF;AAELG,MAAAA,QAAQ,EAAE1B,KAAK,CAAC,GAAGwB,OAAO,CAACG,GAAR,CAAY,CAAAC,CAAC,KAAIrB,IAAI,CAACN,GAAG,CAAC2B,CAAC,CAAC,CAAD,CAAF,CAAJ,EAAY3B,GAAG,CAAC2B,CAAC,CAAC,CAAD,CAAF,CAAf,CAArB,CAAJ,CAFV,EAAP;;AAID,GAPD;;AASA,QAAMC,KAAkB,GAAGrB,YAAY,GAAGmB,GAAf,CAAmBL,QAAnB,CAA3B;;AAEA,QAAMX,GAAG,CAACU,CAAD,EAAIT,OAAO,CAAC,iBAAD,CAAX,EAAgC,CAACT,OAAD,CAAhC,EAA2CC,OAAO,CAAC,CAAD,EAAIF,OAAJ,CAAlD,EAAgEmB,CAAC,CAACJ,MAAlE,EAA0EY,KAA1E,CAAT;AACD,CArBH","sourcesContent":["export const description = `\nDecomposes a 32-bit value into two 16-bit chunks, then reinterprets each chunk\nas an unsigned normalized floating point value.\nComponent i of the result is v ÷ 65535, where v is the interpretation of bits\n16×i through 16×i+15 of e as an unsigned integer.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf } from '../../../../../util/compare.js';\nimport {\n  f32,\n  TypeF32,\n  TypeU32,\n  TypeVec,\n  u32,\n  unpack2x16unorm,\n  vec2,\n} from '../../../../../util/conversion.js';\nimport { fullU32Range, quantizeToF32 } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('unpack')\n  .specURL('https://www.w3.org/TR/WGSL/#unpack-builtin-functions')\n  .desc(\n    `\n@const fn unpack2x16unorm(e: u32) -> vec2<f32>\n`\n  )\n  .params(u => u.combine('inputSource', [allInputSources[1]]))\n  .fn(async t => {\n    const makeCase = (n: number): Case => {\n      n = quantizeToF32(n);\n      const results = unpack2x16unorm(n);\n      return {\n        input: [u32(n)],\n        expected: anyOf(...results.map(r => vec2(f32(r[0]), f32(r[1])))),\n      };\n    };\n\n    const cases: Array<Case> = fullU32Range().map(makeCase);\n\n    await run(t, builtin('unpack2x16unorm'), [TypeU32], TypeVec(2, TypeF32), t.params, cases);\n  });\n"],"file":"unpack2x16unorm.spec.js"}