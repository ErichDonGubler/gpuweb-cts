{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan2.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","atan2Interval","linearRange","sparseF32Range","makeCaseCache","allInputSources","makeBinaryToF32IntervalCase","run","builtin","g","d","f32","makeCase","y","x","numeric_range","negative","max","positive","min","cases","forEach","push","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'atan2' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn atan2(e1: T ,e2: T ) -> T\nReturns the arc tangent of e1 over e2. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { atan2Interval } from '../../../../../util/f32_interval.js';\nimport { linearRange, sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('atan2', {\n  f32: () => {\n    const makeCase = (y: number, x: number): Case => {\n      return makeBinaryToF32IntervalCase(y, x, atan2Interval);\n    };\n\n    // Using sparse, since there a N^2 cases being generated, but including extra values around 0, since that is where\n    // there is a discontinuity that implementations tend to behave badly at.\n    const numeric_range = [\n      ...sparseF32Range(true),\n      ...linearRange(kValue.f32.negative.max, kValue.f32.positive.min, 10),\n    ];\n    const cases: Array<Case> = [];\n    numeric_range.forEach(y => {\n      numeric_range.forEach(x => {\n        cases.push(makeCase(y, x));\n      });\n    });\n\n    return cases;\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('atan2'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atan2.spec.js"}