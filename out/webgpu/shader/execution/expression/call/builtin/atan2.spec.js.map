{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan2.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpMatch","TypeF32","flushSubnormalNumber","fullF32Range","makeBinaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cfg","cmpFloats","makeCase","y","x","extra_cases","Math","PI","atan2","numeric_range","neg_norm","neg_sub","pos_sub","pos_norm","cases","forEach","y_idx","x_idx","push"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'atan2' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpMatch } from '../../../../../util/compare.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { flushSubnormalNumber, fullF32Range } from '../../../../../util/math.js';\nimport { Case, Config, makeBinaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\natan2:\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn atan2(e1: T ,e2: T ) -> T\nReturns the arc tangent of e1 over e2. Component-wise when T is a vector.\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\natan2:\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn atan2(e1: T ,e2: T ) -> T\nReturns the arc tangent of e1 over e2. Component-wise when T is a vector.\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpMatch(4096);\n\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (y: number, x: number): Case => {\n      // If y is subnormal, expect possible results of atan2(0, x)\n      let extra_cases: Array<number> = [];\n      if (flushSubnormalNumber(y) === 0.0) {\n        extra_cases = [0.0, Math.PI, -Math.PI];\n      }\n      return makeBinaryF32Case(y, x, Math.atan2, true, extra_cases);\n    };\n\n    const numeric_range = fullF32Range({\n      neg_norm: 100,\n      neg_sub: 10,\n      pos_sub: 10,\n      pos_norm: 100,\n    });\n\n    const cases: Array<Case> = [];\n    numeric_range.forEach((y, y_idx) => {\n      numeric_range.forEach((x, x_idx) => {\n        // atan2(y, 0) is not well defined, so skipping those cases\n        if (flushSubnormalNumber(x) !== 0) {\n          if (x_idx >= y_idx) {\n            cases.push(makeCase(y, x));\n          }\n        }\n      });\n    });\n    run(t, builtin('atan2'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\natan2:\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn atan2(e1: T ,e2: T ) -> T\nReturns the arc tangent of e1 over e2. Component-wise when T is a vector.\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atan2.spec.js"}