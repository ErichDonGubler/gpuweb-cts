{"version":3,"file":"refract.spec.js","names":["description","makeTestGroup","GPUTest","f32","TypeF32","TypeVec","Vector","refractInterval","sparseVectorF32Range","quantizeToF32","sparseF32Range","allInputSources","run","builtin","g","makeCaseF32","i","s","r","map","i_f32","s_f32","r_f32","input","expected","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","flatMap","j","k"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/refract.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'refract' builtin function\n\nT is vecN<I>\nI is AbstractFloat, f32, or f16\n@const fn refract(e1: T ,e2: T ,e3: I ) -> T\nFor the incident vector e1 and surface normal e2, and the ratio of indices of\nrefraction e3, let k = 1.0 -e3*e3* (1.0 - dot(e2,e1) * dot(e2,e1)).\nIf k < 0.0, returns the refraction vector 0.0, otherwise return the refraction\nvector e3*e1- (e3* dot(e2,e1) + sqrt(k)) *e2.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, TypeF32, TypeVec, Vector } from '../../../../../util/conversion.js';\nimport { refractInterval } from '../../../../../util/f32_interval.js';\nimport { sparseVectorF32Range, quantizeToF32, sparseF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns a `reflect` Case for a pair of vectors of f32s and a f32 input */\nconst makeCaseF32 = (i: number[], s: number[], r: number): Case => {\n  i = i.map(quantizeToF32);\n  s = s.map(quantizeToF32);\n  r = quantizeToF32(r);\n\n  const i_f32 = i.map(f32);\n  const s_f32 = s.map(f32);\n  const r_f32 = f32(r);\n\n  return {\n    input: [new Vector(i_f32), new Vector(s_f32), r_f32],\n    expected: refractInterval(i, s, r),\n  };\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = sparseVectorF32Range(2).flatMap(i => {\n      return sparseVectorF32Range(2).flatMap(j => {\n        return sparseF32Range().map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32), TypeF32],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = sparseVectorF32Range(3).flatMap(i => {\n      return sparseVectorF32Range(3).flatMap(j => {\n        return sparseF32Range().map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32), TypeF32],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = sparseVectorF32Range(4).flatMap(i => {\n      return sparseVectorF32Range(4).flatMap(j => {\n        return sparseF32Range().map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32), TypeF32],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"mappings":"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"}