{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/refract.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","TypeF32","TypeVec","Vector","refractInterval","kVectorSparseTestValues","quantizeToF32","sparseF32Range","allInputSources","run","builtin","g","makeCaseF32","i","s","r","map","i_f32","s_f32","r_f32","input","expected","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","flatMap","j","inputSource","k"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'refract' builtin function\n\nT is vecN<I>\nI is AbstractFloat, f32, or f16\n@const fn refract(e1: T ,e2: T ,e3: I ) -> T\nFor the incident vector e1 and surface normal e2, and the ratio of indices of\nrefraction e3, let k = 1.0 -e3*e3* (1.0 - dot(e2,e1) * dot(e2,e1)).\nIf k < 0.0, returns the refraction vector 0.0, otherwise return the refraction\nvector e3*e1- (e3* dot(e2,e1) + sqrt(k)) *e2.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, TypeF32, TypeVec, Vector } from '../../../../../util/conversion.js';\nimport { refractInterval } from '../../../../../util/f32_interval.js';\nimport {\n  kVectorSparseTestValues,\n  quantizeToF32,\n  sparseF32Range,\n} from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns a `reflect` Case for a pair of vectors of f32s and a f32 input */\nconst makeCaseF32 = (i: number[], s: number[], r: number): Case => {\n  i = i.map(quantizeToF32);\n  s = s.map(quantizeToF32);\n  r = quantizeToF32(r);\n\n  const i_f32 = i.map(f32);\n  const s_f32 = s.map(f32);\n  const r_f32 = f32(r);\n\n  return {\n    input: [new Vector(i_f32), new Vector(s_f32), r_f32],\n    expected: refractInterval(i, s, r),\n  };\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[2].flatMap(i => {\n      return kVectorSparseTestValues[2].flatMap(j => {\n        return sparseF32Range(t.params.inputSource === 'const').map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32), TypeF32],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[3].flatMap(i => {\n      return kVectorSparseTestValues[3].flatMap(j => {\n        return sparseF32Range(t.params.inputSource === 'const').map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32), TypeF32],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorSparseTestValues[4].flatMap(i => {\n      return kVectorSparseTestValues[4].flatMap(j => {\n        return sparseF32Range(t.params.inputSource === 'const').map(k => {\n          return makeCaseF32(i, j, k);\n        });\n      });\n    });\n\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32), TypeF32],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"file":"refract.spec.js"}