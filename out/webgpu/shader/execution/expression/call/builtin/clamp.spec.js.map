{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"names":["description","makeTestGroup","GPUTest","kBit","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","clampIntervals","sparseF32Range","makeCaseCache","allInputSources","makeTernaryToF32IntervalCase","run","builtin","g","d","test_values","min","max","generateIntegerTestCases","negative","positive","f32_non_const","makeCase","x","y","z","values","cases","forEach","push","f32_const","calculateMinMaxClamp","ei","fi","gi","Math","Array","e","f","expected_idx","expected","input","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { clampIntervals } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeTernaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('clamp', {\n  u32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  i32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  f32_non_const: () => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryToF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(false);\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    return cases;\n  },\n\n  f32_const: () => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryToF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(true);\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    return cases;\n  },\n});\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const expected = test_values[expected_idx];\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, builtin('clamp'), [TypeU32, TypeU32, TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('i32');\n    await run(t, builtin('clamp'), [TypeI32, TypeI32, TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"clamp.spec.js"}