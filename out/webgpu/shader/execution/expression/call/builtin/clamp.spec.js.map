{"version":3,"file":"clamp.spec.js","names":["description","makeTestGroup","GPUTest","kBit","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","clampIntervals","sparseF32Range","makeCaseCache","allInputSources","makeTernaryToF32IntervalCase","run","builtin","g","d","test_values","min","max","generateIntegerTestCases","negative","positive","f32_non_const","makeCase","x","y","z","values","cases","forEach","push","f32_const","calculateMinMaxClamp","ei","fi","gi","Math","Array","e","f","expected_idx","expected","input","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { clampIntervals } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeTernaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('clamp', {\n  u32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  i32: () => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    return generateIntegerTestCases(test_values);\n  },\n  f32_non_const: () => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryToF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(false);\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    return cases;\n  },\n\n  f32_const: () => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryToF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(true);\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    return cases;\n  },\n});\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const expected = test_values[expected_idx];\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('u32');\n    await run(t, builtin('clamp'), [TypeU32, TypeU32, TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('i32');\n    await run(t, builtin('clamp'), [TypeI32, TypeI32, TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":"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"}