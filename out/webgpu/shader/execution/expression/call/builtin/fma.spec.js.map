{"version":3,"file":"fma.spec.js","names":["description","makeTestGroup","GPUTest","TypeF32","fmaInterval","sparseF32Range","allInputSources","makeTernaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","values","inputSource","cases","forEach","x","y","z","push"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/fma.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'fma' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn fma(e1: T ,e2: T ,e3: T ) -> T\nReturns e1 * e2 + e3. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { fmaInterval } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeTernaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(t.params.inputSource === 'const');\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeTernaryToF32IntervalCase(x, y, z, fmaInterval));\n        });\n      });\n    });\n\n    await run(t, builtin('fma'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF,SAASC,OAAO,QAAQ,4BAA4B;AACpD,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAASC,WAAW,QAAQ,qCAAqC;AACjE,SAASC,cAAc,QAAQ,6BAA6B;AAC5D,SAASC,eAAe,EAAQC,4BAA4B,EAAEC,GAAG,QAAQ,qBAAqB;;AAE9F,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAO,CAAC;;AAEvCQ,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACrBC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,sBAAqB,CAAC;AAC5BC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAC,aAAa,EAAE;;AAElBR,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAE,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb;EACA,MAAMC,MAAM,GAAGhB,cAAc,CAACe,CAAC,CAACN,MAAM,CAACQ,WAAW,KAAK,OAAO,CAAC;EAC/D,MAAMC,KAAkB,GAAG,EAAE;EAC7BF,MAAM,CAACG,OAAO,CAAC,CAAAC,CAAC,KAAI;IAClBJ,MAAM,CAACG,OAAO,CAAC,CAAAE,CAAC,KAAI;MAClBL,MAAM,CAACG,OAAO,CAAC,CAAAG,CAAC,KAAI;QAClBJ,KAAK,CAACK,IAAI,CAACrB,4BAA4B,CAACkB,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEvB,WAAW,CAAC,CAAC;MAChE,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF,MAAMI,GAAG,CAACY,CAAC,EAAEX,OAAO,CAAC,KAAK,CAAC,EAAE,CAACN,OAAO,EAAEA,OAAO,EAAEA,OAAO,CAAC,EAAEA,OAAO,EAAEiB,CAAC,CAACN,MAAM,EAAES,KAAK,CAAC;AACrF,CAAC,CAAC;;AAEJb,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACVC,OAAO,CAAC,qDAAqD,CAAC;AAC9DC,IAAI,CAAE,WAAU,CAAC;AACjBC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEV,eAAe,CAAC,CAACU,OAAO,CAAC,WAAW,EAAE,CAACC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAU,CAC9F;;AACAC,aAAa,EAAE"}