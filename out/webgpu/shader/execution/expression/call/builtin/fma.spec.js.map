{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/fma.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","fmaInterval","sparseF32Range","allInputSources","makeTernaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","values","inputSource","cases","forEach","x","y","z","push"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,eAAT,EAAgCC,4BAAhC,EAA8DC,GAA9D,QAAyE,qBAAzE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAD,CAAvB;;AAEPQ,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,MAAM,GAAGhB,cAAc,CAACe,CAAC,CAACN,MAAF,CAASQ,WAAT,KAAyB,OAA1B,CAA7B;AACA,QAAMC,KAAkB,GAAG,EAA3B;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,CAAAC,CAAC,KAAI;AAClBJ,IAAAA,MAAM,CAACG,OAAP,CAAe,CAAAE,CAAC,KAAI;AAClBL,MAAAA,MAAM,CAACG,OAAP,CAAe,CAAAG,CAAC,KAAI;AAClBJ,QAAAA,KAAK,CAACK,IAAN,CAAWrB,4BAA4B,CAACkB,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUvB,WAAV,CAAvC;AACD,OAFD;AAGD,KAJD;AAKD,GAND;;AAQA,QAAMI,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACN,OAAD,EAAUA,OAAV,EAAmBA,OAAnB,CAApB,EAAiDA,OAAjD,EAA0DiB,CAAC,CAACN,MAA5D,EAAoES,KAApE,CAAT;AACD,CAnBH;;AAqBAb,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'fma' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn fma(e1: T ,e2: T ,e3: T ) -> T\nReturns e1 * e2 + e3. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { fmaInterval } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeTernaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range(t.params.inputSource === 'const');\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeTernaryToF32IntervalCase(x, y, z, fmaInterval));\n        });\n      });\n    });\n\n    await run(t, builtin('fma'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"fma.spec.js"}