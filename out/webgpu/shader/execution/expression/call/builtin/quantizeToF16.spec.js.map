{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quantizeToF16.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","quantizeToF16Interval","fullF16Range","fullF32Range","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32_const","makeCase","x","cases","f16","negative","min","max","subnormal","positive","map","push","f32_non_const","test","specURL","desc","params","u","combine","undefined","fn","t","get","inputSource"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'quantizeToF16' builtin function\n\nT is f32 or vecN<f32>\n@const fn quantizeToF16(e: T ) -> T\nQuantizes a 32-bit floating point value e as if e were converted to a IEEE 754\nbinary16 value, and then converted back to a IEEE 754 binary32 value.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { quantizeToF16Interval } from '../../../../../util/f32_interval.js';\nimport { fullF16Range, fullF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('quantizeToF16', {\n  f32_const: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, quantizeToF16Interval);\n    };\n\n    const cases = [\n      kValue.f16.negative.min,\n      kValue.f16.negative.max,\n      kValue.f16.subnormal.negative.min,\n      kValue.f16.subnormal.negative.max,\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.subnormal.positive.max,\n      kValue.f16.positive.min,\n      kValue.f16.positive.max,\n    ].map(makeCase);\n\n    cases.push(...fullF16Range().map(makeCase));\n\n    return cases;\n  },\n  f32_non_const: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, quantizeToF16Interval);\n    };\n\n    const cases = [\n      kValue.f16.negative.min,\n      kValue.f16.negative.max,\n      kValue.f16.subnormal.negative.min,\n      kValue.f16.subnormal.negative.max,\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.subnormal.positive.max,\n      kValue.f16.positive.min,\n      kValue.f16.positive.max,\n    ].map(makeCase);\n\n    cases.push(...fullF32Range().map(makeCase));\n\n    return cases;\n  },\n});\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('quantizeToF16'), [TypeF32], TypeF32, t.params, cases);\n  });\n"],"file":"quantizeToF16.spec.js"}