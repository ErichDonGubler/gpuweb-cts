{"version":3,"file":"quantizeToF16.spec.js","names":["description","makeTestGroup","GPUTest","kValue","TypeF32","quantizeToF16Interval","fullF16Range","fullF32Range","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32_const","makeCase","x","cases","f16","negative","min","max","subnormal","positive","map","push","f32_non_const","test","specURL","desc","params","u","combine","undefined","fn","t","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quantizeToF16.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'quantizeToF16' builtin function\n\nT is f32 or vecN<f32>\n@const fn quantizeToF16(e: T ) -> T\nQuantizes a 32-bit floating point value e as if e were converted to a IEEE 754\nbinary16 value, and then converted back to a IEEE 754 binary32 value.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { quantizeToF16Interval } from '../../../../../util/f32_interval.js';\nimport { fullF16Range, fullF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('quantizeToF16', {\n  f32_const: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, quantizeToF16Interval);\n    };\n\n    const cases = [\n      kValue.f16.negative.min,\n      kValue.f16.negative.max,\n      kValue.f16.subnormal.negative.min,\n      kValue.f16.subnormal.negative.max,\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.subnormal.positive.max,\n      kValue.f16.positive.min,\n      kValue.f16.positive.max,\n    ].map(makeCase);\n\n    cases.push(...fullF16Range().map(makeCase));\n\n    return cases;\n  },\n  f32_non_const: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, quantizeToF16Interval);\n    };\n\n    const cases = [\n      kValue.f16.negative.min,\n      kValue.f16.negative.max,\n      kValue.f16.subnormal.negative.min,\n      kValue.f16.subnormal.negative.max,\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.subnormal.positive.max,\n      kValue.f16.positive.min,\n      kValue.f16.positive.max,\n    ].map(makeCase);\n\n    cases.push(...fullF32Range().map(makeCase));\n\n    return cases;\n  },\n});\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get(t.params.inputSource === 'const' ? 'f32_const' : 'f32_non_const');\n    await run(t, builtin('quantizeToF16'), [TypeF32], TypeF32, t.params, cases);\n  });\n"],"mappings":"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"}