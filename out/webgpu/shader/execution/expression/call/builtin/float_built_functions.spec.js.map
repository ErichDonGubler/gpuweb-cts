{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/float_built_functions.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","unimplemented"],"mappings":"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","sourcesContent":["export const description = `WGSL execution test. Section: Float built-in functions`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,acos')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nacos:\nT is f32 or vecN<f32> acos(e: T ) -> T Returns the arc cosine of e. Component-wise when T is a vector. (GLSLstd450Acos)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,asin')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nasin:\nT is f32 or vecN<f32> asin(e: T ) -> T Returns the arc sine of e. Component-wise when T is a vector. (GLSLstd450Asin)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,cosh')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ncosh:\nT is f32 or vecN<f32> cosh(e: T ) -> T Returns the hyperbolic cosine of e. Component-wise when T is a vector (GLSLstd450Cosh)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,vector_case_cross')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nvector case, cross:\nT is f32 cross(e1: vec3<T> ,e2: vec3<T>) -> vec3<T> Returns the cross product of e1 and e2. (GLSLstd450Cross)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,distance')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ndistance:\nT is f32 or vecN<f32> distance(e1: T ,e2: T ) -> f32 Returns the distance between e1 and e2 (e.g. length(e1-e2)). (GLSLstd450Distance)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,exp')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nexp:\nT is f32 or vecN<f32> exp(e1: T ) -> T Returns the natural exponentiation of e1 (e.g. ee1). Component-wise when T is a vector. (GLSLstd450Exp)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,exp2')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nexp2:\nT is f32 or vecN<f32> exp2(e: T ) -> T Returns 2 raised to the power e (e.g. 2e). Component-wise when T is a vector. (GLSLstd450Exp2)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,faceForward')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nfaceForward:\nT is vecN<f32> faceForward(e1: T ,e2: T ,e3: T ) -> T Returns e1 if dot(e2,e3) is negative, and -e1 otherwise. (GLSLstd450FaceForward)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,fma')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nfma:\nT is f32 or vecN<f32> fma(e1: T ,e2: T ,e3: T ) -> T Returns e1 * e2 + e3. Component-wise when T is a vector. (GLSLstd450Fma)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,scalar_case_frexp')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nscalar case, frexp:\nT is f32 frexp(e:T) -> _frexp_result Splits e into a significand and exponent of the form significand * 2exponent. Returns the _frexp_result built-in structure, defined as: struct _frexp_result { sig : f32; // significand part exp : i32; // exponent part\n}; The magnitude of the significand is in the range of [0.5, 1.0) or 0. Note: A value cannot be explicitly declared with the type _frexp_result, but a value may infer the type. (GLSLstd450FrexpStruct)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,vector_case_frexp')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nvector case, frexp:\nT is vecN<f32> frexp(e:T) -> _frexp_result_vecN Splits the components of e into a significand and exponent of the form significand * 2exponent. Returns the _frexp_result_vecN built-in structure, defined as: struct _frexp_result_vecN { sig : vecN<f32>; // significand part exp : vecN<i32>; // exponent part\n}; The magnitude of each component of the significand is in the range of [0.5, 1.0) or 0. Note: A value cannot be explicitly declared with the type _frexp_result_vecN, but a value may infer the type. (GLSLstd450FrexpStruct)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,inverseSqrt')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ninverseSqrt:\nT is f32 or vecN<f32> inverseSqrt(e: T ) -> T Returns the reciprocal of sqrt(e). Component-wise when T is a vector. (GLSLstd450InverseSqrt)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,length')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nlength:\nT is f32 or vecN<f32> length(e: T ) -> f32 Returns the length of e (e.g. abs(e) if T is a scalar, or sqrt(e[0]2 + e[1]2 + ...) if T is a vector). (GLSLstd450Length)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,mix_all_same_type_operands')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nmix all same type operands:\nT is f32 or vecN<f32> mix(e1: T ,e2: T ,e3: T) -> T Returns the linear blend of e1 and e2 (e.g. e1*(1-e3)+e2*e3). Component-wise when T is a vector. (GLSLstd450FMix)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,vector_mix_with_scalar_blending_factor')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nvector mix with scalar blending factor:\nT is vecN<f32> mix(e1: T ,e2: T ,e3: f32 ) -> T Returns the component-wise linear blend of e1 and e2, using scalar blending factor e3 for each component. Same as mix(e1,e2,T(e3)).\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,scalar_case_modf')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nscalar case, modf:\nT is f32 modf(e:T) -> _modf_result Splits e into fractional and whole number parts. Returns the _modf_result built-in structure, defined as: struct _modf_result { fract : f32; // fractional part whole : f32; // whole part\n}; Note: A value cannot be explicitly declared with the type _modf_result, but a value may infer the type. (GLSLstd450ModfStruct)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,vector_case_modf')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nvector case, modf:\nT is vecN<f32> modf(e:T) -> _modf_result_vecN Splits the components of e into fractional and whole number parts. Returns the _modf_result_vecN built-in structure, defined as: struct _modf_result_vecN { fract : vecN<f32>; // fractional part whole : vecN<f32>; // whole part\n}; Note: A value cannot be explicitly declared with the type _modf_result_vecN, but a value may infer the type. (GLSLstd450ModfStruct)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,vector_case_normalize')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nvector case, normalize:\nT is f32 normalize(e: vecN<T> ) -> vecN<T> Returns a unit vector in the same direction as e. (GLSLstd450Normalize)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,pow')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\npow:\nT is f32 or vecN<f32> pow(e1: T ,e2: T ) -> T Returns e1 raised to the power e2. Component-wise when T is a vector. (GLSLstd450Pow)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,quantize_to_f16')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nquantize to f16:\nT is f32 or vecN<f32> quantizeToF16(e: T ) -> T Quantizes a 32-bit floating point value e as if e were converted to a IEEE 754 binary16 value, and then converted back to a IEEE 754 binary32 value. See section 12.5.2 Floating point conversion. Component-wise when T is a vector. Note: The vec2<f32> case is the same as unpack2x16float(pack2x16float(e)). (OpQuantizeToF16)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,reflect')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nreflect:\nT is vecN<f32> reflect(e1: T ,e2: T ) -> T For the incident vector e1 and surface orientation e2, returns the reflection direction e1-2*dot(e2,e1)*e2. (GLSLstd450Reflect)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,refract')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nrefract:\nT is vecN<f32>I is f32 refract(e1: T ,e2: T ,e3: I ) -> T For the incident vector e1 and surface normal e2, and the ratio of indices of refraction e3, let k = 1.0 -e3*e3* (1.0 - dot(e2,e1) * dot(e2,e1)). If k < 0.0, returns the refraction vector 0.0, otherwise return the refraction vector e3*e1- (e3* dot(e2,e1) + sqrt(k)) *e2. (GLSLstd450Refract)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,round')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nround:\nT is f32 or vecN<f32> round(e: T ) -> T Result is the integer k nearest to e, as a floating point value. When e lies halfway between integers k and k+1, the result is k when k is even, and k+1 when k is odd. Component-wise when T is a vector. (GLSLstd450RoundEven)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,float_sign')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nfloat sign:\nT is f32 or vecN<f32> sign(e: T ) -> T Returns the sign of e. Component-wise when T is a vector. (GLSLstd450FSign)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,sinh')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nsinh:\nT is f32 or vecN<f32> sinh(e: T ) -> T Returns the hyperbolic sine of e. Component-wise when T is a vector. (GLSLstd450Sinh)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,smoothStep')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nsmoothStep:\nT is f32 or vecN<f32> smoothStep(e1: T ,e2: T ,e3: T ) -> T Returns the smooth Hermite interpolation between 0 and 1. Component-wise when T is a vector. (GLSLstd450SmoothStep)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,sqrt')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nsqrt:\nT is f32 or vecN<f32> sqrt(e: T ) -> T Returns the square root of e. Component-wise when T is a vector. (GLSLstd450Sqrt)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,step')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nstep:\nT is f32 or vecN<f32> step(e1: T ,e2: T ) -> T Returns 0.0 if e1 is less than e2, and 1.0 otherwise. Component-wise when T is a vector. (GLSLstd450Step)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,tan')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ntan:\nT is f32 or vecN<f32> tan(e: T ) -> T Returns the tangent of e. Component-wise when T is a vector. (GLSLstd450Tan)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,tanh')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ntanh:\nT is f32 or vecN<f32> tanh(e: T ) -> T Returns the hyperbolic tangent of e. Component-wise when T is a vector. (GLSLstd450Tanh)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n\ng.test('float_builtin_functions,trunc')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ntrunc:\nT is f32 or vecN<f32> trunc(e: T ) -> T Returns the nearest whole number whose absolute value is less than or equal to e. Component-wise when T is a vector. (GLSLstd450Trunc)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n"],"file":"float_built_functions.spec.js"}