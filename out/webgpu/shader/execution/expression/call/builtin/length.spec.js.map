{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/length.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","lengthInterval","fullF32Range","kVectorTestValues","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","makeVectorToF32IntervalCase","run","builtin","g","d","f32","makeCase","x","map","f32_vec2","makeCaseVecF32","f32_vec3","f32_vec4","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'length' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn length(e: T ) -> f32\nReturns the length of e (e.g. abs(e) if T is a scalar, or sqrt(e[0]^2 + e[1]^2 + ...) if T is a vector).\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { lengthInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, kVectorTestValues } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport {\n  allInputSources,\n  Case,\n  makeUnaryToF32IntervalCase,\n  makeVectorToF32IntervalCase,\n  run,\n} from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('length', {\n  f32: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, lengthInterval);\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_vec2: () => {\n    return kVectorTestValues[2].map(makeCaseVecF32);\n  },\n  f32_vec3: () => {\n    return kVectorTestValues[3].map(makeCaseVecF32);\n  },\n  f32_vec4: () => {\n    return kVectorTestValues[4].map(makeCaseVecF32);\n  },\n});\n\n/** @returns a `length` Case for a vector of f32s input */\nconst makeCaseVecF32 = (x: number[]): Case => {\n  return makeVectorToF32IntervalCase(x, lengthInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('length'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2');\n    await run(t, builtin('length'), [TypeVec(2, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3');\n    await run(t, builtin('length'), [TypeVec(3, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4');\n    await run(t, builtin('length'), [TypeVec(4, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"length.spec.js"}