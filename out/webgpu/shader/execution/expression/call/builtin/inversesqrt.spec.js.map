{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/inversesqrt.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpThreshold","kBit","kValue","f32","f32Bits","TypeF32","biasedRange","linearRange","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","input","expected","Math","sqrt","cases","infinity","positive","min","map","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,kCAA7B;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,QAAsC,mCAAtC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,6BAAzC;AACA,SAAuBC,GAAvB,QAAkC,qBAAlC;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGZ,aAAa,CAACC,OAAD,CAAvB;;AAEPW,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,sEADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA,CANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CATJ;;AAaGC,EAbH,CAaM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAO,EAAEC,KAAK,EAAEnB,GAAG,CAACkB,CAAD,CAAZ,EAAiBE,QAAQ,EAAEpB,GAAG,CAAC,IAAIqB,IAAI,CAACC,IAAL,CAAUJ,CAAV,CAAL,CAA9B,EAAP;AACD,GAFD;;AAIA;AACA,QAAMK,KAAkB,GAAG;AACzB,IAAEJ,KAAK,EAAElB,OAAO,CAACH,IAAI,CAACE,GAAL,CAASwB,QAAT,CAAkBC,QAAnB,CAAhB,EAA8CL,QAAQ,EAAEpB,GAAG,CAAC,CAAD,CAA3D,EADyB;AAEzB,IAAEmB,KAAK,EAAEnB,GAAG,CAAC,CAAD,CAAZ,EAAiBoB,QAAQ,EAAEpB,GAAG,CAAC,CAAD,CAA9B,EAFyB;AAGzB;AACA,KAAGI,WAAW,CAACL,MAAM,CAACC,GAAP,CAAWyB,QAAX,CAAoBC,GAArB,EAA0B,CAA1B,EAA6B,GAA7B,CAAX,CAA6CC,GAA7C,CAAiD,CAAAT,CAAC,KAAID,QAAQ,CAACC,CAAD,CAA9D,CAJsB;AAKzB;AACA,KAAGf,WAAW,CAAC,CAAD,EAAI,KAAK,EAAT,EAAa,IAAb,CAAX,CAA8BwB,GAA9B,CAAkC,CAAAT,CAAC,KAAID,QAAQ,CAACC,CAAD,CAA/C,CANsB,CAA3B;;;AASA,QAAMU,GAAW,GAAGZ,CAAC,CAACL,MAAtB;AACAiB,EAAAA,GAAG,CAACC,SAAJ,GAAgBhC,YAAY,CAAC,CAAD,CAA5B;AACAQ,EAAAA,GAAG,CAACW,CAAD,EAAIV,OAAO,CAAC,aAAD,CAAX,EAA4B,CAACJ,OAAD,CAA5B,EAAuCA,OAAvC,EAAgD0B,GAAhD,EAAqDL,KAArD,CAAH;AACD,CAhCH","sourcesContent":["export const description = `\nExecution Tests for the 'inverseSqrt' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpThreshold } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ninverseSqrt:\nT is f32 or vecN<f32> inverseSqrt(e: T ) -> T Returns the reciprocal of sqrt(e). Component-wise when T is a vector. (GLSLstd450InverseSqrt)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return { input: f32(x), expected: f32(1 / Math.sqrt(x)) };\n    };\n\n    // Well defined cases\n    const cases: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(0) },\n      { input: f32(1), expected: f32(1) },\n      // 0 < x <= 1 linearly spread\n      ...linearRange(kValue.f32.positive.min, 1, 100).map(x => makeCase(x)),\n      // 1 <= x < 2^32, biased towards 1\n      ...biasedRange(1, 2 ** 32, 1000).map(x => makeCase(x)),\n    ];\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(2);\n    run(t, builtin('inverseSqrt'), [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"inversesqrt.spec.js"}