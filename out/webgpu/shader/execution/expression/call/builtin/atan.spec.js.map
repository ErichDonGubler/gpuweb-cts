{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","atanInterval","fullF32Range","makeCaseCache","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","d","f32","makeCase","x","Number","NEGATIVE_INFINITY","Math","sqrt","POSITIVE_INFINITY","map","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO,CAUP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,YAAT,QAA6B,qCAA7B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,qBAAvE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACC,OAAD,CAAvB;;AAEP,OAAO,MAAMU,CAAC,GAAGN,aAAa,CAAC,MAAD,EAAS;AACrCO,EAAAA,GAAG,EAAE,MAAM;AACT,UAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,aAAOP,0BAA0B,CAACO,CAAD,EAAIX,YAAJ,CAAjC;AACD,KAFD;;AAIA,WAAO;AACL;AACAY,IAAAA,MAAM,CAACC,iBAFF;AAGL,KAACC,IAAI,CAACC,IAAL,CAAU,CAAV,CAHI;AAIL,KAAC,CAJI;AAKL,KAAC,CAAD,GAAKD,IAAI,CAACC,IAAL,CAAU,CAAV,CALA;AAML,KANK;AAOL,KAPK;AAQL,QAAID,IAAI,CAACC,IAAL,CAAU,CAAV,CARC;AASLD,IAAAA,IAAI,CAACC,IAAL,CAAU,CAAV,CATK;AAULH,IAAAA,MAAM,CAACI,iBAVF;;AAYL,OAAGf,YAAY,EAZV;AAaLgB,IAAAA,GAbK,CAaD,CAAAN,CAAC,KAAID,QAAQ,CAACC,CAAD,CAbZ,CAAP;AAcD,GApBoC,EAAT,CAAvB;;;AAuBPJ,CAAC,CAACW,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBpB,eAAzB,EAA0CoB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAlB,CAAC,CAACW,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBpB,eAAzB,EAA0CoB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAVJ;;AAYGE,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG,MAAMpB,CAAC,CAACqB,GAAF,CAAM,KAAN,CAApB;AACA,QAAMxB,GAAG,CAACsB,CAAD,EAAIrB,OAAO,CAAC,MAAD,CAAX,EAAqB,CAACP,OAAD,CAArB,EAAgCA,OAAhC,EAAyC4B,CAAC,CAACN,MAA3C,EAAmDO,KAAnD,CAAT;AACD,CAfH;;AAiBArB,CAAC,CAACW,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBpB,eAAzB,EAA0CoB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'atan' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn atan(e: T ) -> T\nReturns the arc tangent of e. Component-wise when T is a vector.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { atanInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('atan', {\n  f32: () => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, atanInterval);\n    };\n\n    return [\n      // Known values\n      Number.NEGATIVE_INFINITY,\n      -Math.sqrt(3),\n      -1,\n      -1 / Math.sqrt(3),\n      0,\n      1,\n      1 / Math.sqrt(3),\n      Math.sqrt(3),\n      Number.POSITIVE_INFINITY,\n\n      ...fullF32Range(),\n    ].map(x => makeCase(x));\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('atan'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atan.spec.js"}