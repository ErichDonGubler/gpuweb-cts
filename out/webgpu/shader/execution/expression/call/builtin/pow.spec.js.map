{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pow.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","powInterval","fullF32Range","makeCaseCache","allInputSources","makeBinaryToF32IntervalCase","run","builtin","g","d","f32","makeCase","x","y","cases","numeric_range","forEach","push","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,eAAT,EAAgCC,2BAAhC,EAA6DC,GAA7D,QAAwE,qBAAxE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACC,OAAD,CAAvB;;AAEP,OAAO,MAAMU,CAAC,GAAGN,aAAa,CAAC,KAAD,EAAQ;AACpCO,EAAAA,GAAG,EAAE,MAAM;AACT,UAAMC,QAAQ,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAAgC;AAC/C,aAAOR,2BAA2B,CAACO,CAAD,EAAIC,CAAJ,EAAOZ,WAAP,CAAlC;AACD,KAFD;;AAIA,UAAMa,KAAkB,GAAG,EAA3B;AACA,UAAMC,aAAa,GAAGb,YAAY,EAAlC;AACAa,IAAAA,aAAa,CAACC,OAAd,CAAsB,CAAAJ,CAAC,KAAI;AACzBG,MAAAA,aAAa,CAACC,OAAd,CAAsB,CAAAH,CAAC,KAAI;AACzBC,QAAAA,KAAK,CAACG,IAAN,CAAWN,QAAQ,CAACC,CAAD,EAAIC,CAAJ,CAAnB;AACD,OAFD;AAGD,KAJD;;AAMA,WAAOC,KAAP;AACD,GAfmC,EAAR,CAAvB;;;AAkBPN,CAAC,CAACU,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBnB,eAAzB,EAA0CmB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAjB,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBnB,eAAzB,EAA0CmB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMb,KAAK,GAAG,MAAML,CAAC,CAACmB,GAAF,CAAM,KAAN,CAApB;AACA,QAAMtB,GAAG,CAACqB,CAAD,EAAIpB,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACP,OAAD,EAAUA,OAAV,CAApB,EAAwCA,OAAxC,EAAiD2B,CAAC,CAACN,MAAnD,EAA2DP,KAA3D,CAAT;AACD,CATH;;AAWAN,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBnB,eAAzB,EAA0CmB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'pow' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn pow(e1: T ,e2: T ) -> T\nReturns e1 raised to the power e2. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { powInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('pow', {\n  f32: () => {\n    const makeCase = (x: number, y: number): Case => {\n      return makeBinaryToF32IntervalCase(x, y, powInterval);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(x => {\n      numeric_range.forEach(y => {\n        cases.push(makeCase(x, y));\n      });\n    });\n\n    return cases;\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('pow'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"pow.spec.js"}