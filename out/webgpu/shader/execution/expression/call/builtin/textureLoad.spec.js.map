{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureLoad.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'textureLoad' builtin function\n\nReads a single texel from a texture without sampling or filtering.\n\nReturns the unfiltered texel data.\n\nAn out of bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t, level)) for the corresponding element, or\n * array_index is outside the range [0, textureNumLayers(t)), or\n * level is outside the range [0, textureNumLevels(t))\n\nIf an out of bounds access occurs, the built-in function returns one of:\n * The data for some texel within bounds of the texture\n * A vector (0,0,0,0) or (0,0,0,1) of the appropriate type for non-depth textures\n * 0.0 for depth textures\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_1d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_1d<T>, coords: C, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', [-1, 0, `dimension-1`, `dimension`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_2d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d<T>, coords: vec2<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_3d')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_3d<T>, coords: vec3<C>, level: C) -> vec4<T>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_2', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('multisampled')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_multisampled_2d<T>, coords: vec2<C>, sample_index: C)-> vec4<T>\nfn textureLoad(t: texture_depth_multisampled_2d, coords: vec2<C>, sample_index: C)-> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * sample_index: The 0-based sample index of the multisampled texture\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_multisampled_2d',\n        'texture_depth_multisampled_2d',\n      ] as const)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('sample_index', [-1, 0, `sampleCount-1`, `sampleCount`] as const)\n  )\n  .unimplemented();\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_depth_2d, coords: vec2<C>, level: C) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_external, coords: vec2<C>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n`\n  )\n  .params(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n  )\n  .unimplemented();\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#textureload')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureLoad(t: texture_2d_array<T>, coords: vec2<C>, array_index: C, level: C) -> vec4<T>\nfn textureLoad(t: texture_depth_2d_array, coords: vec2<C>, array_index: C, level: C) -> f32\n\nParameters:\n * t: The sampled texture to read from\n * coords: The 0-based texel coordinate\n * array_index: The 0-based texture array index\n * level: The mip level, with level 0 containing a full size version of the texture\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_2d_array', 'texture_depth_2d_array'] as const)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords_0', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('coords_1', [-1, 0, `dimensions-1`, `dimension`] as const)\n      .combine('array_index', [-1, 0, `numlayers-1`, `numlayers`] as const)\n      .combine('level', [-1, 0, `numlevels-1`, `numlevels`] as const)\n  )\n  .unimplemented();\n"],"file":"textureLoad.spec.js"}