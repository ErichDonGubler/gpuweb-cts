{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/step.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","f32","TypeF32","F32Interval","stepInterval","fullF32Range","quantizeToF32","makeCaseCache","allInputSources","run","builtin","g","d","zeroInterval","oneInterval","makeCase","edge","x","expected","isPoint","isFinite","input","range","cases","forEach","push","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","get"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'step' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn step(edge: T ,x: T ) -> T\nReturns 1.0 if edge ≤ x, and 0.0 otherwise. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf } from '../../../../../util/compare.js';\nimport { f32, TypeF32 } from '../../../../../util/conversion.js';\nimport { F32Interval, stepInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, quantizeToF32 } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('step', {\n  f32: () => {\n    const zeroInterval = new F32Interval(0, 0);\n    const oneInterval = new F32Interval(1, 1);\n\n    // stepInterval's return value isn't always interpreted as an acceptance\n    // interval, so makeBinaryToF32IntervalCase cannot be used here.\n    // See the comment block on stepInterval for more details\n    const makeCase = (edge: number, x: number): Case => {\n      edge = quantizeToF32(edge);\n      x = quantizeToF32(x);\n      const expected = stepInterval(edge, x);\n\n      // [0, 0], [1, 1], or [-∞, +∞] cases\n      if (expected.isPoint() || !expected.isFinite()) {\n        return { input: [f32(edge), f32(x)], expected };\n      }\n\n      // [0, 1] case\n      return {\n        input: [f32(edge), f32(x)],\n        expected: anyOf(zeroInterval, oneInterval),\n      };\n    };\n\n    const range = fullF32Range();\n    const cases: Array<Case> = [];\n    range.forEach(edge => {\n      range.forEach(x => {\n        cases.push(makeCase(edge, x));\n      });\n    });\n\n    return cases;\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = await d.get('f32');\n    await run(t, builtin('step'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"step.spec.js"}