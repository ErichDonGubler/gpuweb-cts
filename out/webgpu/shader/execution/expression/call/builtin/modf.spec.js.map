{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","toVector","TypeF32","TypeVec","modfInterval","fullF32Range","quantizeToF32","vectorTestValues","makeCaseCache","allInputSources","run","g","wholeBuilder","value","fractBuilder","makeVectorCaseFract","v","map","fs","e","fract","input","expected","makeVectorCaseWhole","ws","whole","d","f32_fract","makeCase","n","f32_whole","f32_vec2_fract","f32_vec2_whole","f32_vec3_fract","f32_vec3_whole","f32_vec4_fract","f32_vec4_whole","test","specURL","desc","params","u","combine","fn","t","cases","get","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'modf' builtin function\n\nT is f32 or f16\n@const fn modf(e:T) -> result_struct\nSplits |e| into fractional and whole number parts.\nThe whole part is (|e| % 1.0), and the fractional part is |e| minus the whole part.\nReturns the result_struct for the given type.\n\nS is f32 or f16\nT is vecN<S>\n@const fn modf(e:T) -> result_struct\nSplits the components of |e| into fractional and whole number parts.\nThe |i|'th component of the whole and fractional parts equal the whole and fractional parts of modf(e[i]).\nReturns the result_struct for the given type.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, toVector, TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { modfInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, quantizeToF32, vectorTestValues } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, ExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/* @returns an ExpressionBuilder that evaluates modf and returns .whole from the result structure */\nfunction wholeBuilder(): ExpressionBuilder {\n  return value => `modf(${value}).whole`;\n}\n\n/* @returns an ExpressionBuilder that evaluates modf and returns .fract from the result structure */\nfunction fractBuilder(): ExpressionBuilder {\n  return value => `modf(${value}).fract`;\n}\n\n/* @returns a fract Case for a given vector input */\nfunction makeVectorCaseFract(v: number[]): Case {\n  v = v.map(quantizeToF32);\n  const fs = v.map(e => {\n    return modfInterval(e).fract;\n  });\n\n  return { input: toVector(v, f32), expected: fs };\n}\n\n/* @returns a fract Case for a given vector input */\nfunction makeVectorCaseWhole(v: number[]): Case {\n  v = v.map(quantizeToF32);\n  const ws = v.map(e => {\n    return modfInterval(e).whole;\n  });\n\n  return { input: toVector(v, f32), expected: ws };\n}\n\nexport const d = makeCaseCache('modf', {\n  f32_fract: () => {\n    const makeCase = (n: number): Case => {\n      n = quantizeToF32(n);\n      return { input: f32(n), expected: modfInterval(n).fract };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_whole: () => {\n    const makeCase = (n: number): Case => {\n      n = quantizeToF32(n);\n      return { input: f32(n), expected: modfInterval(n).whole };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_vec2_fract: () => {\n    return vectorTestValues(2, true).map(makeVectorCaseFract);\n  },\n  f32_vec2_whole: () => {\n    return vectorTestValues(2, true).map(makeVectorCaseWhole);\n  },\n  f32_vec3_fract: () => {\n    return vectorTestValues(3, true).map(makeVectorCaseFract);\n  },\n  f32_vec3_whole: () => {\n    return vectorTestValues(3, true).map(makeVectorCaseWhole);\n  },\n  f32_vec4_fract: () => {\n    return vectorTestValues(4, true).map(makeVectorCaseFract);\n  },\n  f32_vec4_whole: () => {\n    return vectorTestValues(4, true).map(makeVectorCaseWhole);\n  },\n});\n\ng.test('f32_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_fract');\n    await run(t, fractBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_whole');\n    await run(t, wholeBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_fract');\n    await run(t, fractBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_whole');\n    await run(t, wholeBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_fract');\n    await run(t, fractBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_whole');\n    await run(t, wholeBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_fract');\n    await run(t, fractBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_whole');\n    await run(t, wholeBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f16_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n"],"file":"modf.spec.js"}