{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureGatherCompare.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","undefined","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,CAkBP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,OADH,CACW,kDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBA;;AAwBGC,MAxBH,CAwBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,wBAAD,EAA2B,0BAA3B,CAD3B;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,KAAD,EAAQ,KAAR,CAFhB;AAGGA,OAHH,CAGW,SAHX,EAGsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAHtB;AAIGA,OAJH,CAIW,QAJX,EAIqB;AACjB,0BAA2B,CAAC,CAAD,EAAI,CAAJ,CADV;AAEjB,CAAC,KAAD,EAAQ,KAAR,CAFiB,CAEF,4BAFE,CAJrB;;AAQGA,OARH,CAQW,WARX,EAQwB,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,CAAvB,CAAyB,eAAzB,EAA0C,CAA1C,CAA4C,gBAA5C,CARxB;AASGA,OATH,CASW,QATX,EASqB,CAACC,SAAD,EAAY,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAZ,EAAsB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAtB,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,EAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC,EAAgD,CAAC,CAAD,EAAI,CAAJ,CAAhD,EAAwD,CAAC,CAAD,EAAI,CAAJ,CAAxD,CATrB,CAzBJ;;AAoCGC,aApCH;;AAsCAR,CAAC,CAACC,IAAF,CAAO,eAAP;AACGC,OADH,CACW,kDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;;AAqBGC,MArBH,CAqBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,kBAAD,EAAqB,oBAArB,CAD3B;AAEGA,OAFH,CAEW,QAFX,EAEqB;AACjB,0BAA2B,CAAC,CAAD,EAAI,CAAJ,CADV;AAEjB,CAAC,KAAD,EAAQ,KAAR,CAFiB,CAEF,4BAFE,CAFrB;;AAMGA,OANH,CAMW,WANX,EAMwB,CAAC,CAAC,CAAF,CAAI,iBAAJ,EAAuB,CAAvB,CAAyB,eAAzB,EAA0C,CAA1C,CAA4C,gBAA5C,CANxB;AAOGA,OAPH,CAOW,QAPX,EAOqB,CAACC,SAAD,EAAY,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAZ,EAAsB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,CAAtB,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,EAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC,EAAgD,CAAC,CAAD,EAAI,CAAJ,CAAhD,EAAwD,CAAC,CAAD,EAAI,CAAJ,CAAxD,CAPrB,CAtBJ;;AA+BGC,aA/BH","sourcesContent":["export const description = `\nExecution tests for the 'textureGatherCompare' builtin function\n\nA texture gather compare operation performs a depth comparison on four texels in a depth texture and collects the results into a single vector, as follows:\n * Find the four texels that would be used in a depth sampling operation with linear filtering, from mip level 0:\n   - Use the specified coordinate, array index (when present), and offset (when present).\n   - The texels are adjacent, forming a square, when considering their texture space coordinates (u,v).\n   - Selected texels at the texture edge, cube face edge, or cube corners are handled as in ordinary texture sampling.\n * For each texel, perform a comparison against the depth reference value, yielding a 0.0 or 1.0 value, as controlled by the comparison sampler parameters.\n * Yield the four-component vector where the components are the comparison results with the texels with relative texel coordinates as follows:\n\n   Result component  Relative texel coordinate\n    x                (umin,vmax)\n    y                (umax,vmax)\n    z                (umax,vmin)\n    w                (umin,vmin)\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('array')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nC: i32, u32\n\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: C, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * array_index: The 0-based array index.\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_depth_2d_array', 'texture_depth_cube_array'] as const)\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4])\n      .combine('coords', [\n        /* less then min value, */ [0, 0],\n        ['max', 'max'] /* greater then max value */,\n      ] as const)\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', [undefined, [-9, -9], [-8, -8], [0, 0], [1, 2], [7, 7], [8, 8]] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_array')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegathercompare')\n  .desc(\n    `\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> vec4<f32>\nfn textureGatherCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler_comparison\n * coords: The texture coordinates\n * depth_ref: The reference value to compare the sampled depth value against\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_depth_2d', 'texture_depth_cube'])\n      .combine('coords', [\n        /* less then min value, */ [0, 0],\n        ['max', 'max'] /* greater then max value */,\n      ] as const)\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', [undefined, [-9, -9], [-8, -8], [0, 0], [1, 2], [7, 7], [8, 8]] as const)\n  )\n  .unimplemented();\n"],"file":"textureGatherCompare.spec.js"}