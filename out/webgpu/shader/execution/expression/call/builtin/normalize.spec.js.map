{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/normalize.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","normalizeInterval","kVectorTestValues","makeCaseCache","allInputSources","makeVectorToVectorIntervalCase","run","builtin","g","d","f32_vec2","map","makeCaseVecF32","f32_vec3","f32_vec4","x","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cases","get"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,mCAAjC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,iBAAT,QAAkC,6BAAlC;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,eAAT,EAAgCC,8BAAhC,EAAgEC,GAAhE,QAA2E,qBAA3E;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEP,OAAO,MAAMW,CAAC,GAAGN,aAAa,CAAC,WAAD,EAAc;AAC1CO,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAOR,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,GAArB,CAAyBC,cAAzB,CAAP;AACD,GAHyC;AAI1CC,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAOX,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,GAArB,CAAyBC,cAAzB,CAAP;AACD,GANyC;AAO1CE,EAAAA,QAAQ,EAAE,MAAM;AACd,WAAOZ,iBAAiB,CAAC,CAAD,CAAjB,CAAqBS,GAArB,CAAyBC,cAAzB,CAAP;AACD,GATyC,EAAd,CAAvB;;;AAYP;AACA,MAAMA,cAAc,GAAG,CAACG,CAAD,KAAuB;AAC5C,SAAOV,8BAA8B,CAACU,CAAD,EAAId,iBAAJ,CAArC;AACD,CAFD;;AAIAO,CAAC,CAACQ,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBjB,eAAzB,EAA0CiB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAf,CAAC,CAACQ,IAAF,CAAO,UAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,uBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBjB,eAAzB,CAHf;AAIGoB,EAJH,CAIM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG,MAAMjB,CAAC,CAACkB,GAAF,CAAM,UAAN,CAApB;AACA,QAAMrB,GAAG,CAACmB,CAAD,EAAIlB,OAAO,CAAC,WAAD,CAAX,EAA0B,CAACP,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAR,CAA1B,EAAiDC,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAxD,EAAsE0B,CAAC,CAACN,MAAxE,EAAgFO,KAAhF,CAAT;AACD,CAPH;;AASAlB,CAAC,CAACQ,IAAF,CAAO,UAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,uBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBjB,eAAzB,CAHf;AAIGoB,EAJH,CAIM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG,MAAMjB,CAAC,CAACkB,GAAF,CAAM,UAAN,CAApB;AACA,QAAMrB,GAAG,CAACmB,CAAD,EAAIlB,OAAO,CAAC,WAAD,CAAX,EAA0B,CAACP,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAR,CAA1B,EAAiDC,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAxD,EAAsE0B,CAAC,CAACN,MAAxE,EAAgFO,KAAhF,CAAT;AACD,CAPH;;AASAlB,CAAC,CAACQ,IAAF,CAAO,UAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,uBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBjB,eAAzB,CAHf;AAIGoB,EAJH,CAIM,OAAMC,CAAN,KAAW;AACb,QAAMC,KAAK,GAAG,MAAMjB,CAAC,CAACkB,GAAF,CAAM,UAAN,CAApB;AACA,QAAMrB,GAAG,CAACmB,CAAD,EAAIlB,OAAO,CAAC,WAAD,CAAX,EAA0B,CAACP,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAR,CAA1B,EAAiDC,OAAO,CAAC,CAAD,EAAID,OAAJ,CAAxD,EAAsE0B,CAAC,CAACN,MAAxE,EAAgFO,KAAhF,CAAT;AACD,CAPH;;AASAlB,CAAC,CAACQ,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBjB,eAAzB,EAA0CiB,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'normalize' builtin function\n\nT is AbstractFloat, f32, or f16\n@const fn normalize(e: vecN<T> ) -> vecN<T>\nReturns a unit vector in the same direction as e.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { normalizeInterval } from '../../../../../util/f32_interval.js';\nimport { kVectorTestValues } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, makeVectorToVectorIntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nexport const d = makeCaseCache('normalize', {\n  f32_vec2: () => {\n    return kVectorTestValues[2].map(makeCaseVecF32);\n  },\n  f32_vec3: () => {\n    return kVectorTestValues[3].map(makeCaseVecF32);\n  },\n  f32_vec4: () => {\n    return kVectorTestValues[4].map(makeCaseVecF32);\n  },\n});\n\n/** @returns a `normalize` Case for a vector of f32s input */\nconst makeCaseVecF32 = (x: number[]): Case => {\n  return makeVectorToVectorIntervalCase(x, normalizeInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2');\n    await run(t, builtin('normalize'), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3');\n    await run(t, builtin('normalize'), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4');\n    await run(t, builtin('normalize'), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"normalize.spec.js"}