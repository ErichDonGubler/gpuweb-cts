{"version":3,"file":"atomicXor.spec.js","names":["description","makeTestGroup","keysOf","GPUTest","dispatchSizes","workgroupSizes","runStorageVariableTest","runWorkgroupVariableTest","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","Math","max","initValue","mapId","extra","wgsl","op","expected","Uint32Array","fill","id","i","f","floor","wgNumElements","d","wg","subarray"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicXor.spec.ts"],"sourcesContent":["export const description = `\nAtomically read, xor and store value.\n\n* Load the original value pointed to by atomic_ptr.\n* Obtains a new value by xor'ing with the value v.\n* Store the new value using atomic_ptr.\n\nReturns the original value stored in the atomic object.\n`;\n\nimport { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\nimport {\n  dispatchSizes,\n  workgroupSizes,\n  runStorageVariableTest,\n  runWorkgroupVariableTest,\n  kMapId,\n} from './harness.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('xor_storage')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicXor(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n\n    // Allocate an output buffer with bitsize of max invocations plus 1 for validation\n    const bufferNumElements = Math.max(1, numInvocations / 32) + 1;\n\n    // Start with all bits set to some random value for each u32 in the buffer, then atomicXor each mapped global id bit.\n    // Note: Both WGSL and JS will shift left 1 by id modulo 32.\n    const initValue = 0b11000011010110100000111100111100;\n\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations); // Defines map_id()\n    const op = `\n      let i = map_id(id);\n      atomicXor(&output[i / 32], 1u << i)\n    `;\n\n    const expected = new Uint32Array(bufferNumElements).fill(initValue);\n    for (let id = 0; id < numInvocations; ++id) {\n      const i = mapId.f(id, numInvocations);\n      expected[Math.floor(i / 32)] ^= 1 << i;\n    }\n\n    runStorageVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      bufferNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n\ng.test('xor_workgroup')\n  .specURL('https://www.w3.org/TR/WGSL/#atomic-rmw')\n  .desc(\n    `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicXor(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T) -> T\n`\n  )\n  .params(u =>\n    u\n      .combine('workgroupSize', workgroupSizes)\n      .combine('dispatchSize', dispatchSizes)\n      .combine('mapId', keysOf(kMapId))\n  )\n  .fn(t => {\n    const numInvocations = t.params.workgroupSize;\n\n    // Allocate workgroup array with bitsize of max invocations plus 1 for validation\n    const wgNumElements = Math.max(1, numInvocations / 32) + 1;\n\n    // Start with all bits set to some random value for each u32 in the buffer, then atomicXor each mapped global id bit.\n    // Note: Both WGSL and JS will shift left 1 by id modulo 32.\n    const initValue = 0b11000011010110100000111100111100;\n\n    const mapId = kMapId[t.params.mapId];\n    const extra = mapId.wgsl(numInvocations); // Defines map_id()\n    const op = `\n      let i = map_id(id);\n      atomicXor(&wg[i / 32], 1u << i)\n    `;\n\n    const expected = new Uint32Array(wgNumElements * t.params.dispatchSize).fill(initValue);\n    for (let d = 0; d < t.params.dispatchSize; ++d) {\n      for (let id = 0; id < numInvocations; ++id) {\n        const wg = expected.subarray(d * wgNumElements);\n        const i = mapId.f(id, numInvocations);\n        wg[Math.floor(i / 32)] ^= 1 << i;\n      }\n    }\n\n    runWorkgroupVariableTest({\n      t,\n      workgroupSize: t.params.workgroupSize,\n      dispatchSize: t.params.dispatchSize,\n      wgNumElements,\n      initValue,\n      op,\n      expected,\n      extra,\n    });\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,qDAAqD;AACnF,SAASC,MAAM,QAAQ,iDAAiD;AACxE,SAASC,OAAO,QAAQ,+BAA+B;;AAEvD;AACEC,aAAa;AACbC,cAAc;AACdC,sBAAsB;AACtBC,wBAAwB;AACxBC,MAAM;AACD,cAAc;;AAErB,OAAO,MAAMC,CAAC,GAAGR,aAAa,CAACE,OAAO,CAAC;;AAEvCM,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;AAClBC,OAAO,CAAC,wCAAwC,CAAC;AACjDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,eAAe,EAAEV,cAAc,CAAC;AACxCU,OAAO,CAAC,cAAc,EAAEX,aAAa,CAAC;AACtCW,OAAO,CAAC,OAAO,EAAEb,MAAM,CAACM,MAAM,CAAC,CAAC,CACpC;;AACAQ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,cAAc,GAAGD,CAAC,CAACJ,MAAM,CAACM,aAAa,GAAGF,CAAC,CAACJ,MAAM,CAACO,YAAY;;EAErE;EACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,cAAc,GAAG,EAAE,CAAC,GAAG,CAAC;;EAE9D;EACA;EACA,MAAMM,SAAS,GAAG,kCAAkC;;EAEpD,MAAMC,KAAK,GAAGjB,MAAM,CAACS,CAAC,CAACJ,MAAM,CAACY,KAAK,CAAC;EACpC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACT,cAAc,CAAC,CAAC,CAAC;EAC1C,MAAMU,EAAE,GAAI;AAChB;AACA;AACA,KAAK;;EAED,MAAMC,QAAQ,GAAG,IAAIC,WAAW,CAACT,iBAAiB,CAAC,CAACU,IAAI,CAACP,SAAS,CAAC;EACnE,KAAK,IAAIQ,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGd,cAAc,EAAE,EAAEc,EAAE,EAAE;IAC1C,MAAMC,CAAC,GAAGR,KAAK,CAACS,CAAC,CAACF,EAAE,EAAEd,cAAc,CAAC;IACrCW,QAAQ,CAACP,IAAI,CAACa,KAAK,CAACF,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAIA,CAAC;EACxC;;EAEA3B,sBAAsB,CAAC;IACrBW,CAAC;IACDE,aAAa,EAAEF,CAAC,CAACJ,MAAM,CAACM,aAAa;IACrCC,YAAY,EAAEH,CAAC,CAACJ,MAAM,CAACO,YAAY;IACnCC,iBAAiB;IACjBG,SAAS;IACTI,EAAE;IACFC,QAAQ;IACRH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEJjB,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;AACpBC,OAAO,CAAC,wCAAwC,CAAC;AACjDC,IAAI;AACF;AACL;AACA;AACA;AACA;AACA,CAAC,CACE;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,eAAe,EAAEV,cAAc,CAAC;AACxCU,OAAO,CAAC,cAAc,EAAEX,aAAa,CAAC;AACtCW,OAAO,CAAC,OAAO,EAAEb,MAAM,CAACM,MAAM,CAAC,CAAC,CACpC;;AACAQ,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,cAAc,GAAGD,CAAC,CAACJ,MAAM,CAACM,aAAa;;EAE7C;EACA,MAAMiB,aAAa,GAAGd,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEL,cAAc,GAAG,EAAE,CAAC,GAAG,CAAC;;EAE1D;EACA;EACA,MAAMM,SAAS,GAAG,kCAAkC;;EAEpD,MAAMC,KAAK,GAAGjB,MAAM,CAACS,CAAC,CAACJ,MAAM,CAACY,KAAK,CAAC;EACpC,MAAMC,KAAK,GAAGD,KAAK,CAACE,IAAI,CAACT,cAAc,CAAC,CAAC,CAAC;EAC1C,MAAMU,EAAE,GAAI;AAChB;AACA;AACA,KAAK;;EAED,MAAMC,QAAQ,GAAG,IAAIC,WAAW,CAACM,aAAa,GAAGnB,CAAC,CAACJ,MAAM,CAACO,YAAY,CAAC,CAACW,IAAI,CAACP,SAAS,CAAC;EACvF,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGpB,CAAC,CAACJ,MAAM,CAACO,YAAY,EAAE,EAAEiB,CAAC,EAAE;IAC9C,KAAK,IAAIL,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGd,cAAc,EAAE,EAAEc,EAAE,EAAE;MAC1C,MAAMM,EAAE,GAAGT,QAAQ,CAACU,QAAQ,CAACF,CAAC,GAAGD,aAAa,CAAC;MAC/C,MAAMH,CAAC,GAAGR,KAAK,CAACS,CAAC,CAACF,EAAE,EAAEd,cAAc,CAAC;MACrCoB,EAAE,CAAChB,IAAI,CAACa,KAAK,CAACF,CAAC,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,IAAIA,CAAC;IAClC;EACF;;EAEA1B,wBAAwB,CAAC;IACvBU,CAAC;IACDE,aAAa,EAAEF,CAAC,CAACJ,MAAM,CAACM,aAAa;IACrCC,YAAY,EAAEH,CAAC,CAACJ,MAAM,CAACO,YAAY;IACnCgB,aAAa;IACbZ,SAAS;IACTI,EAAE;IACFC,QAAQ;IACRH;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"}