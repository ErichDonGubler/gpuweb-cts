{"version":3,"file":"capability_info.js","names":["keysOf","makeTable","numericKeysOf","assertTypeTrue","assert","unreachable","GPUConst","kMaxUnsignedLongValue","kMaxUnsignedLongLongValue","kMaxQueryCount","kQueryTypeInfo","feature","undefined","kQueryTypes","kBufferSizeAlignment","kBufferUsageCopyInfo","BufferUsage","COPY_SRC","COPY_DST","kBufferUsageCopy","kBufferUsageKeys","kBufferUsageInfo","kBufferUsages","Object","values","kAllBufferUsageBits","reduce","previousSet","currentUsage","kErrorScopeFilterInfo","generatable","kErrorScopeFilters","kGeneratableErrorScopeFilters","filter","e","kFormatUniversalDefaults","blockWidth","blockHeight","color","depth","stencil","colorRender","multisample","baseFormat","sampleType","copySrc","copyDst","bytesPerBlock","renderable","renderTargetPixelByteCost","renderTargetComponentAlignment","formatTableWithDefaults","defaults","table","fromEntries","entries","map","k","row","kRegularTextureFormatInfo","r8unorm","type","storage","bytes","blend","resolve","byteCost","alignment","r8snorm","r8uint","r8sint","rg8unorm","rg8snorm","rg8uint","rg8sint","rgba8unorm","rgba8snorm","rgba8uint","rgba8sint","bgra8unorm","r16uint","r16sint","r16float","rg16uint","rg16sint","rg16float","rgba16uint","rgba16sint","rgba16float","r32uint","r32sint","r32float","rg32uint","rg32sint","rg32float","rgba32uint","rgba32sint","rgba32float","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","kSizedDepthStencilFormatInfo","stencil8","depth16unorm","depth32float","kUnsizedDepthStencilFormatInfo","depth24plus","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormats","kEncodableTextureFormats","kSizedTextureFormats","kDepthStencilFormats","kUncompressedTextureFormats","kAllTextureFormats","kRenderableColorTextureFormats","v","every","f","kCanvasTextureFormats","kCanvasAlphaModesInfo","kCanvasAlphaModes","kCanvasColorSpacesInfo","kCanvasColorSpaces","kTextureFormatInfo","kTextureFormatInfo_TypeCheck","kTextureFormats","kValidTextureFormatsForCopyE2T","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kCompareFunctionInfo","kCompareFunctions","kStencilOperationInfo","kStencilOperations","kDepthStencilFormatCapabilityInBufferTextureCopy","CopyB2T","CopyT2B","texelAspectSize","kDepthStencilFormatResolvedAspect","all","resolvePerAspectFormat","format","aspect","resolved","depthStencilFormatCopyableAspects","appliedType","depthStencilBufferTextureCopySupported","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","info","kTextureUsageTypeInfo","Number","TextureUsage","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","kTextureUsageType","kTextureUsageCopyInfo","kTextureUsageCopy","kTextureUsageInfo","kTextureUsages","kTextureViewDimensionInfo","kTextureViewDimensions","kVertexFormatInfo","kVertexFormats","kBindableResources","kMinDynamicBufferOffsetAlignment","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindingKind","uniformBuf","resource","perStageLimitClass","perPipelineLimitClass","storageBuf","filtSamp","sampler","nonFiltSamp","compareSamp","sampledTex","sampledTexMS","storageTex","kValidStagesAll","validStages","ShaderStage","VERTEX","FRAGMENT","COMPUTE","kValidStagesStorageWrite","bufferBindingTypeInfo","d","usage","UNIFORM","STORAGE","kBufferBindingTypes","samplerBindingTypeInfo","kSamplerBindingTypes","sampledTextureBindingTypeInfo","multisampled","kTextureSampleTypes","storageTextureBindingTypeInfo","kStorageTextureAccessValues","texBindingTypeInfo","texture","storageTexture","bindingTypeInfo","buffer","bufferBindingEntries","includeUndefined","samplerBindingEntries","textureBindingEntries","storageTextureBindingEntries","access","sampledAndStorageBindingEntries","storageTextureFormat","allBindingEntries","kShaderStageKeys","keys","kShaderStages","kShaderStageCombinations","kShaderStageCombinationsWithStage","kTextureSampleCounts","kBlendFactors","kBlendOperations","kPrimitiveTopology","kIndexFormat","kLimitInfo","kLimits","kMaxColorAttachments","maxColorAttachments","default","kMaxVertexBuffers","maxVertexBuffers","kMaxVertexAttributes","maxVertexAttributes","kMaxVertexBufferArrayStride","maxVertexBufferArrayStride","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","kFeatureNameInfo","kFeatureNames","viewCompatible","a","b","getFeaturesForFormats","formats","Array","from","Set","filterFormatsByFeature","kFeaturesForFormats"],"sources":["../../src/webgpu/capability_info.ts"],"sourcesContent":["// MAINTENANCE_TODO: The generated Typedoc for this file is hard to navigate because it's\n// alphabetized. Consider using namespaces or renames to fix this?\n\n/* eslint-disable no-sparse-arrays */\n\nimport { keysOf, makeTable, numericKeysOf, valueof } from '../common/util/data_tables.js';\nimport { assertTypeTrue, TypeEqual } from '../common/util/types.js';\nimport { assert, unreachable } from '../common/util/util.js';\n\nimport { GPUConst, kMaxUnsignedLongValue, kMaxUnsignedLongLongValue } from './constants.js';\nimport { ImageCopyType } from './util/texture/layout.js';\n\n// Base device limits can be found in constants.ts.\n\n// Queries\n\n/** Maximum number of queries in GPUQuerySet, by spec. */\nexport const kMaxQueryCount = 4096;\n/** Per-GPUQueryType info. */\nexport type QueryTypeInfo = {\n  /** Optional feature required to use this GPUQueryType. */\n  readonly feature: GPUFeatureName | undefined;\n  // Add fields as needed\n};\nexport const kQueryTypeInfo: {\n  readonly [k in GPUQueryType]: QueryTypeInfo;\n} = /* prettier-ignore */ {\n  // Occlusion query does not require any features.\n  'occlusion':           { feature:  undefined },\n  'timestamp':           { feature: 'timestamp-query' },\n};\n/** List of all GPUQueryType values. */\nexport const kQueryTypes = keysOf(kQueryTypeInfo);\n\n// Buffers\n\n/** Required alignment of a GPUBuffer size, by spec. */\nexport const kBufferSizeAlignment = 4;\n\n/** Per-GPUBufferUsage copy info. */\nexport const kBufferUsageCopyInfo: {\n  readonly [name: string]: GPUBufferUsageFlags;\n} = /* prettier-ignore */ {\n  'COPY_NONE':    0,\n  'COPY_SRC':     GPUConst.BufferUsage.COPY_SRC,\n  'COPY_DST':     GPUConst.BufferUsage.COPY_DST,\n  'COPY_SRC_DST': GPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.COPY_DST,\n};\n/** List of all GPUBufferUsage copy values. */\nexport const kBufferUsageCopy = keysOf(kBufferUsageCopyInfo);\n\n/** Per-GPUBufferUsage keys and info. */\ntype BufferUsageKey = keyof typeof GPUConst.BufferUsage;\nexport const kBufferUsageKeys = keysOf(GPUConst.BufferUsage);\nexport const kBufferUsageInfo: {\n  readonly [k in BufferUsageKey]: GPUBufferUsageFlags;\n} = {\n  ...GPUConst.BufferUsage,\n};\n\n/** List of all GPUBufferUsage values. */\nexport const kBufferUsages = Object.values(GPUConst.BufferUsage);\nexport const kAllBufferUsageBits = kBufferUsages.reduce(\n  (previousSet, currentUsage) => previousSet | currentUsage,\n  0\n);\n\n// Errors\n\n/** Per-GPUErrorFilter info. */\nexport const kErrorScopeFilterInfo: {\n  readonly [k in GPUErrorFilter]: {\n    generatable: boolean;\n  };\n} = /* prettier-ignore */ {\n  'internal':      { generatable: false },\n  'out-of-memory': { generatable: true },\n  'validation':    { generatable: true },\n};\n/** List of all GPUErrorFilter values. */\nexport const kErrorScopeFilters = keysOf(kErrorScopeFilterInfo);\nexport const kGeneratableErrorScopeFilters = kErrorScopeFilters.filter(\n  e => kErrorScopeFilterInfo[e].generatable\n);\n\n// Textures\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n/**\n * Defaults applied to all tables automatically. Used only inside `tableWithDefaults`.\n * This ensures keys are never missing, always explicitly `undefined`.\n *\n * All top-level keys must be defined here, or they won't be exposed.\n */\nconst kFormatUniversalDefaults = {\n  blockWidth: undefined,\n  blockHeight: undefined,\n  color: undefined,\n  depth: undefined,\n  stencil: undefined,\n  colorRender: undefined,\n  multisample: undefined,\n  feature: undefined,\n  baseFormat: undefined,\n\n  sampleType: undefined,\n  copySrc: undefined,\n  copyDst: undefined,\n  bytesPerBlock: undefined,\n  renderable: false,\n  renderTargetPixelByteCost: undefined,\n  renderTargetComponentAlignment: undefined,\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in TextureFormatInfo_TypeCheck.\n} as const;\n/**\n * Takes `table` and applies `defaults` to every row, i.e. for each row,\n * `{ ... kUniversalDefaults, ...defaults, ...row }`.\n * This only operates at the first level; it doesn't support defaults in nested objects.\n */\nfunction formatTableWithDefaults<Defaults extends {}, Table extends { readonly [K: string]: {} }>({\n  defaults,\n  table,\n}: {\n  defaults: Defaults;\n  table: Table;\n}): {\n  readonly [F in keyof Table]: {\n    readonly [K in keyof typeof kFormatUniversalDefaults]: K extends keyof Table[F]\n      ? Table[F][K]\n      : K extends keyof Defaults\n      ? Defaults[K]\n      : typeof kFormatUniversalDefaults[K];\n  };\n} {\n  return Object.fromEntries(\n    Object.entries(table).map(([k, row]) => [\n      k,\n      { ...kFormatUniversalDefaults, ...defaults, ...row },\n    ])\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  ) as any;\n}\n\n/** \"plain color formats\", plus rgb9e5ufloat. */\nconst kRegularTextureFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, copySrc: true, copyDst: true },\n  table: {\n    // plain, 8 bits per component\n\n    r8unorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      colorRender: { blend: true, resolve: true, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8snorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r8sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      colorRender: { blend: false, resolve: false, byteCost: 1, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg8unorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8snorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg8sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba8unorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'rgba8unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'rgba8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8snorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba8sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    bgra8unorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bgra8unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 1 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      baseFormat: 'bgra8unorm',\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 16 bits per component\n\n    r16uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: false, resolve: false, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r16float: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      colorRender: { blend: true, resolve: true, byteCost: 2, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg16uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg16float: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 4, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba16uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba16float: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 2 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, 32 bits per component\n\n    r32uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    r32float: {\n      color: { type: 'unfilterable-float', copySrc: true, copyDst: true, storage: true, bytes: 4 },\n      colorRender: { blend: false, resolve: false, byteCost: 4, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rg32uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg32float: {\n      color: { type: 'unfilterable-float', copySrc: true, copyDst: true, storage: true, bytes: 8 },\n      colorRender: { blend: false, resolve: false, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    rgba32uint: {\n      color: { type: 'uint', copySrc: true, copyDst: true, storage: true, bytes: 16 },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32sint: {\n      color: { type: 'sint', copySrc: true, copyDst: true, storage: true, bytes: 16 },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rgba32float: {\n      color: { type: 'unfilterable-float', copySrc: true, copyDst: true, storage: true, bytes: 16 },\n      colorRender: { blend: false, resolve: false, byteCost: 16, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    // plain, mixed component width, 32 bits per texel\n\n    rgb10a2unorm: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      colorRender: { blend: true, resolve: true, byteCost: 8, alignment: 4 },\n      renderable: true,\n      /*prettier-ignore*/ get renderTargetComponentAlignment() { return this.colorRender.alignment; },\n      /*prettier-ignore*/ get renderTargetPixelByteCost() { return this.colorRender.byteCost; },\n      multisample: true,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    rg11b10ufloat: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n      renderTargetPixelByteCost: 8,\n      renderTargetComponentAlignment: 4,\n    },\n\n    // packed\n\n    rgb9e5ufloat: {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 4 },\n      multisample: false,\n      /*prettier-ignore*/ get sampleType() { return this.color.type; },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// MAINTENANCE_TODO: Distinguishing \"sized\" and \"unsized\" depth stencil formats doesn't make sense\n// because one aspect can be sized and one can be unsized. This should be cleaned up, but is kept\n// this way during a migration phase.\nconst kSizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true, copySrc: true, renderable: true },\n  table: {\n    stencil8: {\n      stencil: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      sampleType: 'uint',\n      copyDst: true,\n      bytesPerBlock: 1,\n    },\n    depth16unorm: {\n      depth: { type: 'depth', copySrc: true, copyDst: true, storage: false, bytes: 2 },\n      sampleType: 'depth',\n      copyDst: true,\n      bytesPerBlock: 2,\n    },\n    depth32float: {\n      depth: { type: 'depth', copySrc: true, copyDst: false, storage: false, bytes: 4 },\n      sampleType: 'depth',\n      copyDst: false,\n      bytesPerBlock: 4,\n    },\n  },\n} as const);\nconst kUnsizedDepthStencilFormatInfo = formatTableWithDefaults({\n  defaults: { blockWidth: 1, blockHeight: 1, multisample: true },\n  table: {\n    depth24plus: {\n      depth: { type: 'depth', copySrc: false, copyDst: false, storage: false, bytes: undefined },\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n    'depth24plus-stencil8': {\n      depth: { type: 'depth', copySrc: false, copyDst: false, storage: false, bytes: undefined },\n      stencil: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n    'depth32float-stencil8': {\n      depth: { type: 'depth', copySrc: true, copyDst: false, storage: false, bytes: 4 },\n      stencil: { type: 'uint', copySrc: true, copyDst: true, storage: false, bytes: 1 },\n      feature: 'depth32float-stencil8',\n      copySrc: false,\n      copyDst: false,\n      sampleType: 'depth',\n      renderable: true,\n    },\n  },\n} as const);\n\nconst kBCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-bc',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'bc1-rgba-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc1-rgba-unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'bc1-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc2-rgba-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc2-rgba-unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc2-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc3-rgba-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc3-rgba-unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc3-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc4-r-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc4-r-snorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc5-rg-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc5-rg-snorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc6h-rgb-ufloat': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc6h-rgb-float': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'bc7-rgba-unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'bc7-rgba-unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'bc7-rgba-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kETC2TextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    blockWidth: 4,\n    blockHeight: 4,\n    multisample: false,\n    feature: 'texture-compression-etc2',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'etc2-rgb8unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'etc2-rgb8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgb8a1unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgb8a1unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      baseFormat: 'etc2-rgb8a1unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'etc2-rgba8unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'etc2-rgba8unorm-srgb': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'etc2-rgba8unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-r11unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-r11snorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 8 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'eac-rg11unorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'eac-rg11snorm': {\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\nconst kASTCTextureFormatInfo = formatTableWithDefaults({\n  defaults: {\n    multisample: false,\n    feature: 'texture-compression-astc',\n    sampleType: 'float',\n    copySrc: true,\n    copyDst: true,\n  },\n  table: {\n    'astc-4x4-unorm': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-4x4-unorm-srgb': {\n      blockWidth: 4,\n      blockHeight: 4,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-4x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x4-unorm': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x4-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 4,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-5x4-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-5x5-unorm': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-5x5-unorm-srgb': {\n      blockWidth: 5,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-5x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x5-unorm': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x5-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-6x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-6x6-unorm': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-6x6-unorm-srgb': {\n      blockWidth: 6,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-6x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x5-unorm': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x5-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x6-unorm': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x6-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-8x8-unorm': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-8x8-unorm-srgb': {\n      blockWidth: 8,\n      blockHeight: 8,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-8x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x5-unorm': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x5-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 5,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x5-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x6-unorm': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x6-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 6,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x6-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x8-unorm': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x8-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 8,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x8-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-10x10-unorm': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-10x10-unorm-srgb': {\n      blockWidth: 10,\n      blockHeight: 10,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-10x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x10-unorm': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x10-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 10,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-12x10-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n\n    'astc-12x12-unorm': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n    'astc-12x12-unorm-srgb': {\n      blockWidth: 12,\n      blockHeight: 12,\n      color: { type: 'float', copySrc: true, copyDst: true, storage: false, bytes: 16 },\n      baseFormat: 'astc-12x12-unorm',\n      /*prettier-ignore*/ get bytesPerBlock() { return this.color.bytes; },\n    },\n  },\n} as const);\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } as const;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n\n/** A \"regular\" texture format (uncompressed, sized, single-plane color formats). */\n/* prettier-ignore */ export type      RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\n/** A sized depth/stencil texture format. */\n/* prettier-ignore */ export type   SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\n/** An unsized depth/stencil texture format. */\n/* prettier-ignore */ export type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\n/** A compressed (block) texture format. */\n/* prettier-ignore */ export type   CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\n/** A color texture format (regular | compressed). */\n/* prettier-ignore */ export type        ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\n/** An encodable texture format (regular | sized depth/stencil). */\n/* prettier-ignore */ export type    EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\n/** A sized texture format (regular | sized depth/stencil | compressed). */\n/* prettier-ignore */ export type        SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\n/** A depth/stencil format (sized | unsized). */\n/* prettier-ignore */ export type        DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\n/** An uncompressed (block size 1x1) format (regular | depth/stencil). */\n/* prettier-ignore */ export type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\n\n/* prettier-ignore */ export const      kRegularTextureFormats: readonly      RegularTextureFormat[] = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats: readonly   SizedDepthStencilFormat[] = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats: readonly UnsizedDepthStencilFormat[] = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats: readonly   CompressedTextureFormat[] = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats: readonly        ColorTextureFormat[] = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats: readonly    EncodableTextureFormat[] = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats: readonly        SizedTextureFormat[] = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats: readonly        DepthStencilFormat[] = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats: readonly UncompressedTextureFormat[] = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats: readonly          GPUTextureFormat[] = keysOf(         kAllTextureFormatInfo);\n\n// CompressedTextureFormat are unrenderable so filter from RegularTextureFormats for color targets is enough\nexport const kRenderableColorTextureFormats = kRegularTextureFormats.filter(\n  v => kColorTextureFormatInfo[v].colorRender\n);\nassert(\n  kRenderableColorTextureFormats.every(\n    f =>\n      kAllTextureFormatInfo[f].renderTargetComponentAlignment !== undefined &&\n      kAllTextureFormatInfo[f].renderTargetPixelByteCost !== undefined\n  )\n);\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'] as const;\n\n// The alpha mode for canvas context.\nexport const kCanvasAlphaModesInfo: {\n  readonly [k in GPUCanvasAlphaMode]: {};\n} = /* prettier-ignore */ {\n  'opaque': {},\n  'premultiplied': {},\n};\nexport const kCanvasAlphaModes = keysOf(kCanvasAlphaModesInfo);\n\n// The color spaces for canvas context\nexport const kCanvasColorSpacesInfo: {\n  readonly [k in PredefinedColorSpace]: {};\n} = /* prettier-ignore */ {\n  'srgb': {},\n  'display-p3': {},\n};\nexport const kCanvasColorSpaces = keysOf(kCanvasColorSpacesInfo);\n\n/** Per-GPUTextureFormat-per-aspect info. */\ninterface TextureFormatAspectInfo {\n  /** Whether the aspect can be used as `COPY_SRC`. */\n  copySrc: boolean;\n  /** Whether the aspect can be used as `COPY_DST`. */\n  copyDst: boolean;\n  /** Whether the aspect can be used as `STORAGE`. */\n  storage: boolean;\n  /** The \"texel block copy footprint\" of one texel block; `undefined` if the aspect is unsized. */\n  bytes: number | undefined;\n}\n/** Per GPUTextureFormat-per-aspect info for color aspects. */\ninterface TextureFormatColorAspectInfo extends TextureFormatAspectInfo {\n  bytes: number;\n  /** \"Best\" sample type of the format. \"float\" also implies \"unfilterable-float\". */\n  type: 'float' | 'uint' | 'sint' | 'unfilterable-float';\n}\n/** Per GPUTextureFormat-per-aspect info for depth aspects. */\ninterface TextureFormatDepthAspectInfo extends TextureFormatAspectInfo {\n  /** \"depth\" also implies \"unfilterable-float\". */\n  type: 'depth';\n}\n/** Per GPUTextureFormat-per-aspect info for stencil aspects. */\ninterface TextureFormatStencilAspectInfo extends TextureFormatAspectInfo {\n  bytes: 1;\n  type: 'uint';\n}\n\n/**\n * Per-GPUTextureFormat info.\n * This is not actually the type of values in kTextureFormatInfo; that type is fully const\n * so that it can be narrowed very precisely at usage sites by the compiler.\n * This type exists only as a type check on the inferred type of kTextureFormatInfo.\n * Documentation is also written here, but not actually visible to the IDE.\n */\ntype TextureFormatInfo_TypeCheck = {\n  /** Texel block width. */\n  blockWidth: number;\n  /** Texel block height. */\n  blockHeight: number;\n  /** Whether the format can be used in a multisample texture. */\n  multisample: boolean;\n  /** The base format for srgb formats. Specified on both srgb and equivalent non-srgb formats. */\n  baseFormat: GPUTextureFormat | undefined;\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: GPUFeatureName | undefined;\n\n  /** @deprecated */\n  sampleType: GPUTextureSampleType;\n  /** @deprecated */\n  copySrc: boolean;\n  /** @deprecated */\n  copyDst: boolean;\n  /** @deprecated */\n  bytesPerBlock: number | undefined;\n  /** @deprecated */\n  renderable: boolean;\n  /** @deprecated */\n  renderTargetPixelByteCost: number | undefined;\n  /** @deprecated */\n  renderTargetComponentAlignment: number | undefined;\n\n  // IMPORTANT:\n  // Add new top-level keys both here and in kUniversalDefaults.\n} & (\n  | {\n      /** Color aspect info. */\n      color: TextureFormatColorAspectInfo;\n      /** Defined if the format is a color format that can be used as `RENDER_ATTACHMENT`. */\n      colorRender:\n        | undefined\n        | {\n            /** Whether the format is blendable. */\n            blend: boolean;\n            /** Whether the format can be a multisample resolve target. */\n            resolve: boolean;\n            /** The \"render target pixel byte cost\" of the format. */\n            byteCost: number;\n            /** The \"render target component alignment\" of the format. */\n            alignment: number;\n          };\n    }\n  | (\n      | {\n          /** Depth aspect info. */\n          depth: TextureFormatDepthAspectInfo;\n          /** Stencil aspect info. */\n          stencil: undefined | TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n      | {\n          /** Stencil aspect info. */\n          stencil: TextureFormatStencilAspectInfo;\n          multisample: true;\n        }\n    )\n);\n\n/** Per-GPUTextureFormat info. */\nexport const kTextureFormatInfo = {\n  ...kRegularTextureFormatInfo,\n  ...kSizedDepthStencilFormatInfo,\n  ...kUnsizedDepthStencilFormatInfo,\n  ...kBCTextureFormatInfo,\n  ...kETC2TextureFormatInfo,\n  ...kASTCTextureFormatInfo,\n} as const;\nexport type TextureFormatInfo<\n  Format extends GPUTextureFormat = GPUTextureFormat\n> = typeof kTextureFormatInfo[Format];\n\n/** Defining this variable verifies the type of kTextureFormatInfo2. It is not used. */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst kTextureFormatInfo_TypeCheck: {\n  readonly [F in GPUTextureFormat]: TextureFormatInfo_TypeCheck;\n} = kTextureFormatInfo;\n/** List of all GPUTextureFormat values. */\nexport const kTextureFormats: readonly GPUTextureFormat[] = keysOf(kAllTextureFormatInfo);\n\n/** Valid GPUTextureFormats for `copyExternalImageToTexture`, by spec. */\nexport const kValidTextureFormatsForCopyE2T = [\n  'r8unorm',\n  'r16float',\n  'r32float',\n  'rg8unorm',\n  'rg16float',\n  'rg32float',\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n] as const;\n\n/** Per-GPUTextureDimension info. */\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {};\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\n/** Per-GPUTextureAspect info. */\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {};\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\n/** List of all GPUTextureAspect values. */\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\n/** Per-GPUCompareFunction info. */\nexport const kCompareFunctionInfo: {\n  readonly [k in GPUCompareFunction]: {};\n} = /* prettier-ignore */ {\n  'never': {},\n  'less': {},\n  'equal': {},\n  'less-equal': {},\n  'greater': {},\n  'not-equal': {},\n  'greater-equal': {},\n  'always': {},\n};\n/** List of all GPUCompareFunction values. */\nexport const kCompareFunctions = keysOf(kCompareFunctionInfo);\n\n/** Per-GPUStencilOperation info. */\nexport const kStencilOperationInfo: {\n  readonly [k in GPUStencilOperation]: {};\n} = /* prettier-ignore */ {\n  'keep': {},\n  'zero': {},\n  'replace': {},\n  'invert': {},\n  'increment-clamp': {},\n  'decrement-clamp': {},\n  'increment-wrap': {},\n  'decrement-wrap': {},\n};\n/** List of all GPUStencilOperation values. */\nexport const kStencilOperations = keysOf(kStencilOperationInfo);\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\n/** `kDepthStencilFormatResolvedAspect[format][aspect]` returns the aspect-specific format for a\n *  depth-stencil format, or `undefined` if the format doesn't have the aspect.\n */\nexport const kDepthStencilFormatResolvedAspect: {\n  readonly [k in DepthStencilFormat]: {\n    readonly [a in GPUTextureAspect]: DepthStencilFormat | undefined;\n  };\n} = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    all: 'depth24plus',\n    'depth-only': 'depth24plus',\n    'stencil-only': undefined,\n  },\n  'depth24plus-stencil8': {\n    all: 'depth24plus-stencil8',\n    'depth-only': 'depth24plus',\n    'stencil-only': 'stencil8',\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    all: 'depth16unorm',\n    'depth-only': 'depth16unorm',\n    'stencil-only': undefined,\n  },\n  depth32float: {\n    all: 'depth32float',\n    'depth-only': 'depth32float',\n    'stencil-only': undefined,\n  },\n  'depth32float-stencil8': {\n    all: 'depth32float-stencil8',\n    'depth-only': 'depth32float',\n    'stencil-only': 'stencil8',\n  },\n  stencil8: {\n    all: 'stencil8',\n    'depth-only': undefined,\n    'stencil-only': 'stencil8',\n  },\n} as const;\n\n/**\n * @returns the GPUTextureFormat corresponding to the @param aspect of @param format.\n * This allows choosing the correct format for depth-stencil aspects when creating pipelines that\n * will have to match the resolved format of views, or to get per-aspect information like the\n * `blockByteSize`.\n *\n * Many helpers use an `undefined` `aspect` to means `'all'` so this is also the default for this\n * function.\n */\nexport function resolvePerAspectFormat(\n  format: GPUTextureFormat,\n  aspect?: GPUTextureAspect\n): GPUTextureFormat {\n  if (aspect === 'all' || aspect === undefined) {\n    return format;\n  }\n  assert(!!kTextureFormatInfo[format].depth || !!kTextureFormatInfo[format].stencil);\n  const resolved = kDepthStencilFormatResolvedAspect[format as DepthStencilFormat][aspect ?? 'all'];\n  assert(resolved !== undefined);\n  return resolved;\n}\n\n/**\n * Gets all copyable aspects for copies between texture and buffer for specified depth/stencil format and copy type, by spec.\n */\nexport function depthStencilFormatCopyableAspects(\n  type: ImageCopyType,\n  format: DepthStencilFormat\n): readonly GPUTextureAspect[] {\n  const appliedType = type === 'WriteTexture' ? 'CopyB2T' : type;\n  return kDepthStencilFormatCapabilityInBufferTextureCopy[format][appliedType];\n}\n\n/**\n * Computes whether a copy between a depth/stencil texture aspect and a buffer is supported, by spec.\n */\nexport function depthStencilBufferTextureCopySupported(\n  type: ImageCopyType,\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] = depthStencilFormatCopyableAspects(\n    type,\n    format\n  );\n  return supportedAspects.includes(aspect);\n}\n\n/**\n * Returns the byte size of the depth or stencil aspect of the specified depth/stencil format,\n * or -1 if none.\n */\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\n/**\n * Returns true iff a texture can be created with the provided GPUTextureDimension\n * (defaulting to 2d) and GPUTextureFormat, by spec.\n */\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\n/** Per-GPUTextureUsage type info. */\nexport const kTextureUsageTypeInfo: {\n  readonly [name: string]: number;\n} = /* prettier-ignore */ {\n  'texture': Number(GPUConst.TextureUsage.TEXTURE_BINDING),\n  'storage': Number(GPUConst.TextureUsage.STORAGE_BINDING),\n  'render':  Number(GPUConst.TextureUsage.RENDER_ATTACHMENT),\n};\n/** List of all GPUTextureUsage type values. */\nexport const kTextureUsageType = keysOf(kTextureUsageTypeInfo);\n\n/** Per-GPUTextureUsage copy info. */\nexport const kTextureUsageCopyInfo: {\n  readonly [name: string]: number;\n} = /* prettier-ignore */ {\n  'none':     0,\n  'src':      Number(GPUConst.TextureUsage.COPY_SRC),\n  'dst':      Number(GPUConst.TextureUsage.COPY_DST),\n  'src-dest': Number(GPUConst.TextureUsage.COPY_SRC) | Number(GPUConst.TextureUsage.COPY_DST),\n};\n/** List of all GPUTextureUsage copy values. */\nexport const kTextureUsageCopy = keysOf(kTextureUsageCopyInfo);\n\n/** Per-GPUTextureUsage info. */\nexport const kTextureUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.TextureUsage>]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.TEXTURE_BINDING]: {},\n  [GPUConst.TextureUsage.STORAGE_BINDING]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {},\n};\n/** List of all GPUTextureUsage values. */\nexport const kTextureUsages = numericKeysOf<GPUTextureUsageFlags>(kTextureUsageInfo);\n\n// Texture View\n\n/** Per-GPUTextureViewDimension info. */\nexport type TextureViewDimensionInfo = {\n  /** Whether a storage texture view can have this view dimension. */\n  readonly storage: boolean;\n  // Add fields as needed\n};\n/** Per-GPUTextureViewDimension info. */\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: TextureViewDimensionInfo;\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Vertex formats\n\n/** Per-GPUVertexFormat info. */\n// Exists just for documentation. Otherwise could be inferred by `makeTable`.\nexport type VertexFormatInfo = {\n  /** Number of bytes in each component. */\n  readonly bytesPerComponent: 1 | 2 | 4;\n  /** The data encoding (float, normalized, or integer) for each component. */\n  readonly type: 'float' | 'unorm' | 'snorm' | 'uint' | 'sint';\n  /** Number of components. */\n  readonly componentCount: 1 | 2 | 3 | 4;\n  /** The completely matching WGSL type for vertex format */\n  readonly wgslType:\n    | 'f32'\n    | 'vec2<f32>'\n    | 'vec3<f32>'\n    | 'vec4<f32>'\n    | 'u32'\n    | 'vec2<u32>'\n    | 'vec3<u32>'\n    | 'vec4<u32>'\n    | 'i32'\n    | 'vec2<i32>'\n    | 'vec3<i32>'\n    | 'vec4<i32>';\n  // Add fields as needed\n};\n/** Per-GPUVertexFormat info. */\nexport const kVertexFormatInfo: {\n  readonly [k in GPUVertexFormat]: VertexFormatInfo;\n} = /* prettier-ignore */ makeTable(\n               ['bytesPerComponent',  'type', 'componentCount',  'wgslType'] as const,\n               [                   ,        ,                 ,            ] as const, {\n  // 8 bit components\n  'uint8x2':   [                  1,  'uint',                2, 'vec2<u32>'],\n  'uint8x4':   [                  1,  'uint',                4, 'vec4<u32>'],\n  'sint8x2':   [                  1,  'sint',                2, 'vec2<i32>'],\n  'sint8x4':   [                  1,  'sint',                4, 'vec4<i32>'],\n  'unorm8x2':  [                  1, 'unorm',                2, 'vec2<f32>'],\n  'unorm8x4':  [                  1, 'unorm',                4, 'vec4<f32>'],\n  'snorm8x2':  [                  1, 'snorm',                2, 'vec2<f32>'],\n  'snorm8x4':  [                  1, 'snorm',                4, 'vec4<f32>'],\n  // 16 bit components\n  'uint16x2':  [                  2,  'uint',                2, 'vec2<u32>'],\n  'uint16x4':  [                  2,  'uint',                4, 'vec4<u32>'],\n  'sint16x2':  [                  2,  'sint',                2, 'vec2<i32>'],\n  'sint16x4':  [                  2,  'sint',                4, 'vec4<i32>'],\n  'unorm16x2': [                  2, 'unorm',                2, 'vec2<f32>'],\n  'unorm16x4': [                  2, 'unorm',                4, 'vec4<f32>'],\n  'snorm16x2': [                  2, 'snorm',                2, 'vec2<f32>'],\n  'snorm16x4': [                  2, 'snorm',                4, 'vec4<f32>'],\n  'float16x2': [                  2, 'float',                2, 'vec2<f32>'],\n  'float16x4': [                  2, 'float',                4, 'vec4<f32>'],\n  // 32 bit components\n  'float32':   [                  4, 'float',                1,       'f32'],\n  'float32x2': [                  4, 'float',                2, 'vec2<f32>'],\n  'float32x3': [                  4, 'float',                3, 'vec3<f32>'],\n  'float32x4': [                  4, 'float',                4, 'vec4<f32>'],\n  'uint32':    [                  4,  'uint',                1,       'u32'],\n  'uint32x2':  [                  4,  'uint',                2, 'vec2<u32>'],\n  'uint32x3':  [                  4,  'uint',                3, 'vec3<u32>'],\n  'uint32x4':  [                  4,  'uint',                4, 'vec4<u32>'],\n  'sint32':    [                  4,  'sint',                1,       'i32'],\n  'sint32x2':  [                  4,  'sint',                2, 'vec2<i32>'],\n  'sint32x3':  [                  4,  'sint',                3, 'vec3<i32>'],\n  'sint32x4':  [                  4,  'sint',                4, 'vec4<i32>']\n} as const);\n/** List of all GPUVertexFormat values. */\nexport const kVertexFormats = keysOf(kVertexFormatInfo);\n\n// Typedefs for bindings\n\n/**\n * Classes of `PerShaderStage` binding limits. Two bindings with the same class\n * count toward the same `PerShaderStage` limit(s) in the spec (if any).\n */\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\n/**\n * Classes of `PerPipelineLayout` binding limits. Two bindings with the same class\n * count toward the same `PerPipelineLayout` limit(s) in the spec (if any).\n */\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\nexport type ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'filtSamp'\n  | 'nonFiltSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\n\n/**\n * Types of resource binding which have distinct binding rules, by spec\n * (e.g. filtering vs non-filtering sampler, multisample vs non-multisample texture).\n */\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\nexport const kBindableResources = [\n  'uniformBuf',\n  'storageBuf',\n  'filtSamp',\n  'nonFiltSamp',\n  'compareSamp',\n  'sampledTex',\n  'sampledTexMS',\n  'storageTex',\n  'errorBuf',\n  'errorSamp',\n  'errorTex',\n] as const;\nassertTypeTrue<TypeEqual<BindableResource, typeof kBindableResources[number]>>();\n\n// Bindings\n\n/** Dynamic buffer offsets require offset to be divisible by 256, by spec. */\nexport const kMinDynamicBufferOffsetAlignment = 256;\n\n/** Default `PerShaderStage` binding limits, by spec. */\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    /** Which `PerShaderStage` binding limit class. */\n    readonly class: k;\n    /** Maximum number of allowed bindings in that class. */\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  8, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\n/**\n * Default `PerPipelineLayout` binding limits, by spec.\n */\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    /** Which `PerPipelineLayout` binding limit class. */\n    readonly class: k;\n    /** Maximum number of allowed bindings with `hasDynamicOffset: true` in that class. */\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:   { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:   { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  filtSamp:     { resource: 'filtSamp',     perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  nonFiltSamp:  { resource: 'nonFiltSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:  { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:   { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:   { resource: 'storageTex',   perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\n\n/** Binding type info (including class limits) for the specified GPUBufferBindingLayout. */\nexport function bufferBindingTypeInfo(d: GPUBufferBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'uniform') {\n    case 'uniform':           return { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          };\n    case 'storage':           return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, };\n    case 'read-only-storage': return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          };\n  }\n}\n/** List of all GPUBufferBindingType values. */\nexport const kBufferBindingTypes = ['uniform', 'storage', 'read-only-storage'] as const;\nassertTypeTrue<TypeEqual<GPUBufferBindingType, typeof kBufferBindingTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUSamplerBindingLayout. */\nexport function samplerBindingTypeInfo(d: GPUSamplerBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'filtering') {\n    case 'filtering':     return { ...kBindingKind.filtSamp,    ...kValidStagesAll, };\n    case 'non-filtering': return { ...kBindingKind.nonFiltSamp, ...kValidStagesAll, };\n    case 'comparison':    return { ...kBindingKind.compareSamp, ...kValidStagesAll, };\n  }\n}\n/** List of all GPUSamplerBindingType values. */\nexport const kSamplerBindingTypes = ['filtering', 'non-filtering', 'comparison'] as const;\nassertTypeTrue<TypeEqual<GPUSamplerBindingType, typeof kSamplerBindingTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUTextureBindingLayout. */\nexport function sampledTextureBindingTypeInfo(d: GPUTextureBindingLayout) {\n  /* prettier-ignore */\n  if (d.multisampled) {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTexMS, ...kValidStagesAll, };\n  } else {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTex,   ...kValidStagesAll, };\n  }\n}\n/** List of all GPUTextureSampleType values. */\nexport const kTextureSampleTypes = [\n  'float',\n  'unfilterable-float',\n  'depth',\n  'sint',\n  'uint',\n] as const;\nassertTypeTrue<TypeEqual<GPUTextureSampleType, typeof kTextureSampleTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUStorageTextureBindingLayout. */\nexport function storageTextureBindingTypeInfo(d: GPUStorageTextureBindingLayout) {\n  return {\n    usage: GPUConst.TextureUsage.STORAGE_BINDING,\n    ...kBindingKind.storageTex,\n    ...kValidStagesStorageWrite,\n  };\n}\n/** List of all GPUStorageTextureAccess values. */\nexport const kStorageTextureAccessValues = ['write-only'] as const;\nassertTypeTrue<TypeEqual<GPUStorageTextureAccess, typeof kStorageTextureAccessValues[number]>>();\n\n/** GPUBindGroupLayoutEntry, but only the \"union\" fields, not the common fields. */\nexport type BGLEntry = Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n/** Binding type info (including class limits) for the specified BGLEntry. */\nexport function texBindingTypeInfo(e: BGLEntry) {\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable();\n}\n/** BindingTypeInfo (including class limits) for the specified BGLEntry. */\nexport function bindingTypeInfo(e: BGLEntry) {\n  if (e.buffer !== undefined) return bufferBindingTypeInfo(e.buffer);\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.sampler !== undefined) return samplerBindingTypeInfo(e.sampler);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable('GPUBindGroupLayoutEntry has no BindingLayout');\n}\n\n/**\n * Generate a list of possible buffer-typed BGLEntry values.\n *\n * Note: Generates different `type` options, but not `hasDynamicOffset` options.\n */\nexport function bufferBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ buffer: { type: undefined } }] : []),\n    { buffer: { type: 'uniform' } },\n    { buffer: { type: 'storage' } },\n    { buffer: { type: 'read-only-storage' } },\n  ] as const;\n}\n/** Generate a list of possible sampler-typed BGLEntry values. */\nexport function samplerBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ sampler: { type: undefined } }] : []),\n    { sampler: { type: 'comparison' } },\n    { sampler: { type: 'filtering' } },\n    { sampler: { type: 'non-filtering' } },\n  ] as const;\n}\n/**\n * Generate a list of possible texture-typed BGLEntry values.\n *\n * Note: Generates different `multisampled` options, but not `sampleType` or `viewDimension` options.\n */\nexport function textureBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ texture: { multisampled: undefined } }] : []),\n    { texture: { multisampled: false } },\n    { texture: { multisampled: true, sampleType: 'unfilterable-float' } },\n  ] as const;\n}\n/**\n * Generate a list of possible storageTexture-typed BGLEntry values.\n *\n * Note: Generates different `access` options, but not `format` or `viewDimension` options.\n */\nexport function storageTextureBindingEntries(format: GPUTextureFormat): readonly BGLEntry[] {\n  return [{ storageTexture: { access: 'write-only', format } }] as const;\n}\n/** Generate a list of possible texture-or-storageTexture-typed BGLEntry values. */\nexport function sampledAndStorageBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...textureBindingEntries(includeUndefined),\n    ...storageTextureBindingEntries(storageTextureFormat),\n  ] as const;\n}\n/**\n * Generate a list of possible BGLEntry values of every type, but not variants with different:\n * - buffer.hasDynamicOffset\n * - texture.sampleType\n * - texture.viewDimension\n * - storageTexture.viewDimension\n */\nexport function allBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...bufferBindingEntries(includeUndefined),\n    ...samplerBindingEntries(includeUndefined),\n    ...sampledAndStorageBindingEntries(includeUndefined, storageTextureFormat),\n  ] as const;\n}\n\n// Shader stages\n\n/** List of all GPUShaderStage values. */\nexport type ShaderStageKey = keyof typeof GPUConst.ShaderStage;\nexport const kShaderStageKeys = Object.keys(GPUConst.ShaderStage) as ShaderStageKey[];\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\n/** List of all possible combinations of GPUShaderStage values. */\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const kShaderStageCombinationsWithStage: readonly GPUShaderStageFlags[] = [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n];\n\n/**\n * List of all possible texture sampleCount values.\n *\n * MAINTENANCE_TODO: Switch existing tests to use kTextureSampleCounts\n */\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// Blend factors and Blend components\n\n/** List of all GPUBlendFactor values. */\nexport const kBlendFactors: readonly GPUBlendFactor[] = [\n  'zero',\n  'one',\n  'src',\n  'one-minus-src',\n  'src-alpha',\n  'one-minus-src-alpha',\n  'dst',\n  'one-minus-dst',\n  'dst-alpha',\n  'one-minus-dst-alpha',\n  'src-alpha-saturated',\n  'constant',\n  'one-minus-constant',\n];\n\n/** List of all GPUBlendOperation values. */\nexport const kBlendOperations: readonly GPUBlendOperation[] = [\n  'add', //\n  'subtract',\n  'reverse-subtract',\n  'min',\n  'max',\n];\n\n// Primitive topologies\nexport const kPrimitiveTopology: readonly GPUPrimitiveTopology[] = [\n  'point-list',\n  'line-list',\n  'line-strip',\n  'triangle-list',\n  'triangle-strip',\n];\nassertTypeTrue<TypeEqual<GPUPrimitiveTopology, typeof kPrimitiveTopology[number]>>();\n\nexport const kIndexFormat: readonly GPUIndexFormat[] = ['uint16', 'uint32'];\nassertTypeTrue<TypeEqual<GPUIndexFormat, typeof kIndexFormat[number]>>();\n\n/** Info for each entry of GPUSupportedLimits */\nexport const kLimitInfo = /* prettier-ignore */ makeTable(\n                                               [    'class', 'default',            'maximumValue'] as const,\n                                               [  'maximum',          ,     kMaxUnsignedLongValue] as const, {\n  'maxTextureDimension1D':                     [           ,      8192,                          ],\n  'maxTextureDimension2D':                     [           ,      8192,                          ],\n  'maxTextureDimension3D':                     [           ,      2048,                          ],\n  'maxTextureArrayLayers':                     [           ,       256,                          ],\n\n  'maxBindGroups':                             [           ,         4,                          ],\n  'maxBindingsPerBindGroup':                   [           ,      1000,                          ],\n  'maxDynamicUniformBuffersPerPipelineLayout': [           ,         8,                          ],\n  'maxDynamicStorageBuffersPerPipelineLayout': [           ,         4,                          ],\n  'maxSampledTexturesPerShaderStage':          [           ,        16,                          ],\n  'maxSamplersPerShaderStage':                 [           ,        16,                          ],\n  'maxStorageBuffersPerShaderStage':           [           ,         8,                          ],\n  'maxStorageTexturesPerShaderStage':          [           ,         4,                          ],\n  'maxUniformBuffersPerShaderStage':           [           ,        12,                          ],\n\n  'maxUniformBufferBindingSize':               [           ,     65536, kMaxUnsignedLongLongValue],\n  'maxStorageBufferBindingSize':               [           , 134217728, kMaxUnsignedLongLongValue],\n  'minUniformBufferOffsetAlignment':           ['alignment',       256,                          ],\n  'minStorageBufferOffsetAlignment':           ['alignment',       256,                          ],\n\n  'maxVertexBuffers':                          [           ,         8,                          ],\n  'maxBufferSize':                             [           , 268435456, kMaxUnsignedLongLongValue],\n  'maxVertexAttributes':                       [           ,        16,                          ],\n  'maxVertexBufferArrayStride':                [           ,      2048,                          ],\n  'maxInterStageShaderComponents':             [           ,        60,                          ],\n  'maxInterStageShaderVariables':              [           ,        16,                          ],\n\n  'maxColorAttachments':                       [           ,         8,                          ],\n  'maxColorAttachmentBytesPerSample':          [           ,        32,                          ],\n\n  'maxComputeWorkgroupStorageSize':            [           ,     16384,                          ],\n  'maxComputeInvocationsPerWorkgroup':         [           ,       256,                          ],\n  'maxComputeWorkgroupSizeX':                  [           ,       256,                          ],\n  'maxComputeWorkgroupSizeY':                  [           ,       256,                          ],\n  'maxComputeWorkgroupSizeZ':                  [           ,        64,                          ],\n  'maxComputeWorkgroupsPerDimension':          [           ,     65535,                          ],\n} as const);\n\n/** List of all entries of GPUSupportedLimits. */\nexport const kLimits = keysOf(kLimitInfo);\n\n// Pipeline limits\n\n/** Maximum number of color attachments to a render pass, by spec. */\nexport const kMaxColorAttachments = kLimitInfo.maxColorAttachments.default;\n/** `maxVertexBuffers` per GPURenderPipeline, by spec. */\nexport const kMaxVertexBuffers = kLimitInfo.maxVertexBuffers.default;\n/** `maxVertexAttributes` per GPURenderPipeline, by spec. */\nexport const kMaxVertexAttributes = kLimitInfo.maxVertexAttributes.default;\n/** `maxVertexBufferArrayStride` in a vertex buffer in a GPURenderPipeline, by spec. */\nexport const kMaxVertexBufferArrayStride = kLimitInfo.maxVertexBufferArrayStride.default;\n\n/** The size of indirect draw parameters in the indirectBuffer of drawIndirect */\nexport const kDrawIndirectParametersSize = 4;\n/** The size of indirect drawIndexed parameters in the indirectBuffer of drawIndexedIndirect */\nexport const kDrawIndexedIndirectParametersSize = 5;\n\n/** Per-GPUFeatureName info. */\nexport const kFeatureNameInfo: {\n  readonly [k in GPUFeatureName]: {};\n} = /* prettier-ignore */ {\n  'bgra8unorm-storage': {},\n  'depth-clip-control': {},\n  'depth32float-stencil8': {},\n  'texture-compression-bc': {},\n  'texture-compression-etc2': {},\n  'texture-compression-astc': {},\n  'timestamp-query': {},\n  'indirect-first-instance': {},\n  'shader-f16': {},\n  'rg11b10ufloat-renderable': {},\n  'float32-filterable': {},\n};\n/** List of all GPUFeatureName values. */\nexport const kFeatureNames = keysOf(kFeatureNameInfo);\n\n/**\n * Check if two formats are view format compatible.\n *\n * This function may need to be generalized to use `baseFormat` from `kTextureFormatInfo`.\n */\nexport function viewCompatible(a: GPUTextureFormat, b: GPUTextureFormat): boolean {\n  return a === b || a + '-srgb' === b || b + '-srgb' === a;\n}\n\nexport function getFeaturesForFormats<T>(\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (GPUFeatureName | undefined)[] {\n  return Array.from(new Set(formats.map(f => (f ? kTextureFormatInfo[f].feature : undefined))));\n}\n\nexport function filterFormatsByFeature<T>(\n  feature: GPUFeatureName | undefined,\n  formats: readonly (T & (GPUTextureFormat | undefined))[]\n): readonly (T & (GPUTextureFormat | undefined))[] {\n  return formats.filter(f => f === undefined || kTextureFormatInfo[f].feature === feature);\n}\n\nexport const kFeaturesForFormats = getFeaturesForFormats(kTextureFormats);\n"],"mappings":"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"}