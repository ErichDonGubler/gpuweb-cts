{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/getCurrentTexture.spec.ts"],"names":["description","SkipTestCase","makeTestGroup","assert","unreachable","GPUTest","kAllCanvasTypes","createCanvas","GPUContextTest","initCanvasContext","canvasType","canvas","ctx","getContext","configure","device","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","g","test","desc","params","u","combine","fn","t","shouldThrow","getCurrentTexture","prevTexture","currentTexture","expect","unconfigure","frameTexture","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","expectSingleColor","size","width","height","exp","R","G","B","A","destroy","beginSubcases","beforeAllSubcases","OffscreenCanvas","prototype","clearTexture","Promise","resolve","frameCount","frameCheck","requestAnimationFrame","transferToImageBitmap"],"mappings":"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","sourcesContent":["export const description = `\nTests for GPUCanvasContext.getCurrentTexture.\n`;\n\nimport { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas, CanvasType } from '../../util/create_elements.js';\n\nclass GPUContextTest extends GPUTest {\n  initCanvasContext(canvasType: CanvasType = 'onscreen'): GPUCanvasContext {\n    const canvas = createCanvas(this, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu' as const);\n    assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: this.device,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    return ctx;\n  }\n}\n\nexport const g = makeTestGroup(GPUContextTest);\n\ng.test('configured')\n  .desc(\n    `Checks that calling getCurrentTexture requires the context to be configured first, and\n  that each call to configure causes getCurrentTexture to return a new texture.`\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const canvas = createCanvas(t, t.params.canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu' as const);\n    assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n    // Calling getCurrentTexture prior to configuration should throw an exception.\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Once the context has been configured getCurrentTexture can be called.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Calling configure again with different values will change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling configure again with the same values will still change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling getCurrentTexture after calling unconfigure should throw an exception.\n    ctx.unconfigure();\n\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n  });\n\ng.test('single_frames')\n  .desc(`Checks that the value of getCurrentTexture is consistent within a single frame.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    const frameTexture = ctx.getCurrentTexture();\n\n    // Calling getCurrentTexture a second time returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: frameTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Calling getCurrentTexture after performing some work on the texture returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    // Ensure that getCurrentTexture does not clear the texture.\n    t.expectSingleColor(frameTexture, frameTexture.format, {\n      size: [frameTexture.width, frameTexture.height, 1],\n      exp: { R: 1, G: 0, B: 0, A: 1 },\n    });\n\n    frameTexture.destroy();\n\n    // Calling getCurrentTexture after destroying the texture still returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n  });\n\ng.test('multiple_frames')\n  .desc(`Checks that the value of getCurrentTexture differs across multiple frames.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('clearTexture', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { canvasType } = t.params;\n    if (canvasType === 'offscreen' && !('transferToImageBitmap' in OffscreenCanvas.prototype)) {\n      throw new SkipTestCase('transferToImageBitmap not supported');\n    }\n  })\n  .fn(async t => {\n    const { canvasType, clearTexture } = t.params;\n\n    return new Promise(resolve => {\n      const ctx = t.initCanvasContext(canvasType);\n      let prevTexture: GPUTexture | undefined;\n      let frameCount = 0;\n\n      async function frameCheck() {\n        const currentTexture = ctx.getCurrentTexture();\n\n        if (prevTexture) {\n          // Ensure that each frame a new texture object is returned.\n          t.expect(currentTexture !== prevTexture);\n\n          // Ensure that texture contents are transparent black.\n          t.expectSingleColor(currentTexture, currentTexture.format, {\n            size: [currentTexture.width, currentTexture.height, 1],\n            exp: { R: 0, G: 0, B: 0, A: 0 },\n          });\n        }\n\n        if (clearTexture) {\n          // Clear the texture to test that texture contents don't carry over from frame to frame.\n          const encoder = t.device.createCommandEncoder();\n          const pass = encoder.beginRenderPass({\n            colorAttachments: [\n              {\n                view: currentTexture.createView(),\n                clearValue: [1.0, 0.0, 0.0, 1.0],\n                loadOp: 'clear',\n                storeOp: 'store',\n              },\n            ],\n          });\n          pass.end();\n          t.device.queue.submit([encoder.finish()]);\n        }\n\n        prevTexture = currentTexture;\n\n        if (frameCount++ < 5) {\n          // Which method will be used to begin a new \"frame\"?\n          switch (canvasType) {\n            case 'onscreen':\n              requestAnimationFrame(frameCheck);\n              break;\n            case 'offscreen': {\n              (ctx.canvas as OffscreenCanvas).transferToImageBitmap();\n              // The beginning of frameCheck runs immediately (in the same task), so this\n              // verifies the state has changed synchronously.\n              void frameCheck();\n              break;\n            }\n            default:\n              unreachable();\n          }\n        } else {\n          resolve();\n        }\n      }\n\n      void frameCheck();\n    });\n  });\n\ng.test('resize')\n  .desc(`Checks the value of getCurrentTexture differs when the canvas is resized.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Trigger a resize by changing the width.\n    ctx.canvas.width = 4;\n\n    // When the canvas resizes the texture returned by getCurrentTexture should immediately begin\n    // returning a new texture matching the update dimensions.\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n\n    // The width and height of the previous texture should remain unchanged.\n    t.expect(prevTexture.width === 2);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Trigger a resize by changing the height.\n    ctx.canvas.height = 4;\n\n    // Check to ensure the texture is resized again.\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n    t.expect(prevTexture.width === 4);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Simply setting the canvas width and height values to their current values should not trigger\n    // a change in the texture.\n    ctx.canvas.width = 4;\n    ctx.canvas.height = 4;\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture === currentTexture);\n  });\n"],"file":"getCurrentTexture.spec.js"}