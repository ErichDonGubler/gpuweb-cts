{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/readbackFromWebGPUCanvas.spec.ts"],"names":["description","makeTestGroup","assert","raceWithRejectOnTimeout","unreachable","kCanvasAlphaModes","kCanvasTextureFormats","GPUTest","checkElementsEqual","kAllCanvasTypes","createCanvas","createOnscreenCanvas","g","kPixelValue","kPixelValueFloat","expect","Uint8ClampedArray","initCanvasContent","t","format","alphaMode","canvasType","canvas","ctx","getContext","configure","device","usage","GPUTextureUsage","COPY_SRC","COPY_DST","canvasTexture","getCurrentTexture","tempTexture","createTexture","size","width","height","depthOrArrayLayers","RENDER_ATTACHMENT","tempTextureView","createView","encoder","createCommandEncoder","clearOnePixel","origin","color","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","end","copyTextureToTexture","texture","queue","submit","finish","destroy","onSubmittedWorkDone","checkImageResult","image","drawImage","readPixelsFrom2DCanvasAndCompare","actual","getImageData","data","expectOK","test","desc","params","u","combine","fn","snapshot","snapshotType","url","toDataURL","img","Image","src","decode","blobFromCanvas","Promise","resolve","toBlob","blob","URL","createObjectURL","createImageBitmap","offscreenCanvas","convertToBlob","undefined","skip","transferToImageBitmap","webgl","upload","expectCanvas","gl","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixels","Uint8Array","readPixels","webgpuCanvasType","canvas2DType"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,MAAT,EAAiBC,uBAAjB,EAA0CC,WAA1C,QAA6D,8BAA7D;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,0BAAzD;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,kBAAT,QAAmC,8BAAnC;AACA;AACEC,eADF;;AAGEC,YAHF;AAIEC,oBAJF;AAKO,+BALP;;AAOA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACM,OAAD,CAAvB;;AAEP;AACA;AACA;AACA;AACA;AACA,MAAMM,WAAW,GAAG,IAApB;AACA,MAAMC,gBAAgB,GAAG,OAAO,IAAhC,C,CAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,GAAG;;AAEb,YAAU,IAAIC,iBAAJ,CAAsB;AAC9B,GAD8B,EAC3B,CAD2B,EACxBH,WADwB,EACX,IADW,EACL;AACzB,GAF8B,EAE3BA,WAF2B,EAEd,CAFc,EAEX,IAFW,EAEL;AACzBA,EAAAA,WAH8B,EAGjB,CAHiB,EAGd,CAHc,EAGX,IAHW,EAGL;AACzBA,EAAAA,WAJ8B,EAIjBA,WAJiB,EAIJ,CAJI,EAID,IAJC,CAIK;AAJL,GAAtB,CAFG;;AASb,mBAAiB,IAAIG,iBAAJ,CAAsB;AACrC,GADqC,EAClC,CADkC,EAC/B,IAD+B,EACzBH,WADyB,EACZ;AACzB,GAFqC,EAElC,IAFkC,EAE5B,CAF4B,EAEzBA,WAFyB,EAEZ;AACzB,MAHqC,EAG/B,CAH+B,EAG5B,CAH4B,EAGzBA,WAHyB,EAGZ;AACzB,MAJqC,EAI/B,IAJ+B,EAIzB,CAJyB,EAItBA,WAJsB,CAIT;AAJS,GAAtB,CATJ,EAAf;;;AAiBA,eAAeI,iBAAf;AACEC,CADF;AAEEC,MAFF;AAGEC,SAHF;AAIEC,UAJF;AAKE;AACA,QAAMC,MAAM,GAAGZ,YAAY,CAACQ,CAAD,EAAIG,UAAJ,EAAgB,CAAhB,EAAmB,CAAnB,CAA3B;AACA,QAAME,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,QAAlB,CAAZ;AACAtB,EAAAA,MAAM,CAACqB,GAAG,KAAK,IAAT,EAAe,0CAAf,CAAN;;AAEAA,EAAAA,GAAG,CAACE,SAAJ,CAAc;AACZC,IAAAA,MAAM,EAAER,CAAC,CAACQ,MADE;AAEZP,IAAAA,MAFY;AAGZQ,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHtC;AAIZV,IAAAA,SAJY,EAAd;;;AAOA,QAAMW,aAAa,GAAGR,GAAG,CAACS,iBAAJ,EAAtB;AACA,QAAMC,WAAW,GAAGf,CAAC,CAACQ,MAAF,CAASQ,aAAT,CAAuB;AACzCC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EADmC;AAEzCnB,IAAAA,MAFyC;AAGzCQ,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACW,iBAHT,EAAvB,CAApB;;AAKA,QAAMC,eAAe,GAAGP,WAAW,CAACQ,UAAZ,EAAxB;AACA,QAAMC,OAAO,GAAGxB,CAAC,CAACQ,MAAF,CAASiB,oBAAT,EAAhB;;AAEA,QAAMC,aAAa,GAAG,CAACC,MAAD,EAAsBC,KAAtB,KAA0C;AAC9D,UAAMC,IAAI,GAAGL,OAAO,CAACM,eAAR,CAAwB;AACnCC,MAAAA,gBAAgB,EAAE;AAChB,QAAEC,IAAI,EAAEV,eAAR,EAAyBW,UAAU,EAAEL,KAArC,EAA4CM,MAAM,EAAE,OAApD,EAA6DC,OAAO,EAAE,OAAtE,EADgB,CADiB,EAAxB,CAAb;;;AAKAN,IAAAA,IAAI,CAACO,GAAL;AACAZ,IAAAA,OAAO,CAACa,oBAAR;AACE,MAAEC,OAAO,EAAEvB,WAAX,EADF;AAEE,MAAEuB,OAAO,EAAEzB,aAAX,EAA0Bc,MAA1B,EAFF;AAGE,MAAET,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAHF;;AAKD,GAZD;;AAcAO,EAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI,CAAJ,EAAO9B,gBAAP,EAAyBA,gBAAzB,CAAT,CAAb;AACA8B,EAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC,CAAD,EAAI9B,gBAAJ,EAAsB,CAAtB,EAAyBA,gBAAzB,CAAT,CAAb;AACA8B,EAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC9B,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBA,gBAAzB,CAAT,CAAb;AACA8B,EAAAA,aAAa,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS,CAAC9B,gBAAD,EAAmBA,gBAAnB,EAAqC,CAArC,EAAwCA,gBAAxC,CAAT,CAAb;;AAEAI,EAAAA,CAAC,CAACQ,MAAF,CAAS+B,KAAT,CAAeC,MAAf,CAAsB,CAAChB,OAAO,CAACiB,MAAR,EAAD,CAAtB;AACA1B,EAAAA,WAAW,CAAC2B,OAAZ;;AAEA,QAAM1C,CAAC,CAACQ,MAAF,CAAS+B,KAAT,CAAeI,mBAAf,EAAN;;AAEA,SAAOvC,MAAP;AACD;;AAED,SAASwC,gBAAT,CAA0B5C,CAA1B,EAAsC6C,KAAtC,EAAgEhD,MAAhE,EAA2F;AACzF,QAAMO,MAAyB,GAAGX,oBAAoB,CAACO,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAtD;AACA,QAAMK,GAAG,GAAGD,MAAM,CAACE,UAAP,CAAkB,IAAlB,CAAZ;AACAtB,EAAAA,MAAM,CAACqB,GAAG,KAAK,IAAT,CAAN;AACAA,EAAAA,GAAG,CAACyC,SAAJ,CAAcD,KAAd,EAAqB,CAArB,EAAwB,CAAxB;AACAE,EAAAA,gCAAgC,CAAC/C,CAAD,EAAIK,GAAJ,EAASR,MAAT,CAAhC;AACD;;AAED,SAASkD,gCAAT;AACE/C,CADF;AAEEK,GAFF;AAGER,MAHF;AAIE;AACA,QAAMmD,MAAM,GAAG3C,GAAG,CAAC4C,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6BC,IAA5C;;AAEAlD,EAAAA,CAAC,CAACmD,QAAF,CAAW7D,kBAAkB,CAAC0D,MAAD,EAASnD,MAAT,CAA7B;AACD;;AAEDH,CAAC,CAAC0D,IAAF,CAAO,yBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBpE,qBADrB;AAEGoE,OAFH,CAEW,WAFX,EAEwBrE,iBAFxB;AAGGqE,OAHH,CAGW,cAHX,EAG2B,CAAC,WAAD,EAAc,QAAd,EAAwB,aAAxB,CAH3B,CAbJ;;AAkBGC,EAlBH,CAkBM,OAAMzD,CAAN,KAAW;AACb,QAAMI,MAAM,GAAG,MAAML,iBAAiB,CAACC,CAAD,EAAIA,CAAC,CAACsD,MAAF,CAASrD,MAAb,EAAqBD,CAAC,CAACsD,MAAF,CAASpD,SAA9B,EAAyC,UAAzC,CAAtC;;AAEA,MAAIwD,QAAJ;AACA,UAAQ1D,CAAC,CAACsD,MAAF,CAASK,YAAjB;AACE,SAAK,WAAL,CAAkB;AAChB,cAAMC,GAAG,GAAGxD,MAAM,CAACyD,SAAP,EAAZ;AACA,cAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAU3D,MAAM,CAACc,KAAjB,EAAwBd,MAAM,CAACe,MAA/B,CAAZ;AACA2C,QAAAA,GAAG,CAACE,GAAJ,GAAUJ,GAAV;AACA,cAAM3E,uBAAuB,CAAC6E,GAAG,CAACG,MAAJ,EAAD,EAAe,IAAf,EAAqB,oBAArB,CAA7B;AACAP,QAAAA,QAAQ,GAAGI,GAAX;AACA;AACD;AACD,SAAK,QAAL,CAAe;AACb,cAAMI,cAAc,GAAG,IAAIC,OAAJ,CAAY,CAAAC,OAAO,KAAI;AAC5ChE,UAAAA,MAAM,CAACiE,MAAP,CAAc,CAAAC,IAAI,KAAIF,OAAO,CAACE,IAAD,CAA7B;AACD,SAFsB,CAAvB;AAGA,cAAMA,IAAI,GAAI,MAAMJ,cAApB;AACA,cAAMN,GAAG,GAAGW,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAAZ;AACA,cAAMR,GAAG,GAAG,IAAIC,KAAJ,CAAU3D,MAAM,CAACc,KAAjB,EAAwBd,MAAM,CAACe,MAA/B,CAAZ;AACA2C,QAAAA,GAAG,CAACE,GAAJ,GAAUJ,GAAV;AACA,cAAM3E,uBAAuB,CAAC6E,GAAG,CAACG,MAAJ,EAAD,EAAe,IAAf,EAAqB,oBAArB,CAA7B;AACAP,QAAAA,QAAQ,GAAGI,GAAX;AACA;AACD;AACD,SAAK,aAAL,CAAoB;AAClBJ,QAAAA,QAAQ,GAAG,MAAMe,iBAAiB,CAACrE,MAAD,CAAlC;AACA;AACD;AACD;AACElB,MAAAA,WAAW,GA1Bf;;;AA6BA0D,EAAAA,gBAAgB,CAAC5C,CAAD,EAAI0D,QAAJ,EAAc7D,MAAM,CAACG,CAAC,CAACsD,MAAF,CAASpD,SAAV,CAApB,CAAhB;AACD,CApDH;;AAsDAR,CAAC,CAAC0D,IAAF,CAAO,0BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBpE,qBADrB;AAEGoE,OAFH,CAEW,WAFX,EAEwBrE,iBAFxB;AAGGqE,OAHH,CAGW,cAHX,EAG2B,CAAC,eAAD,EAAkB,uBAAlB,EAA2C,aAA3C,CAH3B,CAbJ;;AAkBGC,EAlBH,CAkBM,OAAMzD,CAAN,KAAW;AACb,QAAM0E,eAAe,GAAG,MAAM3E,iBAAiB;AAC7CC,EAAAA,CAD6C;AAE7CA,EAAAA,CAAC,CAACsD,MAAF,CAASrD,MAFoC;AAG7CD,EAAAA,CAAC,CAACsD,MAAF,CAASpD,SAHoC;AAI7C,aAJ6C,CAA/C;;;AAOA,MAAIwD,QAAJ;AACA,UAAQ1D,CAAC,CAACsD,MAAF,CAASK,YAAjB;AACE,SAAK,eAAL,CAAsB;AACpB,YAAI,OAAOe,eAAe,CAACC,aAAvB,KAAyCC,SAA7C,EAAwD;AACtD5E,UAAAA,CAAC,CAAC6E,IAAF,CAAO,uDAAP;AACA;AACD;AACD,cAAMP,IAAI,GAAG,MAAMI,eAAe,CAACC,aAAhB,EAAnB;AACA,cAAMf,GAAG,GAAGW,GAAG,CAACC,eAAJ,CAAoBF,IAApB,CAAZ;AACA,cAAMR,GAAG,GAAG,IAAIC,KAAJ,CAAUW,eAAe,CAACxD,KAA1B,EAAiCwD,eAAe,CAACvD,MAAjD,CAAZ;AACA2C,QAAAA,GAAG,CAACE,GAAJ,GAAUJ,GAAV;AACA,cAAM3E,uBAAuB,CAAC6E,GAAG,CAACG,MAAJ,EAAD,EAAe,IAAf,EAAqB,oBAArB,CAA7B;AACAP,QAAAA,QAAQ,GAAGI,GAAX;AACA;AACD;AACD,SAAK,uBAAL,CAA8B;AAC5B,YAAI,OAAOY,eAAe,CAACI,qBAAvB,KAAiDF,SAArD,EAAgE;AAC9D5E,UAAAA,CAAC,CAAC6E,IAAF,CAAO,+DAAP;AACA;AACD;AACDnB,QAAAA,QAAQ,GAAGgB,eAAe,CAACI,qBAAhB,EAAX;AACA;AACD;AACD,SAAK,aAAL,CAAoB;AAClBpB,QAAAA,QAAQ,GAAG,MAAMe,iBAAiB,CAACC,eAAD,CAAlC;AACA;AACD;AACD;AACExF,MAAAA,WAAW,GA3Bf;;;AA8BA0D,EAAAA,gBAAgB,CAAC5C,CAAD,EAAI0D,QAAJ,EAAc7D,MAAM,CAACG,CAAC,CAACsD,MAAF,CAASpD,SAAV,CAApB,CAAhB;AACD,CA1DH;;AA4DAR,CAAC,CAAC0D,IAAF,CAAO,8BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,KAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBpE,qBADrB;AAEGoE,OAFH,CAEW,WAFX,EAEwBrE,iBAFxB;AAGGqE,OAHH,CAGW,OAHX,EAGoB,CAAC,OAAD,EAAU,QAAV,CAHpB;AAIGA,OAJH,CAIW,QAJX,EAIqB,CAAC,YAAD,EAAe,eAAf,CAJrB,CAVJ;;AAgBGC,EAhBH,CAgBM,OAAMzD,CAAN,KAAW;AACb,QAAM,EAAEC,MAAF,EAAU8E,KAAV,EAAiBC,MAAjB,KAA4BhF,CAAC,CAACsD,MAApC;AACA,QAAMlD,MAAM,GAAG,MAAML,iBAAiB,CAACC,CAAD,EAAIC,MAAJ,EAAYD,CAAC,CAACsD,MAAF,CAASpD,SAArB,EAAgC,UAAhC,CAAtC;;AAEA,QAAM+E,YAA+B,GAAGxF,oBAAoB,CAACO,CAAD,EAAII,MAAM,CAACc,KAAX,EAAkBd,MAAM,CAACe,MAAzB,CAA5D;AACA,QAAM+D,EAAE,GAAGD,YAAY,CAAC3E,UAAb,CAAwByE,KAAxB,CAAX;AACA,MAAIG,EAAE,KAAK,IAAX,EAAiB;AACf;AACD;;AAED,QAAM5C,OAAO,GAAG4C,EAAE,CAAClE,aAAH,EAAhB;AACAkE,EAAAA,EAAE,CAACC,WAAH,CAAeD,EAAE,CAACE,UAAlB,EAA8B9C,OAA9B;AACA,UAAQ0C,MAAR;AACE,SAAK,YAAL,CAAmB;AACjBE,QAAAA,EAAE,CAACG,UAAH,CAAcH,EAAE,CAACE,UAAjB,EAA6B,CAA7B,EAAgCF,EAAE,CAACI,IAAnC,EAAyCJ,EAAE,CAACI,IAA5C,EAAkDJ,EAAE,CAACK,aAArD,EAAoEnF,MAApE;AACA;AACD;AACD,SAAK,eAAL,CAAsB;AACpB8E,QAAAA,EAAE,CAACG,UAAH;AACEH,QAAAA,EAAE,CAACE,UADL;AAEE,SAFF;AAGEF,QAAAA,EAAE,CAACI,IAHL;AAIElF,QAAAA,MAAM,CAACc,KAJT;AAKEd,QAAAA,MAAM,CAACe,MALT;AAME,SANF;AAOE+D,QAAAA,EAAE,CAACI,IAPL;AAQEJ,QAAAA,EAAE,CAACK,aARL;AASE,YATF;;AAWAL,QAAAA,EAAE,CAACM,aAAH,CAAiBN,EAAE,CAACE,UAApB,EAAgC,CAAhC,EAAmC,CAAnC,EAAsC,CAAtC,EAAyCF,EAAE,CAACI,IAA5C,EAAkDJ,EAAE,CAACK,aAArD,EAAoEnF,MAApE;AACA;AACD;AACD;AACElB,MAAAA,WAAW,GArBf;;;AAwBA,QAAMuG,EAAE,GAAGP,EAAE,CAACQ,iBAAH,EAAX;;AAEAR,EAAAA,EAAE,CAACS,eAAH,CAAmBT,EAAE,CAACU,WAAtB,EAAmCH,EAAnC;AACAP,EAAAA,EAAE,CAACW,oBAAH,CAAwBX,EAAE,CAACU,WAA3B,EAAwCV,EAAE,CAACY,iBAA3C,EAA8DZ,EAAE,CAACE,UAAjE,EAA6E9C,OAA7E,EAAsF,CAAtF;;AAEA,QAAMyD,MAAM,GAAG,IAAIC,UAAJ,CAAe5F,MAAM,CAACc,KAAP,GAAed,MAAM,CAACe,MAAtB,GAA+B,CAA9C,CAAf;AACA+D,EAAAA,EAAE,CAACe,UAAH,CAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0Bf,EAAE,CAACI,IAA7B,EAAmCJ,EAAE,CAACK,aAAtC,EAAqDQ,MAArD;AACA,QAAM/C,MAAM,GAAG,IAAIlD,iBAAJ,CAAsBiG,MAAtB,CAAf;;AAEA/F,EAAAA,CAAC,CAACmD,QAAF,CAAW7D,kBAAkB,CAAC0D,MAAD,EAASnD,MAAM,CAACG,CAAC,CAACsD,MAAF,CAASpD,SAAV,CAAf,CAA7B;AACD,CA9DH;;AAgEAR,CAAC,CAAC0D,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,KARA;;AAUGC,MAVH,CAUU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBpE,qBADrB;AAEGoE,OAFH,CAEW,WAFX,EAEwBrE,iBAFxB;AAGGqE,OAHH,CAGW,kBAHX,EAG+BjE,eAH/B;AAIGiE,OAJH,CAIW,cAJX,EAI2BjE,eAJ3B,CAXJ;;AAiBGkE,EAjBH,CAiBM,OAAMzD,CAAN,KAAW;AACb,QAAM,EAAEC,MAAF,EAAUiG,gBAAV,EAA4BhG,SAA5B,EAAuCiG,YAAvC,KAAwDnG,CAAC,CAACsD,MAAhE;;AAEA,QAAMlD,MAAM,GAAG,MAAML,iBAAiB,CAACC,CAAD,EAAIC,MAAJ,EAAYC,SAAZ,EAAuBgG,gBAAvB,CAAtC;;AAEA,QAAMjB,YAAY,GAAGzF,YAAY,CAACQ,CAAD,EAAImG,YAAJ,EAAkB/F,MAAM,CAACc,KAAzB,EAAgCd,MAAM,CAACe,MAAvC,CAAjC;AACA,QAAMd,GAAG,GAAG4E,YAAY,CAAC3E,UAAb,CAAwB,IAAxB,CAAZ;AACA,MAAID,GAAG,KAAK,IAAZ,EAAkB;AAChBL,IAAAA,CAAC,CAAC6E,IAAF,CAAOsB,YAAY,GAAG,+BAAtB;AACA;AACD;AACD9F,EAAAA,GAAG,CAACyC,SAAJ,CAAc1C,MAAd,EAAsB,CAAtB,EAAyB,CAAzB;;AAEA2C,EAAAA,gCAAgC,CAAC/C,CAAD,EAAIK,GAAJ,EAASR,MAAM,CAACG,CAAC,CAACsD,MAAF,CAASpD,SAAV,CAAf,CAAhC;AACD,CA/BH","sourcesContent":["export const description = `\nTests for readback from WebGPU Canvas.\n\nTODO: implement all canvas types, see TODO on kCanvasTypes.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, raceWithRejectOnTimeout, unreachable } from '../../../common/util/util.js';\nimport { kCanvasAlphaModes, kCanvasTextureFormats } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { checkElementsEqual } from '../../util/check_contents.js';\nimport {\n  kAllCanvasTypes,\n  CanvasType,\n  createCanvas,\n  createOnscreenCanvas,\n} from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// We choose 0x66 as the value for each color and alpha channel\n// 0x66 / 0xff = 0.4\n// Given a pixel value of RGBA = (0x66, 0, 0, 0x66) in the source WebGPU canvas,\n// For alphaMode = opaque, the copy output should be RGBA = (0x66, 0, 0, 0xff)\n// For alphaMode = premultiplied, the copy output should be RGBA = (0xff, 0, 0, 0x66)\nconst kPixelValue = 0x66;\nconst kPixelValueFloat = 0x66 / 0xff; // 0.4\n\n// Use four pixels rectangle for the test:\n// blue: top-left;\n// green: top-right;\n// red: bottom-left;\n// yellow: bottom-right;\nconst expect = {\n  /* prettier-ignore */\n  'opaque': new Uint8ClampedArray([\n    0, 0, kPixelValue, 0xff, // blue\n    0, kPixelValue, 0, 0xff, // green\n    kPixelValue, 0, 0, 0xff, // red\n    kPixelValue, kPixelValue, 0, 0xff, // yellow\n  ]),\n  /* prettier-ignore */\n  'premultiplied': new Uint8ClampedArray([\n    0, 0, 0xff, kPixelValue, // blue\n    0, 0xff, 0, kPixelValue, // green\n    0xff, 0, 0, kPixelValue, // red\n    0xff, 0xff, 0, kPixelValue, // yellow\n  ]),\n};\n\nasync function initCanvasContent<T extends CanvasType>(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  alphaMode: GPUCanvasAlphaMode,\n  canvasType: T\n) {\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu' as const);\n  assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    alphaMode,\n  });\n\n  const canvasTexture = ctx.getCurrentTexture();\n  const tempTexture = t.device.createTexture({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const tempTextureView = tempTexture.createView();\n  const encoder = t.device.createCommandEncoder();\n\n  const clearOnePixel = (origin: GPUOrigin3D, color: GPUColor) => {\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        { view: tempTextureView, clearValue: color, loadOp: 'clear', storeOp: 'store' },\n      ],\n    });\n    pass.end();\n    encoder.copyTextureToTexture(\n      { texture: tempTexture },\n      { texture: canvasTexture, origin },\n      { width: 1, height: 1 }\n    );\n  };\n\n  clearOnePixel([0, 0], [0, 0, kPixelValueFloat, kPixelValueFloat]);\n  clearOnePixel([1, 0], [0, kPixelValueFloat, 0, kPixelValueFloat]);\n  clearOnePixel([0, 1], [kPixelValueFloat, 0, 0, kPixelValueFloat]);\n  clearOnePixel([1, 1], [kPixelValueFloat, kPixelValueFloat, 0, kPixelValueFloat]);\n\n  t.device.queue.submit([encoder.finish()]);\n  tempTexture.destroy();\n\n  await t.device.queue.onSubmittedWorkDone();\n\n  return canvas;\n}\n\nfunction checkImageResult(t: GPUTest, image: CanvasImageSource, expect: Uint8ClampedArray) {\n  const canvas: HTMLCanvasElement = createOnscreenCanvas(t, 2, 2);\n  const ctx = canvas.getContext('2d');\n  assert(ctx !== null);\n  ctx.drawImage(image, 0, 0);\n  readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n}\n\nfunction readPixelsFrom2DCanvasAndCompare(\n  t: GPUTest,\n  ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n  expect: Uint8ClampedArray\n) {\n  const actual = ctx.getImageData(0, 0, 2, 2).data;\n\n  t.expectOK(checkElementsEqual(actual, expect));\n}\n\ng.test('onscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of canvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot canvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('snapshotType', ['toDataURL', 'toBlob', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const canvas = await initCanvasContent(t, t.params.format, t.params.alphaMode, 'onscreen');\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'toDataURL': {\n        const url = canvas.toDataURL();\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'toBlob': {\n        const blobFromCanvas = new Promise(resolve => {\n          canvas.toBlob(blob => resolve(blob));\n        });\n        const blob = (await blobFromCanvas) as Blob;\n        const url = URL.createObjectURL(blob);\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect[t.params.alphaMode]);\n  });\n\ng.test('offscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of offscreenCanvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot offscreenCanvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('snapshotType', ['convertToBlob', 'transferToImageBitmap', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const offscreenCanvas = await initCanvasContent(\n      t,\n      t.params.format,\n      t.params.alphaMode,\n      'offscreen'\n    );\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'convertToBlob': {\n        if (typeof offscreenCanvas.convertToBlob === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.convertToBlob\");\n          return;\n        }\n        const blob = await offscreenCanvas.convertToBlob();\n        const url = URL.createObjectURL(blob);\n        const img = new Image(offscreenCanvas.width, offscreenCanvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'transferToImageBitmap': {\n        if (typeof offscreenCanvas.transferToImageBitmap === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.transferToImageBitmap\");\n          return;\n        }\n        snapshot = offscreenCanvas.transferToImageBitmap();\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(offscreenCanvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect[t.params.alphaMode]);\n  });\n\ng.test('onscreenCanvas,uploadToWebGL')\n  .desc(\n    `\n    Ensure upload WebGPU context canvas to webgl texture is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - upload methods = {texImage2D, texSubImage2D}\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('webgl', ['webgl', 'webgl2'])\n      .combine('upload', ['texImage2D', 'texSubImage2D'])\n  )\n  .fn(async t => {\n    const { format, webgl, upload } = t.params;\n    const canvas = await initCanvasContent(t, format, t.params.alphaMode, 'onscreen');\n\n    const expectCanvas: HTMLCanvasElement = createOnscreenCanvas(t, canvas.width, canvas.height);\n    const gl = expectCanvas.getContext(webgl) as WebGLRenderingContext | WebGL2RenderingContext;\n    if (gl === null) {\n      return;\n    }\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    switch (upload) {\n      case 'texImage2D': {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      case 'texSubImage2D': {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          canvas.width,\n          canvas.height,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          null\n        );\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    const fb = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    const pixels = new Uint8Array(canvas.width * canvas.height * 4);\n    gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    const actual = new Uint8ClampedArray(pixels);\n\n    t.expectOK(checkElementsEqual(actual, expect[t.params.alphaMode]));\n  });\n\ng.test('drawTo2DCanvas')\n  .desc(\n    `\n    Ensure draw WebGPU context canvas to 2d context canvas/offscreenCanvas is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - WebGPU canvas type = {\"onscreen\", \"offscreen\"}\n    - 2d canvas type = {\"onscreen\", \"offscreen\"}\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('webgpuCanvasType', kAllCanvasTypes)\n      .combine('canvas2DType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const { format, webgpuCanvasType, alphaMode, canvas2DType } = t.params;\n\n    const canvas = await initCanvasContent(t, format, alphaMode, webgpuCanvasType);\n\n    const expectCanvas = createCanvas(t, canvas2DType, canvas.width, canvas.height);\n    const ctx = expectCanvas.getContext('2d');\n    if (ctx === null) {\n      t.skip(canvas2DType + ' canvas cannot get 2d context');\n      return;\n    }\n    ctx.drawImage(canvas, 0, 0);\n\n    readPixelsFrom2DCanvasAndCompare(t, ctx, expect[t.params.alphaMode]);\n  });\n"],"file":"readbackFromWebGPUCanvas.spec.js"}