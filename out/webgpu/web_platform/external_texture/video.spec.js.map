{"version":3,"file":"video.spec.js","names":["description","makeTestGroup","GPUTest","TextureTestMixin","startPlayingAndWaitForVideo","getVideoFrameFromVideoElement","getVideoElement","kHeight","kWidth","kFormat","kBt601Red","Uint8Array","kBt601Green","kBt601Blue","kBt601Yellow","kVideoExpectations","videoName","_redExpectation","_greenExpectation","_blueExpectation","_yellowExpectation","kVideoRotationExpectations","_topLeftExpectation","_topRightExpectation","_bottomLeftExpectation","_bottomRightExpectation","g","createExternalTextureSamplingTestPipeline","t","pipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","createExternalTextureSamplingTestBindGroup","checkNonStandardIsZeroCopy","source","linearSampler","createSampler","externalTexture","importExternalTexture","expectZeroCopyNonStandard","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","expect","isZeroCopy","checkNonStandardIsZeroCopyIfAvailable","GPUExternalTexture","prototype","hasOwnProperty","test","desc","params","u","combineWithParams","combine","fn","sourceType","VideoFrame","skip","videoElement","colorAttachment","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp","close","outputTexture","STORAGE_BINDING","createComputePipeline","compute","bg","encoder","pass","beginComputePass","dispatchWorkgroups"],"sources":["../../../../src/webgpu/web_platform/external_texture/video.spec.ts"],"sourcesContent":["export const description = `\nTests for external textures from HTMLVideoElement (and other video-type sources?).\n\n- videos with various encodings/formats (webm vp8, webm vp9, ogg theora, mp4), color spaces\n  (bt.601, bt.709, bt.2020)\n- TODO: enhance with more cases with crop, rotation, etc.\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest, TextureTestMixin } from '../../gpu_test.js';\nimport {\n  startPlayingAndWaitForVideo,\n  getVideoFrameFromVideoElement,\n  getVideoElement,\n} from '../../web_platform/util.js';\n\nconst kHeight = 16;\nconst kWidth = 16;\nconst kFormat = 'rgba8unorm';\n\n// The process to calculate these expected pixel values can be found:\n// https://github.com/gpuweb/cts/pull/2242#issuecomment-1430382811\nconst kBt601Red = new Uint8Array([248, 36, 0, 255]);\nconst kBt601Green = new Uint8Array([64, 252, 0, 255]);\nconst kBt601Blue = new Uint8Array([26, 35, 255, 255]);\nconst kBt601Yellow = new Uint8Array([254, 253, 0, 255]);\n\nconst kVideoExpectations = [\n  {\n    videoName: 'four-colors-vp8-bt601.webm',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-theora-bt601.ogv',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-h264-bt601.mp4',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-vp9-bt601.webm',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-vp9-bt709.webm',\n    _redExpectation: new Uint8Array([255, 0, 0, 255]),\n    _greenExpectation: new Uint8Array([0, 255, 0, 255]),\n    _blueExpectation: new Uint8Array([0, 0, 255, 255]),\n    _yellowExpectation: new Uint8Array([255, 255, 0, 255]),\n  },\n] as const;\n\nconst kVideoRotationExpectations = [\n  {\n    videoName: 'four-colors-h264-bt601-rotate-90.mp4',\n    _topLeftExpectation: kBt601Red,\n    _topRightExpectation: kBt601Green,\n    _bottomLeftExpectation: kBt601Yellow,\n    _bottomRightExpectation: kBt601Blue,\n  },\n  {\n    videoName: 'four-colors-h264-bt601-rotate-180.mp4',\n    _topLeftExpectation: kBt601Green,\n    _topRightExpectation: kBt601Blue,\n    _bottomLeftExpectation: kBt601Red,\n    _bottomRightExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-h264-bt601-rotate-270.mp4',\n    _topLeftExpectation: kBt601Blue,\n    _topRightExpectation: kBt601Yellow,\n    _bottomLeftExpectation: kBt601Green,\n    _bottomRightExpectation: kBt601Red,\n  },\n] as const;\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\nfunction createExternalTextureSamplingTestPipeline(t: GPUTest): GPURenderPipeline {\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec4<f32>, 6>(\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>( 1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0,  1.0, 0.0, 1.0)\n            );\n            return pos[VertexIndex];\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var s : sampler;\n        @group(0) @binding(1) var t : texture_external;\n\n        @fragment fn main(@builtin(position) FragCoord : vec4<f32>)\n                                 -> @location(0) vec4<f32> {\n            return textureSampleBaseClampToEdge(t, s, FragCoord.xy / vec2<f32>(16.0, 16.0));\n        }\n        `,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: kFormat,\n        },\n      ],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  return pipeline;\n}\n\nfunction createExternalTextureSamplingTestBindGroup(\n  t: GPUTest,\n  checkNonStandardIsZeroCopy: true | undefined,\n  source: HTMLVideoElement | VideoFrame,\n  pipeline: GPURenderPipeline\n): GPUBindGroup {\n  const linearSampler = t.device.createSampler();\n\n  const externalTexture = t.device.importExternalTexture({\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    source: source as any,\n  });\n\n  if (checkNonStandardIsZeroCopy) {\n    expectZeroCopyNonStandard(t, externalTexture);\n  }\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: linearSampler,\n      },\n      {\n        binding: 1,\n        resource: externalTexture,\n      },\n    ],\n  });\n\n  return bindGroup;\n}\n\n/**\n * Expect the non-standard `externalTexture.isZeroCopy` is true.\n */\nfunction expectZeroCopyNonStandard(t: GPUTest, externalTexture: GPUExternalTexture): void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t.expect((externalTexture as any).isZeroCopy, '0-copy import failed.');\n}\n\n/**\n * `externalTexture.isZeroCopy` is a non-standard Chrome API for testing only.\n * It is exposed by enabling chrome://flags/#enable-webgpu-developer-features\n *\n * If the API is available, this function adds a parameter `checkNonStandardIsZeroCopy`.\n * Cases with that parameter set to `true` will fail if `externalTexture.isZeroCopy` is not true.\n */\nfunction checkNonStandardIsZeroCopyIfAvailable(): { checkNonStandardIsZeroCopy?: true }[] {\n  if (\n    typeof GPUExternalTexture !== 'undefined' &&\n    // eslint-disable-next-line no-prototype-builtins\n    GPUExternalTexture.prototype.hasOwnProperty('isZeroCopy')\n  ) {\n    return [{}, { checkNonStandardIsZeroCopy: true }];\n  } else {\n    return [{}];\n  }\n}\n\ng.test('importExternalTexture,sample')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sample from it\nfor several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(\n        t,\n        t.params.checkNonStandardIsZeroCopy,\n        source,\n        pipeline\n      );\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        // Top-left should be yellow.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,sampleWithRotationMetadata')\n  .desc(\n    `\nTests that when importing an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sampling from\nit will honor rotation metadata.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoRotationExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(\n        t,\n        t.params.checkNonStandardIsZeroCopy,\n        source,\n        pipeline\n      );\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._topLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._topRightExpectation },\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._bottomLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._bottomRightExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,compute')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture and use it in a\ncompute shader, for several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combineWithParams(checkNonStandardIsZeroCopyIfAvailable())\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n      t.skip('WebCodec is not supported');\n    }\n\n    const videoElement = getVideoElement(t, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n      const externalTexture = t.device.importExternalTexture({\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        source: source as any,\n      });\n      if (t.params.checkNonStandardIsZeroCopy) {\n        expectZeroCopyNonStandard(t, externalTexture);\n      }\n      const outputTexture = t.device.createTexture({\n        format: 'rgba8unorm',\n        size: [2, 2, 1],\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n      });\n\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          // Shader loads 4 pixels near each corner, and then store them in a storage texture.\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var t : texture_external;\n              @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n              @compute @workgroup_size(1) fn main() {\n                var yellow : vec4<f32> = textureLoad(t, vec2<i32>(80, 60));\n                textureStore(outImage, vec2<i32>(0, 0), yellow);\n                var red : vec4<f32> = textureLoad(t, vec2<i32>(240, 60));\n                textureStore(outImage, vec2<i32>(0, 1), red);\n                var blue : vec4<f32> = textureLoad(t, vec2<i32>(80, 180));\n                textureStore(outImage, vec2<i32>(1, 0), blue);\n                var green : vec4<f32> = textureLoad(t, vec2<i32>(240, 180));\n                textureStore(outImage, vec2<i32>(1, 1), green);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [\n          { binding: 0, resource: externalTexture },\n          { binding: 1, resource: outputTexture.createView() },\n        ],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: outputTexture }, [\n        // Top-left should be yellow.\n        { coord: { x: 0, y: 0 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: 0, y: 1 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: 1, y: 0 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: 1, y: 1 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n"],"mappings":"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"}