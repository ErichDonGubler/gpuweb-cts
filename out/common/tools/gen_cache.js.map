{"version":3,"sources":["../../../src/common/tools/gen_cache.ts"],"names":["fs","path","process","dataCache","setIsBuildingDataCache","usage","rc","console","error","exit","argv","indexOf","length","outRootDir","setStore","load","Promise","resolve","reject","readFile","err","data","message","suiteDir","slice","build","specFileSuffix","__filename","endsWith","crawlFilesRecursively","dir","subpathInfo","all","promises","readdir","map","d","p","join","stats","stat","isDirectory","isFile","files","filter","i","concat","reduce","a","b","existsSync","filesToEnumerate","sort","cacheablePathToTS","Map","file","pathWithoutExtension","substring","mod","serialize","undefined","cacheable","existing","get","set","serialized","outPath","mkdirSync","dirname","recursive","writeFileSync"],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as process from 'process';\n\nimport { Cacheable, dataCache, setIsBuildingDataCache } from '../framework/data_cache.js';\n\nfunction usage(rc: number): void {\n  console.error(`Usage: tools/gen_cache [options] [OUT_DIR] [SUITE_DIRS...]\n\nFor each suite in SUITE_DIRS, pre-compute data that is expensive to generate\nat runtime and store it under OUT_DIR. If the data file is found then the\nDataCache will load this instead of building the expensive data at CTS runtime.\n\nOptions:\n  --help          Print this message and exit.\n`);\n  process.exit(rc);\n}\n\nconst argv = process.argv;\nif (argv.indexOf('--help') !== -1) {\n  usage(0);\n}\n\nif (argv.length < 4) {\n  usage(0);\n}\n\nconst outRootDir = argv[2];\n\ndataCache.setStore({\n  load: (path: string) => {\n    return new Promise<string>((resolve, reject) => {\n      fs.readFile(`data/${path}`, 'utf8', (err, data) => {\n        if (err !== null) {\n          reject(err.message);\n        } else {\n          resolve(data);\n        }\n      });\n    });\n  },\n});\nsetIsBuildingDataCache();\n\nvoid (async () => {\n  for (const suiteDir of argv.slice(3)) {\n    await build(suiteDir);\n  }\n})();\n\nconst specFileSuffix = __filename.endsWith('.ts') ? '.spec.ts' : '.spec.js';\n\nasync function crawlFilesRecursively(dir: string): Promise<string[]> {\n  const subpathInfo = await Promise.all(\n    (await fs.promises.readdir(dir)).map(async d => {\n      const p = path.join(dir, d);\n      const stats = await fs.promises.stat(p);\n      return {\n        path: p,\n        isDirectory: stats.isDirectory(),\n        isFile: stats.isFile(),\n      };\n    })\n  );\n\n  const files = subpathInfo\n    .filter(i => i.isFile && i.path.endsWith(specFileSuffix))\n    .map(i => i.path);\n\n  return files.concat(\n    await subpathInfo\n      .filter(i => i.isDirectory)\n      .map(i => crawlFilesRecursively(i.path))\n      .reduce(async (a, b) => (await a).concat(await b), Promise.resolve([]))\n  );\n}\n\nasync function build(suiteDir: string) {\n  if (!fs.existsSync(suiteDir)) {\n    console.error(`Could not find ${suiteDir}`);\n    process.exit(1);\n  }\n\n  // Crawl files and convert paths to be POSIX-style, relative to suiteDir.\n  const filesToEnumerate = (await crawlFilesRecursively(suiteDir)).sort();\n\n  const cacheablePathToTS = new Map<string, string>();\n\n  for (const file of filesToEnumerate) {\n    if (file.endsWith(specFileSuffix)) {\n      const pathWithoutExtension = file.substring(0, file.length - specFileSuffix.length);\n      const mod = await import(`../../../${pathWithoutExtension}.spec.js`);\n      if (mod.d?.serialize !== undefined) {\n        const cacheable = mod.d as Cacheable<unknown>;\n\n        {\n          // Check for collisions\n          const existing = cacheablePathToTS.get(cacheable.path);\n          if (existing !== undefined) {\n            console.error(\n              `error: Cacheable '${cacheable.path}' is emitted by both:\n    '${existing}'\nand\n    '${file}'`\n            );\n            process.exit(1);\n          }\n          cacheablePathToTS.set(cacheable.path, file);\n        }\n\n        const data = await cacheable.build();\n        const serialized = cacheable.serialize(data);\n        const outPath = `${outRootDir}/data/${cacheable.path}`;\n        fs.mkdirSync(path.dirname(outPath), { recursive: true });\n        fs.writeFileSync(outPath, serialized);\n      }\n    }\n  }\n}\n"],"file":"gen_cache.js"}