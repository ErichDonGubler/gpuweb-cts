{"version":3,"sources":["../../../src/common/framework/resources.ts"],"names":["baseResourcePath","crossOriginHost","getAbsoluteBaseResourcePath","path","relparts","window","location","pathname","split","pop","pathparts","i","length","push","join","runningOnLocalHost","hostname","getCrossOriginResourcePath","pathRelativeToResourcesDir","onlineUrl","crossOriginHostName","port","getResourcePath","setBaseResourcePath","setCrossOriginHost","host"],"mappings":";AAAA;AACA,G,CADA;AACA;AACA;AACA;AACA,GACA,IAAIA,gBAAgB,GAAG,aAAvB,CACA,IAAIC,eAAe,GAAG,EAAtB;;AAEA,SAASC,2BAAT,CAAqCC,IAArC,EAAmD;AACjD;AACA,MAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACnB,WAAOA,IAAP;AACD;;AAED;AACA,QAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,CAAjB;AACAJ,EAAAA,QAAQ,CAACK,GAAT;AACA,QAAMC,SAAS,GAAGP,IAAI,CAACK,KAAL,CAAW,GAAX,CAAlB;;AAEA,MAAIG,CAAJ;AACA,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGD,SAAS,CAACE,MAA1B,EAAkC,EAAED,CAApC,EAAuC;AACrC,YAAQD,SAAS,CAACC,CAAD,CAAjB;AACE,WAAK,EAAL;AACE;AACF,WAAK,GAAL;AACE;AACF,WAAK,IAAL;AACEP,QAAAA,QAAQ,CAACK,GAAT;AACA;AACF;AACEL,QAAAA,QAAQ,CAACS,IAAT,CAAcH,SAAS,CAACC,CAAD,CAAvB;AACA,cAVJ;;AAYD;;AAED,SAAOP,QAAQ,CAACU,IAAT,CAAc,GAAd,CAAP;AACD;;AAED,SAASC,kBAAT,GAAuC;AACrC,QAAMC,QAAQ,GAAGX,MAAM,CAACC,QAAP,CAAgBU,QAAjC;AACA,SAAOA,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,WAAzC,IAAwDA,QAAQ,KAAK,KAA5E;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,0BAAT,CAAoCC,0BAApC,EAAwEC,SAAS,GAAG,EAApF,EAAwF;AAC7F;AACA,MAAIlB,eAAe,KAAK,EAAxB,EAA4B;AAC1B;AACEA,MAAAA,eAAe;AACfC,MAAAA,2BAA2B,CAACF,gBAAD,CAD3B;AAEA,SAFA;AAGAkB,MAAAA,0BAJF;;AAMD;;AAED;AACA;AACA;AACA,MAAIH,kBAAkB,EAAtB,EAA0B;AACxB,QAAIK,mBAAmB,GAAG,EAA1B;AACA,QAAId,QAAQ,CAACU,QAAT,KAAsB,WAA1B,EAAuC;AACrCI,MAAAA,mBAAmB,GAAG,kBAAtB;AACD,KAFD,MAEO;AACLA,MAAAA,mBAAmB,GAAG,kBAAtB;AACD;;AAED;AACEA,MAAAA,mBAAmB;AACnB,SADA;AAEAd,MAAAA,QAAQ,CAACe,IAFT;AAGAnB,MAAAA,2BAA2B,CAACF,gBAAD,CAH3B;AAIA,SAJA;AAKAkB,MAAAA,0BANF;;AAQD;;AAED,SAAOC,SAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,eAAT,CAAyBJ,0BAAzB,EAA6D;AAClE,SAAOlB,gBAAgB,GAAG,GAAnB,GAAyBkB,0BAAhC;AACD;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASK,mBAAT,CAA6BpB,IAA7B,EAA2C;AAChDH,EAAAA,gBAAgB,GAAGG,IAAnB;AACD;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASqB,kBAAT,CAA4BC,IAA5B,EAA0C;AAC/CxB,EAAAA,eAAe,GAAGwB,IAAlB;AACD","sourcesContent":["/**\n * Base path for resources. The default value is correct for non-worker WPT, but standalone and\n * workers must access resources using a different base path, so this is overridden in\n * `test_worker-worker.ts` and `standalone.ts`.\n */\nlet baseResourcePath = './resources';\nlet crossOriginHost = '';\n\nfunction getAbsoluteBaseResourcePath(path: string) {\n  // Path is already an absolute one.\n  if (path[0] === '/') {\n    return path;\n  }\n\n  // Path is relative\n  const relparts = window.location.pathname.split('/');\n  relparts.pop();\n  const pathparts = path.split('/');\n\n  let i;\n  for (i = 0; i < pathparts.length; ++i) {\n    switch (pathparts[i]) {\n      case '':\n        break;\n      case '.':\n        break;\n      case '..':\n        relparts.pop();\n        break;\n      default:\n        relparts.push(pathparts[i]);\n        break;\n    }\n  }\n\n  return relparts.join('/');\n}\n\nfunction runningOnLocalHost(): boolean {\n  const hostname = window.location.hostname;\n  return hostname === 'localhost' || hostname === '127.0.0.1' || hostname === '::1';\n}\n\n/**\n * Get a path to a resource in the `resources` directory relative to the current execution context\n * (html file or worker .js file), for `fetch()`, `<img>`, `<video>`, etc but from cross origin host.\n * Provide onlineUrl if the case running online.\n * @internal MAINTENANCE_TODO: Cases may run in the LAN environment (not localhost but no internet\n * access). We temporarily use `crossOriginHost` to configure the cross origin host name in that situation.\n * But opening to  auto-detect mechanism or other solutions.\n */\nexport function getCrossOriginResourcePath(pathRelativeToResourcesDir: string, onlineUrl = '') {\n  // A cross origin host has been configured. Use this to load resource.\n  if (crossOriginHost !== '') {\n    return (\n      crossOriginHost +\n      getAbsoluteBaseResourcePath(baseResourcePath) +\n      '/' +\n      pathRelativeToResourcesDir\n    );\n  }\n\n  // Using 'localhost' and '127.0.0.1' trick to load cross origin resource. Set cross origin host name\n  // to 'localhost' if case is not running in 'localhost' domain. Otherwise, use '127.0.0.1'.\n  // host name to locahost unless the server running in\n  if (runningOnLocalHost()) {\n    let crossOriginHostName = '';\n    if (location.hostname === 'localhost') {\n      crossOriginHostName = 'http://127.0.0.1';\n    } else {\n      crossOriginHostName = 'http://localhost';\n    }\n\n    return (\n      crossOriginHostName +\n      ':' +\n      location.port +\n      getAbsoluteBaseResourcePath(baseResourcePath) +\n      '/' +\n      pathRelativeToResourcesDir\n    );\n  }\n\n  return onlineUrl;\n}\n\n/**\n * Get a path to a resource in the `resources` directory, relative to the current execution context\n * (html file or worker .js file), for `fetch()`, `<img>`, `<video>`, etc. Pass the cross origin host\n * name if wants to load resoruce from cross origin host.\n */\nexport function getResourcePath(pathRelativeToResourcesDir: string) {\n  return baseResourcePath + '/' + pathRelativeToResourcesDir;\n}\n\n/**\n * Set the base resource path (path to the `resources` directory relative to the current\n * execution context).\n */\nexport function setBaseResourcePath(path: string) {\n  baseResourcePath = path;\n}\n\n/**\n * Set the cross origin host and cases related to cross origin\n * will load resource from the given host.\n */\nexport function setCrossOriginHost(host: string) {\n  crossOriginHost = host;\n}\n"],"file":"resources.js"}