{"version":3,"sources":["../../../src/common/framework/data_cache.ts"],"names":["DataCache","setStore","dataStore","setDebugLogger","logger","debugLogger","fetch","cacheable","data","cache","get","path","undefined","log","Promise","resolve","unavailableFiles","has","serialized","load","err","add","deserialize","set","build","msg","Map","Set","dataCache","isBuildingDataCache","getIsBuildingDataCache","setIsBuildingDataCache","value"],"mappings":";AAAA;AACA;;;;;;;;;;AAWA;AACA,OAAO,MAAMA,SAAN,CAAgB;AACrB;AACOC,EAAAA,QAAQ,CAACC,SAAD,EAAuB;AACpC,SAAKA,SAAL,GAAiBA,SAAjB;AACD;;AAED;AACOC,EAAAA,cAAc,CAACC,MAAD,EAAiB;AACpC,SAAKC,WAAL,GAAmBD,MAAnB;AACD;;AAED;AACF;AACA;AACA;AACA;AACoB,QAALE,KAAK,CAAOC,SAAP,EAAkD;AAClE;AACA,QAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,GAAX,CAAeH,SAAS,CAACI,IAAzB,CAAX;AACA,QAAIH,IAAI,KAAKI,SAAb,EAAwB;AACtB,WAAKC,GAAL,CAAS,qBAAT;AACA,aAAOC,OAAO,CAACC,OAAR,CAAgBP,IAAhB,CAAP;AACD;AACD,SAAKK,GAAL,CAAS,sBAAT;AACA;AACA;AACA,QAAI,KAAKX,SAAL,KAAmB,IAAnB,IAA2B,CAAC,KAAKc,gBAAL,CAAsBC,GAAtB,CAA0BV,SAAS,CAACI,IAApC,CAAhC,EAA2E;AACzE,UAAIO,UAAJ;AACA,UAAI;AACFA,QAAAA,UAAU,GAAG,MAAM,KAAKhB,SAAL,CAAeiB,IAAf,CAAoBZ,SAAS,CAACI,IAA9B,CAAnB;AACA,aAAKE,GAAL,CAAS,mBAAT;AACD,OAHD,CAGE,OAAOO,GAAP,EAAY;AACZ;AACA,aAAKP,GAAL,CAAU,mBAAkBN,SAAS,CAACI,IAAK,MAAKS,GAAI,EAApD;AACA,aAAKJ,gBAAL,CAAsBK,GAAtB,CAA0Bd,SAAS,CAACI,IAApC;AACD;AACD,UAAIO,UAAU,KAAKN,SAAnB,EAA8B;AAC5B,aAAKC,GAAL,CAAU,eAAV;AACAL,QAAAA,IAAI,GAAGD,SAAS,CAACe,WAAV,CAAsBJ,UAAtB,CAAP;AACA,aAAKT,KAAL,CAAWc,GAAX,CAAehB,SAAS,CAACI,IAAzB,EAA+BH,IAA/B;AACA,eAAOA,IAAP;AACD;AACF;AACD;AACA,SAAKK,GAAL,CAAU,oBAAmBN,SAAS,CAACI,IAAK,GAA5C;AACAH,IAAAA,IAAI,GAAG,MAAMD,SAAS,CAACiB,KAAV,EAAb;AACA,SAAKf,KAAL,CAAWc,GAAX,CAAehB,SAAS,CAACI,IAAzB,EAA+BH,IAA/B;AACA,WAAOA,IAAP;AACD;;AAEOK,EAAAA,GAAG,CAACY,GAAD,EAAc;AACvB,QAAI,KAAKpB,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,WAAKA,WAAL,CAAkB,cAAaoB,GAAI,EAAnC;AACD;AACF;;AAEOhB,EAAAA,KAAK,GAAG,IAAIiB,GAAJ,EAAH;AACLV,EAAAA,gBAAgB,GAAG,IAAIW,GAAJ,EAAH;AAChBzB,EAAAA,SAAS,GAAqB,IAArB;AACTG,EAAAA,WAAW,GAAkB,IAAlB,CA3DE;;;AA8DvB;AACA,OAAO,MAAMuB,SAAS,GAAG,IAAI5B,SAAJ,EAAlB;;AAEP;AACA,IAAI6B,mBAAmB,GAAG,KAA1B;;AAEA;AACA,OAAO,SAASC,sBAAT,GAAkC;AACvC,SAAOD,mBAAP;AACD;;AAED;AACA,OAAO,SAASE,sBAAT,CAAgCC,KAAK,GAAG,IAAxC,EAA8C;AACnDH,EAAAA,mBAAmB,GAAGG,KAAtB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA","sourcesContent":["/**\n * Utilities to improve the performance of the CTS, by caching data that is\n * expensive to build using a two-level cache (in-memory, pre-computed file).\n */\n\ninterface DataStore {\n  load(path: string): Promise<string>;\n}\n\n/** Logger is a basic debug logger function */\nexport type Logger = (s: string) => void;\n\n/** DataCache is an interface to a data store used to hold cached data */\nexport class DataCache {\n  /** setDataStore() sets the backing data store used by the data cache */\n  public setStore(dataStore: DataStore) {\n    this.dataStore = dataStore;\n  }\n\n  /** setDebugLogger() sets the verbose logger */\n  public setDebugLogger(logger: Logger) {\n    this.debugLogger = logger;\n  }\n\n  /**\n   * fetch() retrieves cacheable data from the data cache, first checking the\n   * in-memory cache, then the data store (if specified), then resorting to\n   * building the data and storing it in the cache.\n   */\n  public async fetch<Data>(cacheable: Cacheable<Data>): Promise<Data> {\n    // First check the in-memory cache\n    let data = this.cache.get(cacheable.path);\n    if (data !== undefined) {\n      this.log('in-memory cache hit');\n      return Promise.resolve(data as Data);\n    }\n    this.log('in-memory cache miss');\n    // In in-memory cache miss.\n    // Next, try the data store.\n    if (this.dataStore !== null && !this.unavailableFiles.has(cacheable.path)) {\n      let serialized: string | undefined;\n      try {\n        serialized = await this.dataStore.load(cacheable.path);\n        this.log('loaded serialized');\n      } catch (err) {\n        // not found in data store\n        this.log(`failed to load (${cacheable.path}): ${err}`);\n        this.unavailableFiles.add(cacheable.path);\n      }\n      if (serialized !== undefined) {\n        this.log(`deserializing`);\n        data = cacheable.deserialize(serialized);\n        this.cache.set(cacheable.path, data);\n        return data as Data;\n      }\n    }\n    // Not found anywhere. Build the data, and cache for future lookup.\n    this.log(`cache: building (${cacheable.path})`);\n    data = await cacheable.build();\n    this.cache.set(cacheable.path, data);\n    return data as Data;\n  }\n\n  private log(msg: string) {\n    if (this.debugLogger !== null) {\n      this.debugLogger(`DataCache: ${msg}`);\n    }\n  }\n\n  private cache = new Map<string, unknown>();\n  private unavailableFiles = new Set<string>();\n  private dataStore: DataStore | null = null;\n  private debugLogger: Logger | null = null;\n}\n\n/** The data cache */\nexport const dataCache = new DataCache();\n\n/** true if the current process is building the cache */\nlet isBuildingDataCache = false;\n\n/** @returns true if the data cache is currently being built */\nexport function getIsBuildingDataCache() {\n  return isBuildingDataCache;\n}\n\n/** Sets whether the data cache is currently being built */\nexport function setIsBuildingDataCache(value = true) {\n  isBuildingDataCache = value;\n}\n\n/**\n * Cacheable is the interface to something that can be stored into the\n * DataCache.\n * The 'npm run gen_cache' tool will look for module-scope variables of this\n * interface, with the name `d`.\n */\nexport interface Cacheable<Data> {\n  /** the globally unique path for the cacheable data */\n  readonly path: string;\n\n  /**\n   * build() builds the cacheable data.\n   * This is assumed to be an expensive operation and will only happen if the\n   * cache does not already contain the built data.\n   */\n  build(): Promise<Data>;\n\n  /**\n   * serialize() transforms `data` to a string (usually JSON encoded) so that it\n   * can be stored in a text cache file.\n   */\n  serialize(data: Data): string;\n\n  /**\n   * deserialize() is the inverse of serialize(), transforming the string back\n   * to the Data object.\n   */\n  deserialize(serialized: string): Data;\n}\n"],"file":"data_cache.js"}