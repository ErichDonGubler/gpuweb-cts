{"version":3,"sources":["../../../src/common/runtime/cmdline.ts"],"names":["DefaultTestFileLoader","prettyPrintLog","Logger","parseQuery","parseExpectationsForTestQuery","assert","unreachable","sys","usage","rc","console","log","type","exit","existsSync","verbose","debug","printJSON","loadWebGPUExpectations","undefined","queries","i","args","length","a","startsWith","expectationsFile","URL","cwd","pathname","then","m","expectations","push","loader","filterQuery","testcases","loadCases","globalDebugMode","failed","warned","skipped","total","testcase","name","query","toString","rec","res","record","run","printResults","status","asJSON","passed","pct","x","toFixed","rpt","xs","padStart","Math","log10","catch","ex","stack","results","r","timems","logs","l"],"mappings":"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","sourcesContent":["/* eslint no-console: \"off\" */\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { prettyPrintLog } from '../internal/logging/log_message.js';\nimport { Logger } from '../internal/logging/logger.js';\nimport { LiveTestCaseResult } from '../internal/logging/result.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { parseExpectationsForTestQuery } from '../internal/query/query.js';\nimport { assert, unreachable } from '../util/util.js';\n\nimport sys from './helper/sys.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log(`  tools/run_${sys.type} [OPTIONS...] QUERIES...`);\n  console.log(`  tools/run_${sys.type} 'unittests:*' 'webgpu:buffers,*'`);\n  console.log('Options:');\n  console.log('  --verbose       Print result/log of every test as it runs.');\n  console.log('  --debug         Include debug messages in logging.');\n  console.log('  --print-json    Print the complete result JSON in the output.');\n  console.log('  --expectations  Path to expectations file.');\n  return sys.exit(rc);\n}\n\nif (!sys.existsSync('src/common/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nlet verbose = false;\nlet debug = false;\nlet printJSON = false;\nlet loadWebGPUExpectations: Promise<unknown> | undefined = undefined;\n\nconst queries: string[] = [];\nfor (let i = 0; i < sys.args.length; ++i) {\n  const a = sys.args[i];\n  if (a.startsWith('-')) {\n    if (a === '--verbose') {\n      verbose = true;\n    } else if (a === '--debug') {\n      debug = true;\n    } else if (a === '--print-json') {\n      printJSON = true;\n    } else if (a === '--expectations') {\n      const expectationsFile = new URL(sys.args[++i], `file://${sys.cwd()}`).pathname;\n      loadWebGPUExpectations = import(expectationsFile).then(m => m.expectations);\n    } else {\n      usage(1);\n    }\n  } else {\n    queries.push(a);\n  }\n}\n\nif (queries.length === 0) {\n  usage(0);\n}\n\n(async () => {\n  const loader = new DefaultTestFileLoader();\n  assert(queries.length === 1, 'currently, there must be exactly one query on the cmd line');\n  const filterQuery = parseQuery(queries[0]);\n  const testcases = await loader.loadCases(filterQuery);\n  const expectations = parseExpectationsForTestQuery(\n    await (loadWebGPUExpectations ?? []),\n    filterQuery\n  );\n\n  Logger.globalDebugMode = debug;\n  const log = new Logger();\n\n  const failed: Array<[string, LiveTestCaseResult]> = [];\n  const warned: Array<[string, LiveTestCaseResult]> = [];\n  const skipped: Array<[string, LiveTestCaseResult]> = [];\n\n  let total = 0;\n\n  for (const testcase of testcases) {\n    const name = testcase.query.toString();\n    const [rec, res] = log.record(name);\n    await testcase.run(rec, expectations);\n\n    if (verbose) {\n      printResults([[name, res]]);\n    }\n\n    total++;\n    switch (res.status) {\n      case 'pass':\n        break;\n      case 'fail':\n        failed.push([name, res]);\n        break;\n      case 'warn':\n        warned.push([name, res]);\n        break;\n      case 'skip':\n        skipped.push([name, res]);\n        break;\n      default:\n        unreachable('unrecognized status');\n    }\n  }\n\n  assert(total > 0, 'found no tests!');\n\n  // TODO: write results out somewhere (a file?)\n  if (printJSON) {\n    console.log(log.asJSON(2));\n  }\n\n  if (skipped.length) {\n    console.log('');\n    console.log('** Skipped **');\n    printResults(skipped);\n  }\n  if (warned.length) {\n    console.log('');\n    console.log('** Warnings **');\n    printResults(warned);\n  }\n  if (failed.length) {\n    console.log('');\n    console.log('** Failures **');\n    printResults(failed);\n  }\n\n  const passed = total - warned.length - failed.length - skipped.length;\n  const pct = (x: number) => ((100 * x) / total).toFixed(2);\n  const rpt = (x: number) => {\n    const xs = x.toString().padStart(1 + Math.log10(total), ' ');\n    return `${xs} / ${total} = ${pct(x).padStart(6, ' ')}%`;\n  };\n  console.log('');\n  console.log(`** Summary **\nPassed  w/o warnings = ${rpt(passed)}\nPassed with warnings = ${rpt(warned.length)}\nSkipped              = ${rpt(skipped.length)}\nFailed               = ${rpt(failed.length)}`);\n\n  if (failed.length || warned.length) {\n    sys.exit(1);\n  }\n})().catch(ex => {\n  console.log(ex.stack ?? ex.toString());\n  sys.exit(1);\n});\n\nfunction printResults(results: Array<[string, LiveTestCaseResult]>): void {\n  for (const [name, r] of results) {\n    console.log(`[${r.status}] ${name} (${r.timems}ms). Log:`);\n    if (r.logs) {\n      for (const l of r.logs) {\n        console.log(prettyPrintLog(l));\n      }\n    }\n  }\n}\n"],"file":"cmdline.js"}