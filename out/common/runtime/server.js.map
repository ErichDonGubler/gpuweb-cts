{"version":3,"sources":["../../../src/common/runtime/server.ts"],"names":["http","DefaultTestFileLoader","prettyPrintLog","Logger","parseQuery","setGPUProvider","sys","usage","rc","console","log","type","exit","existsSync","debug","i","args","length","a","startsWith","modulePath","require","gpu","globalDebugMode","testcases","allWebGPUTestcases","webgpuQuery","loader","map","Map","testcase","loadCases","name","query","toString","set","runTestcase","expectations","rec","res","record","run","server","createServer","request","response","url","undefined","end","runPrefix","terminatePrefix","substr","get","status","message","result","logs","join","JSON","stringify","close","statusCode","listen","address","port","catch","ex","error","stack"],"mappings":"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","sourcesContent":["/* eslint no-console: \"off\" */\n\nimport * as http from 'http';\nimport { AddressInfo } from 'net';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { prettyPrintLog } from '../internal/logging/log_message.js';\nimport { Logger } from '../internal/logging/logger.js';\nimport { LiveTestCaseResult } from '../internal/logging/result.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQueryWithExpectation } from '../internal/query/query.js';\nimport { TestTreeLeaf } from '../internal/tree.js';\nimport { setGPUProvider } from '../util/navigator_gpu.js';\n\nimport sys from './helper/sys.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log(`  tools/run_${sys.type} [OPTIONS...]`);\n  console.log('Options:');\n  console.log('  --verbose       Print result/log of every test as it runs.');\n  console.log('  --gpu-provider  Path to node module that provides the GPU implementation.');\n  console.log(``);\n  console.log(`Provides an HTTP server used for running tests via an HTTP RPC interface`);\n  console.log(`To run a test, perform an HTTP GET or POST at the URL:`);\n  console.log(`  http://localhost:port/run?<test-name>`);\n  console.log(`To shutdown the server perform an HTTP GET or POST at the URL:`);\n  console.log(`  http://localhost:port/terminate`);\n  return sys.exit(rc);\n}\n\ninterface RunResult {\n  status: string;\n  message: string;\n}\n\nif (!sys.existsSync('src/common/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nlet debug = false;\n\nfor (let i = 0; i < sys.args.length; ++i) {\n  const a = sys.args[i];\n  if (a.startsWith('-')) {\n    if (a === '--gpu-provider') {\n      const modulePath = sys.args[++i];\n      setGPUProvider(() => require(modulePath).gpu);\n    } else if (a === '--help') {\n      usage(1);\n    } else if (a === '--verbose') {\n      debug = true;\n    }\n  }\n}\n\n(async () => {\n  Logger.globalDebugMode = debug;\n  const log = new Logger();\n  const testcases = allWebGPUTestcases();\n\n  async function allWebGPUTestcases() {\n    const webgpuQuery = parseQuery('webgpu:*');\n    const loader = new DefaultTestFileLoader();\n    const map = new Map<string, TestTreeLeaf>();\n    for (const testcase of await loader.loadCases(webgpuQuery)) {\n      const name = testcase.query.toString();\n      map.set(name, testcase);\n    }\n    return map;\n  }\n\n  async function runTestcase(\n    testcase: TestTreeLeaf,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<LiveTestCaseResult> {\n    const name = testcase.query.toString();\n    const [rec, res] = log.record(name);\n    await testcase.run(rec, expectations);\n    return res;\n  }\n\n  const server = http.createServer(\n    async (request: http.IncomingMessage, response: http.ServerResponse) => {\n      if (request.url === undefined) {\n        response.end('invalid url');\n        return;\n      }\n\n      const runPrefix = '/run?';\n      const terminatePrefix = '/terminate';\n\n      if (request.url.startsWith(runPrefix)) {\n        const name = request.url.substr(runPrefix.length);\n        const testcase = (await testcases).get(name);\n        let status = 'fail';\n        let message = '';\n        if (testcase) {\n          const result = await runTestcase(testcase);\n          status = result.status;\n          if (result.logs !== undefined) {\n            message = result.logs.map(log => prettyPrintLog(log)).join('\\n');\n          }\n        } else {\n          message = `test case '${name}' not found`;\n        }\n        const res: RunResult = { status, message };\n        response.end(JSON.stringify(res));\n      } else if (request.url.startsWith(terminatePrefix)) {\n        server.close();\n        sys.exit(1);\n      } else {\n        response.statusCode = 404;\n        response.end('unhandled url request');\n      }\n    }\n  );\n\n  server.listen(0, () => {\n    const address = server.address() as AddressInfo;\n    console.log(`Server listening at [[${address.port}]]`);\n  });\n})().catch(ex => {\n  console.error(ex.stack ?? ex.toString());\n  sys.exit(1);\n});\n"],"file":"server.js"}