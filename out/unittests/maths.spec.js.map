{"version":3,"sources":["../../src/unittests/maths.spec.ts"],"names":["description","makeTestGroup","kBit","f32","f32Bits","diffULP","nextAfter","UnitTest","g","hexToF32","hex","Float32Array","Uint32Array","buffer","test","paramsSimple","a","b","ulp","fn","t","params","got","expect","val","NaN","dir","result","Number","POSITIVE_INFINITY","infinity","positive","NEGATIVE_INFINITY","negative","subnormal","min","max","expect_type","got_type","value","isNaN"],"mappings":"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","sourcesContent":["export const description = `\nUtil math unit tests.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { kBit } from '../webgpu/shader/execution/builtin/builtin.js';\nimport { f32, f32Bits, Scalar } from '../webgpu/util/conversion.js';\nimport { diffULP, nextAfter } from '../webgpu/util/math.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\ninterface DiffULPCase {\n  a: number;\n  b: number;\n  ulp: number;\n}\n\nfunction hexToF32(hex: number): number {\n  return new Float32Array(new Uint32Array([hex]).buffer)[0];\n}\n\ng.test('test,math,diffULP')\n  .paramsSimple<DiffULPCase>([\n    { a: 0, b: 0, ulp: 0 },\n    { a: 1, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 1, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 4, ulp: 2 ** 23 }, // Single exponent step\n    { a: 4, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -1, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -1, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -4, ulp: 2 ** 23 }, // Single exponent step\n    { a: -4, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: 1, b: 4, ulp: 2 ** 24 }, // Double exponent step\n    { a: 4, b: 1, ulp: 2 ** 24 }, // Double exponent step\n    { a: -1, b: -4, ulp: 2 ** 24 }, // Double exponent step\n    { a: -4, b: -1, ulp: 2 ** 24 }, // Double exponent step\n    { a: hexToF32(0x00800000), b: hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800001), b: hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800000), b: hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800001), b: hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800001), b: -hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800000), b: -hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800001), b: -hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800000), b: hexToF32(0x00800002), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x00800002), b: hexToF32(0x00800000), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x03800000), b: hexToF32(0x03800002), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x03800002), b: hexToF32(0x03800000), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00800002), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x00800002), b: -hexToF32(0x00800000), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x03800000), b: -hexToF32(0x03800002), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x03800002), b: -hexToF32(0x03800000), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x00800000), b: 0, ulp: 1 }, // Normals near 0\n    { a: 0, b: hexToF32(0x00800000), ulp: 1 }, // Normals near 0\n    { a: -hexToF32(0x00800000), b: 0, ulp: 1 }, // Normals near 0\n    { a: 0, b: -hexToF32(0x00800000), ulp: 1 }, // Normals near 0\n    { a: hexToF32(0x00800000), b: -hexToF32(0x00800000), ulp: 2 }, // Normals around 0\n    { a: -hexToF32(0x00800000), b: hexToF32(0x00800000), ulp: 2 }, // Normals around 0\n    { a: hexToF32(0x00000001), b: 0, ulp: 0 }, // Subnormals near 0\n    { a: 0, b: hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: -hexToF32(0x00000001), b: 0, ulp: 0 }, // Subnormals near 0\n    { a: 0, b: -hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: hexToF32(0x00000001), b: -hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: -hexToF32(0x00000001), b: hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: hexToF32(0x00000001), b: hexToF32(0x00800000), ulp: 1 }, // Normal/Subnormal boundary\n    { a: hexToF32(0x00800000), b: hexToF32(0x00000001), ulp: 1 }, // Normal/Subnormal boundary\n    { a: -hexToF32(0x00000001), b: -hexToF32(0x00800000), ulp: 1 }, // Normal/Subnormal boundary\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00000001), ulp: 1 }, // Normal/Subnormal boundary\n    { a: hexToF32(0x00800001), b: hexToF32(0x00000000), ulp: 2 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800001), b: hexToF32(0x00000001), ulp: 2 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800005), b: hexToF32(0x00000001), ulp: 6 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800005), b: hexToF32(0x00000111), ulp: 6 }, // Just-above-Normal/Subnormal boundary\n  ])\n  .fn(t => {\n    const a = t.params.a;\n    const b = t.params.b;\n    const got = diffULP(a, b);\n    const expect = t.params.ulp;\n    t.expect(got === expect, `diffULP(${a}, ${b}) returned ${got}. Expected ${expect}`);\n  });\n\ninterface nextAfterCase {\n  val: number;\n  dir: boolean;\n  result: Scalar;\n}\n\ng.test('test,math,nextAfter')\n  .paramsSimple<nextAfterCase>([\n    // Edge Cases\n    { val: NaN, dir: true, result: f32Bits(0x7fffffff) },\n    { val: NaN, dir: false, result: f32Bits(0x7fffffff) },\n    { val: Number.POSITIVE_INFINITY, dir: true, result: f32Bits(kBit.f32.infinity.positive) },\n    { val: Number.POSITIVE_INFINITY, dir: false, result: f32Bits(kBit.f32.infinity.positive) },\n    { val: Number.NEGATIVE_INFINITY, dir: true, result: f32Bits(kBit.f32.infinity.negative) },\n    { val: Number.NEGATIVE_INFINITY, dir: false, result: f32Bits(kBit.f32.infinity.negative) },\n\n    // Zeroes\n    { val: -0, dir: true, result: f32Bits(kBit.f32.subnormal.positive.min) },\n    { val: +0, dir: false, result: f32Bits(kBit.f32.subnormal.negative.max) },\n    // Skipping these, since the testing framework does not distinguish between\n    // +0 and -0, so throws an error about duplicate cases.\n    // { val: +0, dir: true, result: f32Bits(kBit.f32.subnormal.positive.min) },\n    // { val: -0, dir: false, result: f32Bits(kBit.f32.subnormal.negative.max) },\n\n    // Subnormals\n    { val: hexToF32(kBit.f32.subnormal.positive.min), dir: true, result: f32Bits(0x00000002) },\n    { val: hexToF32(kBit.f32.subnormal.positive.min), dir: false, result: f32(0) },\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.subnormal.positive.max), dir: true, result: f32Bits(kBit.f32.positive.min) },\n    { val: hexToF32(kBit.f32.subnormal.positive.max), dir: false, result: f32Bits(0x007ffffe) },\n    { val: hexToF32(kBit.f32.subnormal.negative.min), dir: true, result: f32Bits(0x807ffffe) },\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.subnormal.negative.min), dir: false, result: f32Bits(kBit.f32.negative.max) },\n    { val: hexToF32(kBit.f32.subnormal.negative.max), dir: true, result: f32(0) },\n    { val: hexToF32(kBit.f32.subnormal.negative.max), dir: false, result: f32Bits(0x80000002) },\n\n    // Normals\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.positive.max), dir: true, result: f32Bits(kBit.f32.infinity.positive) },\n    { val: hexToF32(kBit.f32.positive.max), dir: false, result: f32Bits(0x7f7ffffe) },\n    { val: hexToF32(kBit.f32.positive.min), dir: true, result: f32Bits(0x00800001) },\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.positive.min), dir: false, result: f32Bits(kBit.f32.subnormal.positive.max) },\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.negative.max), dir: true, result: f32Bits(kBit.f32.subnormal.negative.min) },\n    { val: hexToF32(kBit.f32.negative.max), dir: false, result: f32Bits(0x80800001) },\n    { val: hexToF32(kBit.f32.negative.min), dir: true, result: f32Bits(0xff7ffffe) },\n    // prettier-ignore\n    { val: hexToF32(kBit.f32.negative.min), dir: false, result: f32Bits(kBit.f32.infinity.negative) },\n    { val: hexToF32(0x03800000), dir: true, result: f32Bits(0x03800001) },\n    { val: hexToF32(0x03800000), dir: false, result: f32Bits(0x037fffff) },\n    { val: hexToF32(0x83800000), dir: true, result: f32Bits(0x837fffff) },\n    { val: hexToF32(0x83800000), dir: false, result: f32Bits(0x83800001) },\n  ])\n  .fn(t => {\n    const val = t.params.val;\n    const dir = t.params.dir;\n    const expect = t.params.result;\n    const expect_type = typeof expect;\n    const got = nextAfter(val, dir);\n    const got_type = typeof got;\n    t.expect(\n      got.value === expect.value || (Number.isNaN(got.value) && Number.isNaN(expect.value)),\n      `nextAfter(${val}, ${dir}) returned ${got} (${got_type}). Expected ${expect} (${expect_type})`\n    );\n  });\n"],"file":"maths.spec.js"}